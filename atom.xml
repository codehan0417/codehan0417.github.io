<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>doNow</title>
  
  <subtitle>smilePosition</subtitle>
  <link href="https://codehan045.github.io/atom.xml" rel="self"/>
  
  <link href="https://codehan045.github.io/"/>
  <updated>2021-09-02T15:54:36.278Z</updated>
  <id>https://codehan045.github.io/</id>
  
  <author>
    <name>时光路人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript之DOM事件(下)</title>
    <link href="https://codehan045.github.io/posts/e35394d.html"/>
    <id>https://codehan045.github.io/posts/e35394d.html</id>
    <published>2021-08-30T15:54:29.000Z</published>
    <updated>2021-09-02T15:54:36.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>事件流是指<code>当给嵌套标签设置同样事件时它们之间的触发顺序</code>.w3c标准里有两套事件流：冒泡和捕获。</li><li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li></ul><h3 id="事件流的三个阶段"><a href="#事件流的三个阶段" class="headerlink" title="事件流的三个阶段"></a>事件流的三个阶段</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210831002024.png" alt="DOM事件流"></p><ul><li>捕获阶段：由父标签到具体的子标签（由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。）<ul><li>完整捕获触发顺序：冒泡顺序的逆过程</li></ul></li><li>事件目标阶段：(对真正用户发生交互的标签进行触发事件)，事件目标就指的该标签</li><li>冒泡阶段：由子标签到具体的父标签（事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程）<ul><li>完整冒泡触发顺序是：<code>p-&gt;li-&gt;ul-&gt;body-&gt;html-&gt;document对象-&gt;window对象</code></li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p><code>JS </code>代码中只能执行捕获或者冒泡其中的一个阶段</p></li><li><p><code>onclick</code> 只能得到冒泡阶段</p></li><li><p><code>addEventListener(type,listener[,useCapture])</code>第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false (不写默认就是false),表示在事件冒泡阶段调用事件处理程序</p></li><li><p>有些事件是没有冒泡的，比如 <code>onblur</code>、<code>onfocus</code>、<code>onmouseenter</code>、<code>onmouseleave</code></p></li></ul><h2 id="事件对象-event"><a href="#事件对象-event" class="headerlink" title="事件对象(event)"></a>事件对象(event)</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态</li><li>简单理解：<ul><li>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面</li><li>这个对象就是事件对象<code>event</code>，它有很多属性和方法：比如<ul><li>谁绑定了这个事件，获取事件触发的元素</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置</li></ul></li></ul></li><li>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去</li><li>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</li></ul><pre class=" language-js"><code class="language-js">eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，常写成 e 或者 evt </span><span class="token punctuation">}</span> eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，常写成 e 或者 evt  </span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="事件对象常见的API或属性"><a href="#事件对象常见的API或属性" class="headerlink" title="事件对象常见的API或属性"></a>事件对象常见的<code>API</code>或属性</h3><table><thead><tr><th>事件对象的属性方法</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>e.target</code></strong></td><td>表示事件目标本身，返回触发事件的对象</td></tr><tr><td><code>e.currentTarget</code></td><td>当前冒泡的标签本身</td></tr><tr><td><strong><code>e.preventDefault()</code></strong></td><td>阻止标签的默认行为，例如：不让<code>a</code>标签跳转、表单提交（一般写在事件处理程序的第一行）</td></tr><tr><td><code>e.stopPropagation()</code></td><td>阻止进一步的冒泡或捕获</td></tr></tbody></table><blockquote><p><code>e.target</code> 和 <code>this </code>的区别：</p><ul><li><code>this</code> 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</li><li><code>e.target</code> 是事件触发的元素。*<code>e.target </code>指向我们点击的那个对象 谁触发了这个事件*</li></ul></blockquote><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td><code>e.clientX</code>&amp;<code>e.clientY</code></td><td>鼠标相对于页面**首屏(视口)**的x和y坐标</td></tr><tr><td><code>e.pageX</code>&amp;<code>e.pageY</code></td><td>鼠标相对于整个页面文档的x和y坐标</td></tr><tr><td><code>e.offsetX</code>&amp;<code>e.offsetY</code></td><td>鼠标相对于触发事件标签的左上角的偏移量</td></tr></tbody></table><h3 id="键盘对象属性"><a href="#键盘对象属性" class="headerlink" title="键盘对象属性"></a>键盘对象属性</h3><table><thead><tr><th><strong>键盘事件对象</strong> <strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>e.keyCode</code></td><td>返回该键值的ASCll码值</td></tr></tbody></table><blockquote><p><code>keyCode</code>属性能区分大小写，返回不同的ASCII值</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span>        <span class="token comment" spellcheck="true">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span>        <span class="token comment" spellcheck="true">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'up:'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您按下的a键'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您没有按下a键'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'press:'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><ul><li>事件委托也称事件代理，在<code>jQuery</code>中称为事件委派</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>事件委托/事件代理指的是借助冒泡机制以及event对象来实现减少页面的事件处理程序代码的一种编程技巧。</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>给父标签设置事件处理程序来代替给具体子标签设置，父标签会因为冒泡机制会执行代码。在事件处理程序中利用<code>e.target</code>来获取真正触发事件的子标签，判断并进行处理</p></blockquote><h3 id="步骤流程"><a href="#步骤流程" class="headerlink" title="步骤流程"></a>步骤流程</h3><ol><li> 给父标签设置事件处理程序</li><li>当触发事件时。在事件处理程序中通过<code>e.target</code>拿到具体触发事件的事件目标</li><li>通过事件目标的id或class来进行判断，执行对应的代码</li></ol><pre class=" language-js"><code class="language-js">html<span class="token punctuation">:</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"nav"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"myli"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"myP"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>这是一个span标签<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link"</span><span class="token operator">></span>百度一下<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>这是另一个span标签<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>javaScript<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//事件委托</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿到事件目标</span>    <span class="token keyword">var</span> elem <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据class或id来判断是具体哪个子标签，再来执行对应的代码</span>    <span class="token keyword">var</span> classname <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>classname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"myP"</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// 执行p标签被点击时的执行代码</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"myli"</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"li被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"link"</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"nav"</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ul被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="好处优点"><a href="#好处优点" class="headerlink" title="好处优点"></a>好处优点</h3><ul><li>减少了事件处理程序的定义代码</li><li>统一管理子标签的事件处理程序</li><li>维护方便</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DOM事件流&quot;&gt;&lt;a href=&quot;#DOM事件流&quot; class=&quot;headerlink&quot; title=&quot;DOM事件流&quot;&gt;&lt;/a&gt;DOM事件流&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript DOM事件" scheme="https://codehan045.github.io/tags/JavaScript-DOM%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件(上)</title>
    <link href="https://codehan045.github.io/posts/d634e3f0.html"/>
    <id>https://codehan045.github.io/posts/d634e3f0.html</id>
    <published>2021-08-29T10:52:02.000Z</published>
    <updated>2021-08-30T15:52:33.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><ul><li>我们把用户跟页面之间的所有交互动作统称为事件。每个动作都是一个事件。比如点击事件、输入框获取焦点、失去焦点。</li><li>JavaScript可以实现在某个事件触发时，可以执行指定的代码</li><li>简单理解： <code>触发</code>  —   <code> 响应机制</code>。</li></ul><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ol><li>事件源(谁，哪个)</li><li>事件类型(什么事件)</li><li>事件执行程序(干什么)</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例: 点击一个按钮，弹出对话框</span><span class="token comment" spellcheck="true">//（1）事件源  事件触发的对象   ，谁-----> 按钮</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span><span class="token comment" spellcheck="true">//(3) 事件处理程序 点击之后发生什么  ---弹出对话框  通过一个函数赋值的方式 完成</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点我干哈"</span><span class="token punctuation">)</span>； <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h2><ol><li>获取事件源(在DOM对节点和元素操作中查看)</li><li>注册事件(绑定事件)</li><li>添加事件处理程序（<code>DOM0/2</code>级方式） </li></ol><h3 id="绑定事件-注册事件"><a href="#绑定事件-注册事件" class="headerlink" title="绑定事件(注册事件)"></a>绑定事件(注册事件)</h3><ul><li>概念：给元素添加事件</li></ul><h4 id="绑定事件的方式"><a href="#绑定事件的方式" class="headerlink" title="绑定事件的方式"></a>绑定事件的方式</h4><table><thead><tr><th>传统方式DOM0级</th><th>添加事件监听方式DOM2级</th></tr></thead><tbody><tr><td>直接在页面标签中书写对应的事件或调用函数，如下：</td><td><code>W3C</code>标准推荐方式</td></tr><tr><td><code>&lt;button onclick = "alert("hello world")"&gt;&lt;/button&gt;</code></td><td><code>事件源.addEventListener('事件名'，function(){事件执行程序})</code></td></tr><tr><td><code>btn.onclick = function() {事件执行程序}</code></td><td></td></tr><tr><td>缺点：对于同一元素的同一个事件，只能添加一个，若添加多个则后面的会覆盖掉前面的</td><td>特点：同一个元素同一个事件可以绑定多个监听器，执行时按顺序依次执行</td></tr><tr><td>只支持冒泡，不支持捕获</td><td>都支持</td></tr></tbody></table><h5 id="传统方式DOM0级"><a href="#传统方式DOM0级" class="headerlink" title="传统方式DOM0级"></a><strong>传统方式DOM0级</strong></h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1. 直接写在标签代码上</span><span class="token operator">&lt;</span>标签名 on事件名<span class="token operator">=</span><span class="token string">"要执行的代码"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//例子：给div设置点击事件，触发点击时执行demo函数</span><span class="token operator">&lt;</span>div onclick<span class="token operator">=</span><span class="token string">"demo()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//2. JavaScript代码</span>标签变量名<span class="token punctuation">.</span>on事件名 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//事件触发时要执行的代码</span><span class="token punctuation">}</span></code></pre><h5 id="addEventListener-事件监听方式"><a href="#addEventListener-事件监听方式" class="headerlink" title="addEventListener()事件监听方式"></a><code>addEventListener()</code>事件监听方式</h5><ul><li><code>eventTarget.addEventListener()</code>方法将指定的监听器绑定到 <code>eventTarget</code>（目标对象，目标元素）上</li></ul><pre class=" language-js"><code class="language-js">eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">,</span><span class="token punctuation">[</span>usecap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>该方法接收三个参数<ul><li><code>eventType</code>:事件类型，比如<code>click</code>,<code>mousemove</code>注：**<code>这里不带 on</code>**</li><li><code>function</code>  :事件处理函数</li><li><code>usecap</code>:可选参数，是一个布尔值，默认为false(在DOM事件流中，表示是否捕获阶段执行) </li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例子：给div设置点击事件，触发点击时执行demo函数，捕获和冒泡都要执行，</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>demo<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡阶段处理</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>demo<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//捕获阶段处理</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要执行的代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 要执行的代码</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡阶段处理</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要执行的代码</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//捕获阶段处理</span></code></pre><blockquote><p><code>addEventListener()</code>事件监听方式，在调用函数时，里面的函数demo不需要加小括号调用</p></blockquote><h3 id="删除事件-解绑事件"><a href="#删除事件-解绑事件" class="headerlink" title="删除事件(解绑事件)"></a>删除事件(解绑事件)</h3><h4 id="DOM2级"><a href="#DOM2级" class="headerlink" title="DOM2级"></a>DOM2级</h4><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"事件名"</span><span class="token punctuation">,</span>触发事件要执行的函数<span class="token punctuation">,</span>是否捕获阶段处理<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果要删除，那么删除所提供的参数必须和添加事件处理程序的参数一模一样,且提供的是自定义函数，不能直接是function。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可以删除 </span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>demo<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡阶段处理</span>div<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>demo<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡阶段处理</span><span class="token comment" spellcheck="true">//不可以删除</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡阶段处理</span>div<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡阶段处理  x</span></code></pre><h4 id="DOM0级"><a href="#DOM0级" class="headerlink" title="DOM0级"></a>DOM0级</h4><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><blockquote><p> 删除事件兼容性解决方案</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 removeEventListener 方法</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><h3 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a><code>UI</code>事件</h3><h4 id="load"><a href="#load" class="headerlink" title="load"></a><strong><code>load</code></strong></h4><blockquote><p>在页面加载完或图片、文件加载完之后触发。一般针对页面和图片</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1. 页面加载完(固定)</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//整个页面加载完之后执行</span>    <span class="token comment" spellcheck="true">// load事件触发后执行这里的代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 图片加载完</span><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    图片加载完毕<span class="token punctuation">}</span></code></pre><ul><li>可以保证load事件里的代码可以使用页面上的任意标签。反之<code>JavaScript</code>可能拿不到<code>HTML</code>标签。</li><li>可以在head标签中用JavaScript使用HTML标签而无需担心加载问题。</li></ul><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a><strong><code>resize</code></strong></h4><blockquote><p>当页面的尺寸发生变化时触发</p></blockquote><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onresize <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    要执行的代码<span class="token punctuation">}</span></code></pre><ul><li>当浏览器宽高变化时，会触发。</li><li>可以配合移动端的知识实现移动端的屏幕适配.根据不同屏幕，切换<code>html</code>字体大小</li></ul><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><h4 id="click-amp-dbclick"><a href="#click-amp-dbclick" class="headerlink" title="*click&amp;dbclick"></a><strong><code>*click&amp;</code></strong><code>dbclick</code></h4><blockquote><p>点击和双击</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//点击</span><span class="token punctuation">}</span>标签变量名<span class="token punctuation">.</span>ondblclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//双击</span><span class="token punctuation">}</span></code></pre><h4 id="mousemove"><a href="#mousemove" class="headerlink" title="mousemove"></a><code>mousemove</code></h4><blockquote><p>鼠标移动事件：在指定事件的标签中移动时会不断触发</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//鼠标移动</span><span class="token punctuation">}</span></code></pre><h4 id="mouseenter-amp-mouseleave"><a href="#mouseenter-amp-mouseleave" class="headerlink" title="mouseenter&amp;mouseleave"></a><code>mouseenter</code>&amp;<code>mouseleave</code></h4><blockquote><p>在鼠标进入或离开指定标签时，会触发一次</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onmouseenter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//鼠标进入该标签</span><span class="token punctuation">}</span>标签变量名<span class="token punctuation">.</span>onmouseleave <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//鼠标离开该标签</span><span class="token punctuation">}</span></code></pre><h4 id="mousewheel"><a href="#mousewheel" class="headerlink" title="mousewheel"></a><code>mousewheel</code></h4><blockquote><p>当鼠标滚轮滚动时会不断触发</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//鼠标滚轮滑动时触发</span><span class="token punctuation">}</span></code></pre><ul><li>应用：当鼠标滚动到指定位置时才会去加载相应的页面数据</li></ul><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><h4 id="keyup-amp-keypress-amp-keydown"><a href="#keyup-amp-keypress-amp-keydown" class="headerlink" title="*keyup&amp;keypress&amp;keydown"></a><code>*keyup</code>&amp;<code>keypress</code>&amp;<code>keydown</code></h4><blockquote><p><code>keyup</code>当键帽弹起完毕时触发</p><p><code>keypress</code>：当键帽将要弹起时触发</p><p><code>keydown</code>：当键帽被按压时触发</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//键帽弹起完毕时触发</span><span class="token punctuation">}</span>标签变量名<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//键帽按压时触发</span><span class="token punctuation">}</span>标签变量名<span class="token punctuation">.</span>onkeypress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//键帽将要弹起时触发</span><span class="token punctuation">}</span></code></pre><ul><li>一般来说是给<code>input</code>或<code>textarea</code>指定键盘事件</li></ul><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a><strong>焦点事件</strong></h3><h4 id="focus-amp-blur"><a href="#focus-amp-blur" class="headerlink" title="focus&amp;blur"></a><strong><code>focus&amp;blur</code></strong></h4><blockquote><p><code>focus</code>:当标签获取鼠标焦点时触发。比如光标进入到输入框中</p><p><code>blur</code>:当标签失去鼠标焦点时触发。比如输入框输入完文字后，鼠标点击输入框外面</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当标签失去焦点时触发//登录注册等应用</span><span class="token punctuation">}</span>标签变量名<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当标签获取焦点时触发</span><span class="token punctuation">}</span></code></pre><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><h4 id="change"><a href="#change" class="headerlink" title="change"></a><strong><code>change</code></strong></h4><blockquote><p>当表单元素切换选项时触发，比如下拉菜单，单选、或多选</p></blockquote><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当表单元素切换选项时触发</span><span class="token punctuation">}</span></code></pre><ul><li>应用：可以用于收货地址的数据联动</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件基础&quot;&gt;&lt;a href=&quot;#事件基础&quot; class=&quot;headerlink&quot; title=&quot;事件基础&quot;&gt;&lt;/a&gt;事件基础&lt;/h2&gt;&lt;h3 id=&quot;事件概述&quot;&gt;&lt;a href=&quot;#事件概述&quot; class=&quot;headerlink&quot; title=&quot;事件概述&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Javascript" scheme="https://codehan045.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式</title>
    <link href="https://codehan045.github.io/posts/c9adf6e3.html"/>
    <id>https://codehan045.github.io/posts/c9adf6e3.html</id>
    <published>2021-08-24T06:55:24.000Z</published>
    <updated>2021-09-02T15:56:15.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>正则表达式用于定义一些字符串的规则， 计算机可以根据正则表达式，来检查一个字符串是否符合规则</li><li> 获取将字符串中符合规则的内容提取出来</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>检查数据格式，获取符合要求的数据</li></ul><h3 id="正则表达式对象的定义-创建"><a href="#正则表达式对象的定义-创建" class="headerlink" title="正则表达式对象的定义(创建)"></a>正则表达式对象的定义(创建)</h3><h4 id="创建正则表达式对象"><a href="#创建正则表达式对象" class="headerlink" title="创建正则表达式对象"></a>创建正则表达式对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 变量 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"正则表达式"</span><span class="token punctuation">,</span><span class="token string">"匹配模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用typeof检查正则对象，会返回object</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个正则表达式可以来检查一个字符串中是否含有a</span><span class="token comment" spellcheck="true">// 在构造函数中可以传递一个匹配模式作为第二个参数</span>u 默认值  匹配第一个i   忽略大小写 g  全局匹配模式</code></pre><h4 id="字面量创建正则表达式"><a href="#字面量创建正则表达式" class="headerlink" title="字面量创建正则表达式"></a>字面量创建正则表达式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span><span class="token keyword">var</span>  变量<span class="token operator">=</span> <span class="token operator">/</span>正则表达式<span class="token operator">/</span>匹配模式<span class="token punctuation">;</span><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/[0-9]/</span><span class="token punctuation">;</span></code></pre><h3 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h3><h4 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h4><ul><li><p>使用此方法可以用来检查一个字符串是否符合正则表达式的规则，如果符合则返回<code>true</code>，否则返回<code>false</code></p><pre class=" language-js"><code class="language-js">reg <span class="token operator">=</span> <span class="token regex">/[0-9]/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span></code></pre></li></ul><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><ul><li><p>判断某个数据是否满足正则表达式，返回匹配的那部分数据，若数据中有多个满足正则表达式，只返回满足条件的第一个</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex">/[0-9{10}]/</span><span class="token punctuation">;</span><span class="token keyword">var</span> text<span class="token operator">=</span><span class="token string">'1234567890  1112223330 7778889990'</span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1234567890</span></code></pre></li></ul><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="组"><a href="#组" class="headerlink" title="[ ]组"></a><code>[ ]</code>组</h4><blockquote><p>可以匹配其中的任意一个字符，<code>[]</code>中的内容是或的关系，相当于<code>|</code></p></blockquote><ul><li><p><code>[0-9]</code>:匹配任意一个数字</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">123456</span><span class="token punctuation">]</span><span class="token punctuation">:</span>匹配<span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span>，<span class="token number">6</span> 当中的任意一个</code></pre></li><li><p><code>[a-z]</code> 匹配任意一个小写字母</p></li><li><p><code>[A-Z]</code>匹配任意一个大写字母</p></li><li><p><code>[a-zA-Z]</code>:匹配任意一个字母  或  <code>[A-z]</code> 任意字母</p></li><li><p><code>[0-9a-zA-Z]</code>:匹配任意一个数字或字母</p></li></ul><h4 id=""><a href="#" class="headerlink" title="{}"></a>{}</h4><blockquote><p>用于描述组<code>[ ]</code>出现的次数：这里如果不进行限制，最多出现的次数不匹配，需要验证整个字符串。</p></blockquote><ul><li><code>{m,n}</code>:表示前面的一个组至少出现m次，最多n次</li><li><code>{m}</code>:表示前面的一个组固定次数m次</li><li><code>{m,}</code>:表示前面的一个组至少m次</li><li><code>{,n}</code>:表示前面的一个组至多n次</li></ul><h4 id="以什么开头"><a href="#以什么开头" class="headerlink" title="^以什么开头"></a><code>^</code>以什么开头</h4><ul><li><code>/^[0-9]{3}/</code>:以3个连续的数字开头</li><li><code>/^[a-z]/</code>:以一个小写字母开头</li></ul><h4 id="以什么结束"><a href="#以什么结束" class="headerlink" title="$以什么结束"></a><code>$</code>以什么结束</h4><ul><li><code>/[0-9a-zA-Z]{3}$/</code>:以3个数字或字母结尾</li></ul><blockquote><p><code>/^正则表达式语法$/</code>:匹配整个的字符串必须符合此规则，以什么开头，以什么结尾</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token regex">/^[a-zA-Z]{10}$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示整个字符串是10个字母</span></code></pre><h4 id="匹配固定长字符"><a href="#匹配固定长字符" class="headerlink" title="() 匹配固定长字符"></a>() 匹配固定长字符</h4><ul><li><code>/(jpg|png|gif|jpeg)/</code>:匹配<code>jpg</code>、<code>png</code>、<code>gif</code>、<code>jpeg</code>中的一个</li></ul><h2 id="正则表达式高阶"><a href="#正则表达式高阶" class="headerlink" title="正则表达式高阶"></a>正则表达式高阶</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>正则表达式中有一些符号具有特殊的含义<code>元字符</code></li></ul><h3 id="常见元字符"><a href="#常见元字符" class="headerlink" title="常见元字符"></a>常见元字符</h3><ul><li><code>.</code>:会匹配一个除换行符以外的任意一个字符。如果想要匹配<code>.</code>本身。需要通过转义字符<code>\</code>来处理</li><li><code>+</code>:会匹配前面的组<code>[]</code>至少一次。等同于<code>{1,}</code> (最大限度的匹配)</li><li><code>?</code>:会匹配前面的组<code>[]</code>一次或者没有。等同于<code>{0,1}</code></li><li><code>*</code>:会匹配前面的组<code>[]</code>至少0次。等同于<code>{0,}</code></li><li><code>\w</code>:匹配一个单词字符或下划线。等同于<code>[0-9a-zA-Z_]</code></li><li><code>\d</code>:匹配一个数字。等同于<code>[0-9]</code></li></ul><h3 id="常用正则表达式应用"><a href="#常用正则表达式应用" class="headerlink" title="常用正则表达式应用"></a>常用正则表达式应用</h3><ul><li><p> 汉字：<code>/^[\u4e00-\u9fa5]{0,}$/</code></p></li><li><p>Email邮箱地址：<code>/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</code></p></li><li><p>手机号码：<code>/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$/</code></p></li></ul><h3 id="正则表达式匹配模式"><a href="#正则表达式匹配模式" class="headerlink" title="正则表达式匹配模式"></a>正则表达式匹配模式</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>根据不同的需求，正则表达式提供了针对不同场景下使用的模式。常见的模式有3种：u(默认)，g(全局)，i(不区分大小写)</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><code>u</code>(默认):匹配最近的那一项</li><li><code>g</code>(全局):匹配所有满足的项</li><li><code>i</code>(不区分大小写):在匹配时不考虑大小写</li></ul><h2 id="正则表达式在字符串中的应用"><a href="#正则表达式在字符串中的应用" class="headerlink" title="正则表达式在字符串中的应用"></a>正则表达式在字符串中的应用</h2><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><blockquote><p>与字符串一起使用以检查字符串和正则表达式 <code>regex</code> 之间的匹配，以正则表达式为参数。</p></blockquote><pre class=" language-js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="返回值（数组）"><a href="#返回值（数组）" class="headerlink" title="返回值（数组）"></a>返回值（数组）</h4><ul><li>如果正则表达式包含一个 <code>g</code> 标记，即为全局匹配，它将返回一个包含所有匹配项的数组；</li><li>如果正则表达式没有 <code>g</code> 标记，它将返回一个包含第一个匹配项的数组；</li><li>没有匹配项，返回<code>null</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//匹配模式为  g  全局匹配模式</span><span class="token keyword">var</span> strText <span class="token operator">=</span> <span class="token string">"Hello China"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/[A-Z]/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 大写字母正则表达式</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strText<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 'H', 'C' ]</span><span class="token comment" spellcheck="true">//匹配模式为默认</span><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/[A-Z]/</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 'H', index: 0, input: 'Hello World', groups: undefined ]</span></code></pre><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><blockquote><p>是一个字符串方法，可以将其与正则表达式一起使用。可以将正则表达式作为参数传递给它，以在字符串中搜索匹配项。</p></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>方法返回第一个匹配项在整个字符串中的位置（<code>索引</code>），如果没有匹配项，则返回 <code>-1</code>。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> strText <span class="token operator">=</span> <span class="token string">"hello china，i love china"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/china/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strText<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><blockquote><p>在字符串中搜索指定的值 或 符合正则表达式的值   将其替换为另一个值</p><p>两个参数：</p><ol><li>要搜索的值</li><li>要替换的新值</li></ol></blockquote><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><ul><li>返回一个包含被替换后的<code>新字符串</code>，<strong>需要注意的是，它不会改变原始字符串，并且只会替换搜索到的第一个值</strong>。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> strText <span class="token operator">=</span> <span class="token string">"hello world,i love world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/world/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello china,i love world</span></code></pre><blockquote><p>若被替换的参数值为正则表达式并且为全局模式，则可以将所有 匹配的字符串，替换为新的值</p></blockquote><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><blockquote><p>根据符号或正则表达式对字符串进行分割</p><p>参数：</p><ol><li>必须:字符串或正则表达式</li><li>可选，设置返回数组的最大长度</li></ol></blockquote><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><ul><li>返回一个数组</li></ul><pre class=" language-js"><code class="language-js">字符串<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>例子：提取字符串中的所有数据<span class="token keyword">var</span> str  <span class="token operator">=</span><span class="token string">"张三#李四@#王五--赵六@#%田七"</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/[\#@\-\%]+/</span><span class="token punctuation">;</span> 需要进行转义str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["张三", "李四", "王五", "赵六", "田七"]</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正则表达式基础&quot;&gt;&lt;a href=&quot;#正则表达式基础&quot; class=&quot;headerlink&quot; title=&quot;正则表达式基础&quot;&gt;&lt;/a&gt;正则表达式基础&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript正则表达式" scheme="https://codehan045.github.io/tags/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript组成之DOM节点操作</title>
    <link href="https://codehan045.github.io/posts/f48f37b0.html"/>
    <id>https://codehan045.github.io/posts/f48f37b0.html</id>
    <published>2021-08-23T05:09:47.000Z</published>
    <updated>2021-08-25T08:23:41.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h2><ul><li>网页中所有内容都是节点（标签、属性、文本、注释等），在<code>DOM</code>中节点使用<code>node</code>来表示</li><li><code>HTML DOM</code> 树中的所有节点均可通过 JavaScript 进行访问，所有 <code>HTML 元素（节点）</code>均可被修改，也可以创建或删除。</li></ul><p> <img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210824114250.jfif" alt="DOM节点"> </p><p>一般的，节点至少拥有<code>ndeType</code>(节点类型)，<code>nodeName</code>(节点名称)和<code>nodeValue</code>(节点值)三个基本属性</p><ul><li>元素节点：<code>nodeType 为1</code></li><li>属性节点：<code>nodeType 为2</code></li><li>文本节点：<code>nodeType 为3</code>(文本节点包括文字、空格、换行等)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210825155808.png" alt="node"></p><h2 id="节点层级-amp-节点获取"><a href="#节点层级-amp-节点获取" class="headerlink" title="节点层级&amp;节点获取"></a>节点层级&amp;节点获取</h2><table><thead><tr><th><strong>利用DOM提供的方法获取元素</strong></th><th><strong>利用节点层级关系获取元素</strong></th></tr></thead><tbody><tr><td><code>document.getElementById()</code></td><td>利用父子兄节点关系获取元素</td></tr><tr><td><code>document.querySelector()</code></td><td>逻辑性强，但兼容性较差</td></tr><tr><td><code>document.querySelectorAll()</code></td><td></td></tr><tr><td>逻辑性不强繁琐</td><td></td></tr></tbody></table><h3 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h3><h4 id="parentNode"><a href="#parentNode" class="headerlink" title="parentNode"></a><code>parentNode</code></h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span>parentNode<span class="token comment" spellcheck="true">//例子</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"son"</span><span class="token operator">></span>×<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出的是类名为box的div</span></code></pre><ul><li><code>parentNode</code>属性可以返回某节点的父结点，**<code>注意是最近的一个父结点</code>**</li><li>指定的节点没有父结点则返回null</li></ul><h4 id="parentElement"><a href="#parentElement" class="headerlink" title="parentElement"></a><code>parentElement</code></h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子；获取id为box的父标签</span><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parentElement</code></pre><ul><li>此方法与上面的方法效果是一样的</li></ul><h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><h4 id="children"><a href="#children" class="headerlink" title="children"></a><code>children</code></h4><pre class=" language-js"><code class="language-js">parentNode<span class="token punctuation">.</span>children</code></pre><ul><li><code>parentNode.children</code> 是一个只读属性，返回所有的子元素节点</li><li><strong>它只返回<code>直接子元素节点</code>，其余节点不返回</strong> </li></ul><h4 id="第一个子节点"><a href="#第一个子节点" class="headerlink" title="第一个子节点"></a>第一个子节点</h4><pre class=" language-js"><code class="language-js">parentNode<span class="token punctuation">.</span>firstElementChild</code></pre><ul><li><code>firstElementChild</code> 返回第一个子节点，找不到则返回<code>null</code>,有兼容性问题，<code>IE9</code>以上才支持</li></ul><h4 id="最后一个子节点"><a href="#最后一个子节点" class="headerlink" title="最后一个子节点"></a>最后一个子节点</h4><pre class=" language-js"><code class="language-js">parentNode<span class="token punctuation">.</span>firstElementChild</code></pre><ul><li><code>firstElementChild</code> 返回第一个子节点，找不到则返回<code>null</code>,有兼容性问题，<code>IE9</code>以上才支持</li></ul><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><h4 id="上一个兄弟节点"><a href="#上一个兄弟节点" class="headerlink" title="上一个兄弟节点"></a>上一个兄弟节点</h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span>previousElementSibling<span class="token comment" spellcheck="true">//只返回一个</span></code></pre><ul><li><code>previousElementSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回<code>null</code>,有兼容性问题，<code>IE9</code>以上才支持</li></ul><h4 id="下一个兄弟节点"><a href="#下一个兄弟节点" class="headerlink" title="下一个兄弟节点"></a>下一个兄弟节点</h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span>nextElementSibling</code></pre><ul><li><code>nextElementSibling</code> 返回当前元素下一个兄弟元素节点，找不到则返回<code>null</code>,有兼容性问题，<code>IE9</code>以上才支持</li></ul><h2 id="节点创建-amp-添加删除"><a href="#节点创建-amp-添加删除" class="headerlink" title="节点创建&amp;添加删除"></a>节点创建&amp;添加删除</h2><h4 id="createElement-39-tagName-39"><a href="#createElement-39-tagName-39" class="headerlink" title="createElement('tagName')"></a><code>createElement('tagName')</code></h4><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tagName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>document.createElement()</code> 方法创建由 <code>tagName</code> 指定的HTML 元素</li><li>因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为<strong>动态创建元素节点</strong></li></ul><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//例子：给id为box的标签添加一个新的p标签</span><span class="token comment" spellcheck="true">//1. 新建标签</span><span class="token keyword">var</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 放在父标签里面</span><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newP<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>node.appendChild()</code> 方法将一个节点添加到指定父节点的子节点列表<strong>末尾</strong>。</li><li>将新标签作为父标签的最后一个自标签。父标签必须是已存在页面上的标签。</li></ul><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span>指定元素<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//html: </span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'box'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"firstP"</span><span class="token operator">></span>哈哈哈‘<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//例子：在id为box的标签的第一个p标签之前插入一个新的p标签</span><span class="token comment" spellcheck="true">//1. 新建p标签</span><span class="token keyword">var</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 找到父标签以及其兄弟标签</span><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> brother <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#firstP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 插入新标签</span>father<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newP<span class="token punctuation">,</span>brother<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>node.insertBefore()</code> 方法将一个节点添加到父节点的指定子节点<strong>前面</strong>。</li></ul><h4 id="示例：向页面添加新的元素"><a href="#示例：向页面添加新的元素" class="headerlink" title="示例：向页面添加新的元素"></a>示例：向页面添加新的元素</h4><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1. 创建节点元素节点</span>        <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  </span>        <span class="token comment" spellcheck="true">// 先获取父亲ul</span>        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 添加节点 node.insertBefore(child, 指定元素);</span>        <span class="token keyword">var</span> newli <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newli<span class="token punctuation">,</span> ul<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 我们想要页面添加一个新的元素分两步: 1. 创建元素 2.修改属性内容 3. 添加元素</span></code></pre><blockquote><p>若所添加的节点页面中不存在，则直接添加到页面中</p><p>若所添加的节点在页面中已存在，则会变换该节点在页面中的位置</p></blockquote><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//例子：删除id为box的标签下第一个子标签</span><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box :first-child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>node.removeChild()</code>方法从 DOM 中删除一个子节点，返回删除的节点</li></ul><h5 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h5><ul><li><p>先找到需要删除的标签，通过遍历依次调用<code>removeChild</code>来进行删除</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例子：删除所有的图片</span><span class="token keyword">var</span> imgs  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历，删除每一个图片</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>如果是删除某个标签下的所有子标签，可以通过设置<code>innerHTML</code>来达到快捷删除的目的</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例子：删除id为box的标签下的所有子标签</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="复制节点-克隆节点"><a href="#复制节点-克隆节点" class="headerlink" title="复制节点(克隆节点)"></a>复制节点(克隆节点)</h4><pre class=" language-js"><code class="language-js">node<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><code>node.cloneNode()</code>方法返回调用该方法的节点的一个副本。 也称为克隆节点/拷贝节点</li><li>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点</li><li>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</li></ul><blockquote><p> <em>1. <code>node.cloneNode()</code>; 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</em>        * 2.<code> node.cloneNode(true)</code>; 括号为true 深拷贝 复制标签&amp;复制里面的内容*</p></blockquote><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>三种动态创建元素的区别</p><ul><li><code>doucument.write()</code></li><li><code>element.innerHTML</code></li><li><code>document.createElement()</code></li></ul><p>区别：</p><ul><li><p><code>document.write()</code> 是直接将内容写入页面的内容流，但是文档流执行完毕，它会导致页面全部重绘</p></li><li><p><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘</p></li><li><p><code>innerHTML</code> 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 2.2 innerHTML 用数组形式拼接</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="#">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        inner<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>createElement()</code>创建多个元素效率稍低一点点，但是结构更清晰</p></li></ul><blockquote><p>总结：不同浏览器下，<code>innerHTML</code>效率要比<code>createElement()</code>高</p></blockquote><h2 id="DOM核心总结"><a href="#DOM核心总结" class="headerlink" title="DOM核心总结"></a>DOM核心总结</h2><p>对于DOM操作，我们主要针对子元素的操作，主要有</p><ul><li>创建</li><li>增</li><li>删</li><li>查</li><li>改</li><li>属性操作</li><li>时间操作</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul><li><p><code>document.write()</code></p></li><li><p><code>innerHTML</code></p></li><li><p><code>createElement()</code></p></li></ul><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ul><li><p><code>appendChild()</code></p></li><li><p><code>insertBefore( new, child)</code></p></li></ul><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ul><li><code>removeChild()</code></li></ul><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ul><li>主要修改<code>dom</code>的元素属性，<code>dom</code>元素的内容、属性、表单的值等</li><li>修改元素属性：<code>src</code>、<code>href</code>、<code>title</code> 等</li><li>修改普通元素内容：<code>innerHTML</code>、<code>innerText</code></li><li>修改表单元素：<code>value</code>、<code>type</code>、<code>disabled</code></li><li>修改元素样式：<code>style</code>、<code>className</code></li></ul><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><ul><li>主要获取查询DOM的元素</li><li><code>DOM</code>提供的<code>API</code>方法：<code>getElementById()</code>、<code>getElementsByTagName()</code> (古老用法，不推荐)</li><li><code>H5</code>提供的新方法：<code>querySelector()</code>、<code>querySelectorAll()</code> </li><li>利用节点属性操作获取元素：父(<code>parentNode</code>)、子(<code>children</code>)、兄(<code>previousElementSibling</code>、<code>nextElementSibling</code>) 提倡</li></ul><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><ul><li>针对于自定义和自身属性</li><li><code>setAttribute</code>：设置DOM的属性值</li><li><code>getAttribute</code>：得到DOM的属性值</li><li><code>getComputedStyle(标签变量名,null)</code>获取该标签的所有css属性</li><li><code>removeAttribute</code>：移除属性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;节点概述&quot;&gt;&lt;a href=&quot;#节点概述&quot; class=&quot;headerlink&quot; title=&quot;节点概述&quot;&gt;&lt;/a&gt;节点概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;网页中所有内容都是节点（标签、属性、文本、注释等），在&lt;code&gt;DOM&lt;/code&gt;中节点使用&lt;code&gt;no</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://codehan045.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript组成之DOM及操作</title>
    <link href="https://codehan045.github.io/posts/a1ca87a4.html"/>
    <id>https://codehan045.github.io/posts/a1ca87a4.html</id>
    <published>2021-08-22T13:06:11.000Z</published>
    <updated>2021-08-29T03:27:51.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript组成之DOM及操作"><a href="#JavaScript组成之DOM及操作" class="headerlink" title="JavaScript组成之DOM及操作"></a>JavaScript组成之DOM及操作</h1><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><ul><li>文档对象模型(<code>Document Object Model,简称DOM</code>)是W3C组织推荐的处理可扩展标记语言（HTML或XML)的标准编程接口，比如对HTML标签浮动增删查改、修改css等。</li><li>JavaScript中是将所有对于HTML标签的操作相关api整合成了<code>document</code>对象。</li></ul><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210822212229.png" alt="dom"></p><ul><li>文档：一个页面就是一个文档，<code>DOM</code>中使用<code>document</code>来表示</li><li>元素：页面中的所有标签都是元素，<code>DOM</code>中使用<code>element</code>表示</li><li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），<code>DOM</code>中使用<code>node</code>来表示</li></ul><blockquote><p>DOM将以上内容都看作是<strong>对象</strong></p></blockquote><h2 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h2><h3 id="根据标签ID属性获取"><a href="#根据标签ID属性获取" class="headerlink" title="根据标签ID属性获取"></a>根据标签ID属性获取</h3><ul><li><p>使用<code>getElementById("id属性值")</code>获取标签id为此属性值的标签</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span><span class="token keyword">var</span> 标签变量名<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id属性值"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//此处不需要写#</span></code></pre></li></ul><h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><ul><li><p>使用<code>getElementsByTagName()</code> 可以返回带有指定标签名的对象集合</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"标签名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取的是一个实时的集合对象,可以通过下标来查找和遍历</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>等你好久<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>知否知否<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1.返回的是获取过来元素对象的集合 以伪数组的形式存储</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.依次打印,遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>得到的对象是动态的，随着页面中标签的个数改变而改变</p><p>返回的是获取到的元素对象的集合，以伪数组的形式存储</p><p>若获取不到元素，则返回为空的伪数组</p></blockquote></li></ul><h4 id="根据某个标签名下所有指定标签名的子元素"><a href="#根据某个标签名下所有指定标签名的子元素" class="headerlink" title="根据某个标签名下所有指定标签名的子元素"></a>根据某个标签名下所有指定标签名的子元素</h4><ul><li><p>通过标签名获取某个元素(父元素)内部所有指定标签名的子元素，获取的时候不包含父元素自身</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>element<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//例：</span>ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>父元素必须是单个对象（必须指明是哪一个元素对象）</p></blockquote></li></ul><h3 id="通过H5新增方法获取"><a href="#通过H5新增方法获取" class="headerlink" title="通过H5新增方法获取"></a>通过H5新增方法获取</h3><h4 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h4><ul><li><p>根据类名返回元素对象集合</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li></ul><h3 id="document-querySelector"><a href="#document-querySelector" class="headerlink" title="document.querySelector"></a>document.querySelector</h3><ul><li><p>根据指定的选择器返回第一个元素对象(标签)</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 切记里面的选择器需要加符号 </span><span class="token comment" spellcheck="true">// 类选择器.box </span><span class="token comment" spellcheck="true">// id选择器 #nav</span><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="document-querySelectorAll"><a href="#document-querySelectorAll" class="headerlink" title="document.querySelectorAll"></a>document.querySelectorAll</h3><ul><li><p>根据指定选择器返回所有符合css选择器要求的元素对象(标签)</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>querySelectorAll</code>返回一个<code>NodeList类数组对象</code>。是一个非实时的。可以通过下标来操作</p></blockquote></li></ul><h3 id="直接获取特殊元素"><a href="#直接获取特殊元素" class="headerlink" title="直接获取特殊元素"></a>直接获取特殊元素</h3><ul><li><strong><code>document.body</code></strong>:快速获取当前页面的<code>&lt;body&gt;</code>标签</li><li><strong><code>document.documentElement</code></strong>:快速获得当前页面的<code>&lt;html&gt;</code>标签</li><li><code>document.title</code>:快速获得当前页面的标题文本</li><li><code>document.URL</code>:获取当前页面的地址</li><li><code>document.write()</code>:向页面中写入内容或标签</li></ul><h2 id="操作元素-页面标签"><a href="#操作元素-页面标签" class="headerlink" title="操作元素(页面标签)"></a>操作元素(页面标签)</h2><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。</p><h3 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h3><h4 id="针对双标签"><a href="#针对双标签" class="headerlink" title="针对双标签"></a>针对双标签</h4><h5 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h5><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取</span>标签变量名<span class="token punctuation">.</span>innerHTML<span class="token comment" spellcheck="true">//修改</span>标签变量名<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>新数据<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：修改id为box的标签的内容为一个src为img/id1.jpg的img标签</span><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>innerHTML  <span class="token operator">=</span><span class="token string">"&lt;img src='img/id1.jpg'>"</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h5><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取</span>标签变量名<span class="token punctuation">.</span>innerText<span class="token comment" spellcheck="true">// 修改</span>标签变量名<span class="token punctuation">.</span>innerText <span class="token operator">=</span>新数据<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：修改id为box的标签的内容为一个src为img/id1.jpg的img标签</span><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>innerText  <span class="token operator">=</span><span class="token string">"&lt;img src='img/id1.jpg'>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//会在页面上显示纯文本</span></code></pre></li></ul><h4 id="针对表单标签-value"><a href="#针对表单标签-value" class="headerlink" title="针对表单标签 value"></a>针对表单标签 value</h4><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取</span>标签变量名<span class="token punctuation">.</span>value<span class="token comment" spellcheck="true">// 修改</span>标签变量名<span class="token punctuation">.</span>value <span class="token operator">=</span>新数据<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：修改id为myinput的内容为123 </span><span class="token keyword">var</span> input <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"myinput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>innerHTML和innerText的区别</p><ol><li>innerHTML 、innerText 是针对<code>双标签</code>.value针对<code>input、select、textarea</code>以及其他带有<code>value</code>属性的标签</li><li><code>innerHTML</code>获取标签内部的所有代码，包括子标签。而<code>innerText</code>获取的是该标签内部的所有文本(包括子标签的)</li><li><code>innerHTML</code>设置会将字符串作为HTML标签来执行。而<code>innerText</code>会直接当做文本进行处理。</li></ol></blockquote><h3 id="改变元素属性"><a href="#改变元素属性" class="headerlink" title="改变元素属性"></a>改变元素属性</h3><h4 id="获取元素属性"><a href="#获取元素属性" class="headerlink" title="获取元素属性"></a>获取元素属性</h4><ul><li><p>获取自定义属性值</p><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>上面这种方式也可以获得元素本身自带的属性(标准)</p></blockquote></li><li><p>获取内置属性值(元素本身自带的属性)</p><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>属性名<span class="token punctuation">;</span></code></pre></li></ul><h4 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h4><ul><li><p>设置内置属性值（旧版）</p><pre class=" language-js"><code class="language-js">标签变量名<span class="token punctuation">.</span>属性名 <span class="token operator">=</span> <span class="token string">'属性值'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// img.属性</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/001.png"</span><span class="token punctuation">;</span></code></pre></li><li><p>设置自定义或内置属性值</p><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：将id为box的标签它的class属性设置为item</span><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h4><pre class=" language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="改变CSS样式属性"><a href="#改变CSS样式属性" class="headerlink" title="改变CSS样式属性"></a>改变CSS样式属性</h3><p>可以通过 JS 修改元素的大小、颜色、位置等样式</p><h4 id="获取样式属性值"><a href="#获取样式属性值" class="headerlink" title="获取样式属性值"></a>获取样式属性值</h4><ul><li><p>通过调用<code>window.getComputedStyle()</code>来获取该标签的所有的css属性。</p></li><li><p> 通过css属性名找到指定css属性的取值</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例子： 获取id为box的标签的宽度和高度</span><span class="token keyword">var</span> box <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> style <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> width <span class="token operator">=</span> style<span class="token punctuation">.</span>width<span class="token punctuation">;</span><span class="token keyword">var</span> h <span class="token operator">=</span> style<span class="token punctuation">.</span>height<span class="token punctuation">;</span></code></pre><h4 id="设置CSS样式"><a href="#设置CSS样式" class="headerlink" title="设置CSS样式"></a>设置CSS样式</h4><ul><li><p>行内样式操作</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// element.style</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'250px'</span><span class="token punctuation">;</span></code></pre></li><li><p>类名样式操作：通过提前编写指定类名的css样式，再修改类名来设置样式</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>css样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">element<span class="token punctuation">.</span>className<span class="token comment" spellcheck="true">//我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span>div<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'change'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果想要保留原先的类名，我们可以这么做 多类名选择器</span> div<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'row  change'</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><blockquote><ol><li>JS里面的样式采取驼峰命名法，比如 <code>fontSize</code> ，<code>backgroundColor</code>通俗来讲就是在css样式中由两个单词用<code>-</code>连接的，将<code>-</code>去掉之后，它后面的的单词首字母大写</li><li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class 因为是个保留字，因此使用<code>className</code>来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol></blockquote><h2 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h2><p>如果有同一组元素，我们相要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 1. 获取所有按钮元素</span>        <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// btns得到的是伪数组  里面的每一个元素 btns[i]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们称为排他思想</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="如何实现JavaScript中的-动画"><a href="#如何实现JavaScript中的-动画" class="headerlink" title="如何实现JavaScript中的 动画"></a>如何实现JavaScript中的 动画</h2><ul><li>利用间隔定时器不断的改变标签的位置css属性.让其不断的改变，在页面上就会不断的缓慢移动。</li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//修改标签的margin-top(在原来的基础之上进行修改)   </span>    <span class="token comment" spellcheck="true">//获取旧的 margin-top   </span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> style <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> oldtop <span class="token operator">=</span> style<span class="token punctuation">.</span>marginTop<span class="token punctuation">;</span>        oldtop <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>oldtop<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'px'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//设置新的margin-top   </span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>oldtop<span class="token operator">+</span><span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">16.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>如何解决定时器的”加速”效果<ul><li>定义一个开关变量，当为true时可以执行定时器，执行后将开关变量变为false。当停止定时器后再将开关变量设为true，又可以继续执行</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript组成之DOM及操作&quot;&gt;&lt;a href=&quot;#JavaScript组成之DOM及操作&quot; class=&quot;headerlink&quot; title=&quot;JavaScript组成之DOM及操作&quot;&gt;&lt;/a&gt;JavaScript组成之DOM及操作&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://codehan045.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript组成之BOM</title>
    <link href="https://codehan045.github.io/posts/73cc49c3.html"/>
    <id>https://codehan045.github.io/posts/73cc49c3.html</id>
    <published>2021-08-20T15:03:55.000Z</published>
    <updated>2021-08-22T16:00:54.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript组成之BOM"><a href="#JavaScript组成之BOM" class="headerlink" title="JavaScript组成之BOM"></a>JavaScript组成之BOM</h1><h2 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><code>BOM(Browser Object Model - 浏览器对象模型)</code>– 指的是在JavaScript中会将一个页面抽象成一个对象来进行操作</li><li>JavaScript内置了很多API来对页面本身进行操作—比如：新建或关闭网页、前进、后退、刷新修改页面地址等。</li><li>JavaScript BOM负责了 程序和页面本身之间的交互。开发人员通过JavaScript提供的api来进行操作</li><li>BOM将页面抽象为了一个对象即<code>window</code>对象(每个页面的专属对象,每个页面只有一个)，是BOM的核心内容。</li></ul><h3 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210822150341.png" alt="window"></p><ul><li><p><code>BOM</code> 包含 <code>DOM</code>。</p></li><li><p><code>window</code> 对象是浏览器的顶级对象，它具有双重角色</p></li><li><p>它是 JS 访问浏览器窗口的一个接口</p></li><li><p>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 <code>window </code>对象的属性和方法</p></li><li><p>在调用的时候可以省略 window，前面学习的对话框都属于 <code>window</code> 对象方法，如 <code>alert()</code>、<code>prompt()</code>等。</p></li></ul><h3 id="window对象相关api-方法"><a href="#window对象相关api-方法" class="headerlink" title="window对象相关api(方法)"></a>window对象相关api(方法)</h3><ul><li><p><code>window.confirm()</code>: 显示一个具有一个可选消息和两个按钮(确定和取消)的模态对话框,会返回一个布尔类型值</p></li><li><p><code>window.close()</code>: 用于关闭当前页面</p></li><li><p><code>window.open()</code>: 创建一个新的浏览器窗口对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"页面地址"</span><span class="token punctuation">,</span><span class="token string">"_self/_blank"</span><span class="token punctuation">,</span><span class="token string">"页面尺寸和位置"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//注：_self是在当前页面打开新标签页    _blank是创建一个新的标签页</span><span class="token comment" spellcheck="true">//例</span>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'_blank'</span><span class="token punctuation">,</span><span class="token string">'width=500,height=500,left=300,top=100'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注：后面设置的页面尺寸和位置不需要带单位</span></code></pre></li><li><p><code>window.innerWidth</code>&amp;<code>window.innerHeight</code>返回以像素为单位的窗口（首屏）的内部宽度和内部高度</p><pre class=" language-js"><code class="language-js"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerWidth<span class="token punctuation">,</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>在使用window对象相关api时，可以省略<code>window.</code>前缀</p><ol><li>所有全局变量都是window的属性</li><li>所有全局的函数都是window的方法</li></ol></blockquote><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具有相同的效果</span></code></pre><h2 id="window的内置对象"><a href="#window的内置对象" class="headerlink" title="window的内置对象"></a>window的内置对象</h2><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul><li><p><code>location</code>代表当前浏览器的地址栏信息<code>url</code>，通过Location可以获取地址栏信息，或者操作浏览器跳转页面</p></li><li><p>直接输出<code>location</code>，则可以获取到地址栏的信息（当前页面的完整路径）</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//http://127.0.0.1:5501/day17/source/day17/03.Location.html</span></code></pre></li></ul><h4 id="扩展url"><a href="#扩展url" class="headerlink" title="扩展url"></a>扩展url</h4><ul><li><p>概念：<code>url</code>(<code>uniform resouce locator</code>)统一资源定位符，是互联网上标准资源的地址。互联网上的每一个文件都有一个唯一的<code>URL</code>。</p></li><li><p>一般语法格式</p><pre class=" language-js"><code class="language-js">protovol<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>host<span class="token punctuation">[</span><span class="token punctuation">:</span>port<span class="token punctuation">]</span><span class="token operator">/</span>path<span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">?</span>query<span class="token punctuation">]</span>#fragmenthttp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token operator">?</span>name<span class="token operator">=</span>andy<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">18</span>#link</code></pre><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议 常用的http,https等</td></tr><tr><td>host</td><td>主机(域名) <a href="http://www.baidu.com/">www.baidu.com</a>    本机 <code>localhost</code>/<code>127.0.0.1</code></td></tr><tr><td>port</td><td>端口号，可选</td></tr><tr><td>path</td><td>路径 由零或多个’/‘符号隔开的字符串</td></tr><tr><td>query</td><td>参数 以键值对的形式，通过&amp;符分隔开来</td></tr><tr><td>fragment</td><td>片段 #后面内容 常见于链接 锚点</td></tr></tbody></table></li></ul><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><ul><li><p>若直接将<code>location</code>属性修改为一个完整的路径，或相对路径，则我们页面会自动跳转到该路径，并产生相应的历史记录；</p><pre class=" language-js"><code class="language-js">location<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span></code></pre></li><li><p><code>href</code> 获取或设置整个<code>URL</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"新地址"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转到新页面，保存历史记录</span></code></pre></li><li><p><code>assign()</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"新地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳转到新页面，保存历史记录</span></code></pre></li></ul><blockquote><p>以上三种方式功能上没有任何区别，</p></blockquote><ul><li><p><code>replace()</code>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面,不会生成历史记录，不能使用回退按钮回退</p></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"新地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p><code>replace()</code>与其他方式的区别在于，在跳转页面后，没有回退的历史记录，不能回退到之前的页面</p></blockquote><h4 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h4><ul><li><p><code>reload()</code>用于重新加载当前页面，作用和刷新按钮一样</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果在方法中传递一个`true`作为参数，则会强制清空缓存刷新页面  ctrl+f5</span></code></pre></li></ul><h4 id="在页面之间传递数据"><a href="#在页面之间传递数据" class="headerlink" title="在页面之间传递数据"></a>在页面之间传递数据</h4><ul><li><p><code>search</code>属性  返回参数</p></li><li><p>概述</p><ul><li>当提交表单，浏览器会把表单里写的数据通过<code>location.search</code>传递到提交的页面。在提交的页面上通过<code>location.search</code>获得对应的数据，利用字符串api解析其中的数据</li></ul></li><li><p>示例</p><p>书写登录框，点击登录跳转到<code>index.html</code></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"index.html"</span><span class="token operator">></span>        用户名： <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"登录"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><p>在<code>index.html</code>获取登录参数</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 获取URl中的参数</span><span class="token keyword">var</span> data<span class="token operator">=</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//?user=admin&amp;pass=123</span><span class="token comment" spellcheck="true">// 利用字符串api截取？之后的数据</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取用户名</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"user="</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取密码</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"pass="</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转换为字符串数组</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["admin","123"]</span></code></pre></li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录</li><li>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页 ,而且该操作只在当次访问时有效</li><li>该对象包含用户（在浏览器窗口中）访问过的 <code>URL</code></li></ul><h4 id="相关属性方法"><a href="#相关属性方法" class="headerlink" title="相关属性方法"></a>相关属性方法</h4><ul><li><code>go()</code>根据传入的数字来决定是前进还是后退指定的步数</li><li><code>forward()</code>前进一步</li><li><code>back()</code>后退一步</li></ul><pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>前进<span class="token number">2</span>步history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>后退一步history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>前进一步history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>后退一步</code></pre><blockquote><p>以上是根据页面保存的页面历史，来前进后退。</p></blockquote><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ul><li>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><p><code>userAgent</code>:返回浏览器的版本信息</p></li><li><p><code>userAgent</code>是一个字符串，这个字符串中包含有用来描述浏览器信息的内容</p></li><li><p>不同的浏览器会有不同的<code>userAgent</code>可以配合正则表达式以及字符串api来实现浏览器版本检测功能</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//火狐的userAgent</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> rv<span class="token punctuation">:</span><span class="token number">50.0</span><span class="token punctuation">)</span> Gecko<span class="token operator">/</span><span class="token number">20100101</span> Firefox<span class="token operator">/</span><span class="token number">50.0</span><span class="token comment" spellcheck="true">//Chrome的userAgent</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">52.0</span><span class="token punctuation">.</span><span class="token number">2743.82</span> Safari<span class="token operator">/</span><span class="token number">537.36</span><span class="token comment" spellcheck="true">//IE11</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> Trident<span class="token operator">/</span><span class="token number">7.0</span><span class="token punctuation">;</span> SLCC2<span class="token punctuation">;</span> <span class="token punctuation">.</span>NET CLR <span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">50727</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>NET CLR <span class="token number">3.5</span><span class="token punctuation">.</span><span class="token number">30729</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>NET CLR <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">30729</span><span class="token punctuation">;</span> Media Center PC <span class="token number">6.0</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>NET4<span class="token punctuation">.</span>0C<span class="token punctuation">;</span> <span class="token punctuation">.</span>NET4<span class="token punctuation">.</span>0E<span class="token punctuation">;</span> rv<span class="token punctuation">:</span><span class="token number">11.0</span><span class="token punctuation">)</span> like Gecko<span class="token comment" spellcheck="true">// 在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了</span><span class="token comment" spellcheck="true">//如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息</span> 比如：ActiveXObject</code></pre></li></ul><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><ul><li><p>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</p></li><li><p>因为兼容性问题。实用性不强</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>screen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="document会在DOM中——请移步到DOM查看"><a href="#document会在DOM中——请移步到DOM查看" class="headerlink" title="document会在DOM中——请移步到DOM查看"></a>document会在DOM中——请移步到DOM查看</h3><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><ul><li>定时器是指JavaScript提供了相应的api能够实现一段时间之后执行代码。类似于生活中的 延时自拍或定时闹钟，会在指定时间之后才会执行</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>延时定时器：在一段时间之后执行一次指定代码</li><li>间隔定时器：每隔一段时间之后就执行一次指定的代码</li></ul><h4 id="延时定时器-setTimeout"><a href="#延时定时器-setTimeout" class="headerlink" title="延时定时器 setTimeout()"></a>延时定时器 setTimeout()</h4><ul><li><p><code>setTimeout(函数，[延时时间])</code> : 设置延时定时器  <code>回调函数 callback</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 定时器标识符 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>延时时间<span class="token punctuation">)</span><span class="token punctuation">;</span>例子：<span class="token number">5</span>秒后提示自拍<span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     所要执行的代码<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时时间以毫秒为单位  1秒 = 1000毫秒 默认为0</span><span class="token keyword">var</span> timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    执行代码；<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre></li><li><p><code>clearTimeout(定时器标识)</code>：停止(清除)延时定时器,取消了先前通过调用 <code>setTimeout()</code>建立的定时器</p><pre class=" language-js"><code class="language-js"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>定时器标识符<span class="token punctuation">)</span><span class="token punctuation">;</span>例子：<span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>普通函数是按照代码顺序直接调用，而这个函数，需要等待事件，事件到了才会去调用这个函数，因此称为<code>回调函数</code>。</p></blockquote></li></ul><h4 id="间隔定时器-setInterval"><a href="#间隔定时器-setInterval" class="headerlink" title="间隔定时器 setInterval()"></a>间隔定时器 setInterval()</h4><ul><li><p><code>setInterval(函数,[间隔时间])</code>：重复调用一个函数，每隔这个时间，就去调用一次回调函数</p><pre class=" language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行代码</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>间隔时间<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：每隔1秒输出一次当前时间</span><span class="token keyword">var</span> timer <span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//间隔时间以毫秒为单位  1秒 = 1000毫秒 默认为0</span></code></pre></li><li><p><code>clearInterval()</code> 方法取消了先前通过调用 <code>setInterval()</code> 建立的定时器</p><pre class=" language-js"><code class="language-js"><span class="token function">clearInterval</span><span class="token punctuation">(</span>定时器标识符<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>延时定时器和间隔定时器都会 ，返回一个Number类型的数据</p><p>这个数字用来作为定时器的唯一标识</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript组成之BOM&quot;&gt;&lt;a href=&quot;#JavaScript组成之BOM&quot; class=&quot;headerlink&quot; title=&quot;JavaScript组成之BOM&quot;&gt;&lt;/a&gt;JavaScript组成之BOM&lt;/h1&gt;&lt;h2 id=&quot;BOM概述&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数组、字符串、对象遍历方法集锦</title>
    <link href="https://codehan045.github.io/posts/8013204b.html"/>
    <id>https://codehan045.github.io/posts/8013204b.html</id>
    <published>2021-08-18T11:32:40.000Z</published>
    <updated>2021-08-20T01:12:36.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组、字符串、对象遍历方法"><a href="#数组、字符串、对象遍历方法" class="headerlink" title="数组、字符串、对象遍历方法"></a>数组、字符串、对象遍历方法</h1><h2 id="params"><a href="#params" class="headerlink" title="params"></a>params</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"asdadaawsadf"</span><span class="token punctuation">;</span><span class="token keyword">var</span> Params <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token string">'19'</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span></code></pre><h2 id="基础for循环"><a href="#基础for循环" class="headerlink" title="基础for循环"></a>基础for循环</h2><ul><li>传统方式</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//遍历Array</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历object</span><span class="token comment" spellcheck="true">//Object.length===undefined;</span><span class="token comment" spellcheck="true">//所以不能使用传统for循环遍历对象</span><span class="token comment" spellcheck="true">//遍历string</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="for…in循环"><a href="#for…in循环" class="headerlink" title="for…in循环"></a>for…in循环</h2><ul><li>为遍历数组而生</li><li>全能，可以遍历数组、对象、字符串</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> ArrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// i输出为index索引</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> ObjectParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ObjectParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// i输出为key</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> StringParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>StringParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// i输出为index索引</span><span class="token punctuation">}</span></code></pre><h2 id="for-of-循环-ES6引入"><a href="#for-of-循环-ES6引入" class="headerlink" title="for of 循环(ES6引入)"></a>for of 循环(ES6引入)</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> ArrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//输出数组中的每一个元素</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数组原生具备iterator接口（即默认部署了Symbol.iterator属性），for...of循环本质上就是调用这个接口产生的遍历器</span>ObjectParams<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> ArrayList<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> ObjectParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出结果与直接遍历ArrayList一样，Object默认是不具备Symbol.iterator属性的，因此无法对Object用for of进行遍历</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> StringParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><h2 id="forEach循环-数组特有，不可break"><a href="#forEach循环-数组特有，不可break" class="headerlink" title="forEach循环(数组特有，不可break)"></a>forEach循环(数组特有，不可break)</h2><ul><li><p><code>forEach()</code>这个方法只支持IE8以上的浏览器<br>IE8及以下的浏览器均不支持该方法，所以如果需要兼容IE8，则不要使用forEach<br>还是使用for循环来遍历</p></li><li><p><code> forEach()</code>方法需要一个函数作为参数</p><p>像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</p><p>数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素</p><p> 以实参的形式传递进来，我们可以来定义形参，来读取这些内容</p><ul><li><p>浏览器会在回调函数中传递三个参数：</p><ul><li><p>第一个参数，就是当前正在遍历的元素</p></li><li><p>第二个参数，就是当前正在遍历的元素的索引</p></li><li><p>第三个参数，就是正在遍历的数组</p></li></ul></li></ul></li></ul><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value <span class="token punctuation">,</span> index <span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个和第三个参数可选，value参数必须写</span></code></pre><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> ArrayList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 你会发现它并没有走进这个while循环，因为ObjectParams.length === undefined</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> ObjectParams<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ObjectParams<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  j<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> StringParams<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>StringParams<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>  k<span class="token operator">++</span><span class="token punctuation">}</span></code></pre><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> ArrayList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//其他与while循环一致</span></code></pre><h2 id="map-数组特有，不可break"><a href="#map-数组特有，不可break" class="headerlink" title="map(数组特有，不可break)"></a>map(数组特有，不可break)</h2><pre class=" language-js"><code class="language-js">ArrayList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>遍历数组用forEach、map（如果你不需要中断它），需要中断的话就选for…of吧<br>遍历字符串for..of, for…in<br>遍历对象for…in<br><code>while和do while的区别</code> while先判断条件，do while先执行一次再判断条件。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组、字符串、对象遍历方法&quot;&gt;&lt;a href=&quot;#数组、字符串、对象遍历方法&quot; class=&quot;headerlink&quot; title=&quot;数组、字符串、对象遍历方法&quot;&gt;&lt;/a&gt;数组、字符串、对象遍历方法&lt;/h1&gt;&lt;h2 id=&quot;params&quot;&gt;&lt;a href=&quot;#par</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="遍历集锦" scheme="https://codehan045.github.io/tags/%E9%81%8D%E5%8E%86%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>Javascript模板字符串</title>
    <link href="https://codehan045.github.io/posts/eb300c35.html"/>
    <id>https://codehan045.github.io/posts/eb300c35.html</id>
    <published>2021-08-17T02:56:54.000Z</published>
    <updated>2021-08-20T01:12:36.739Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="模板字符串-ES6"><a href="#模板字符串-ES6" class="headerlink" title="模板字符串(ES6)"></a>模板字符串(ES6)</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p>在之前我们使用JavaScript输出模板字符串(字符串拼接)，通常是下面这样：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"时光路人"</span>；<span class="token keyword">var</span> age<span class="token operator">=</span><span class="token string">"13"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"He is"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"and we wish to know his"</span><span class="token operator">+</span>age<span class="token punctuation">;</span></code></pre><ul><li>这样传统的做法需要使用大量的<code>""</code>(双引号/单引号)和<code>+</code>来拼接才能得到我们所需要的模板</li></ul></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><ul><li><p>在ES6中提供了模板字符串，用 ` (反引号)标识，用   ${}将变量括起来：上面的例子可以写成下面这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"时光路人"</span>；<span class="token keyword">var</span> age<span class="token operator">=</span><span class="token string">"13"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token template-string"><span class="token string">`He is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and we wish to know his </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span></code></pre></li><li><p>这种做法就简洁了很多，不需再使用大量的<code>“”/''</code>和<code>+</code>来拼接字符串和变量；</p></li><li><p>模版字符串可以引入变量，不使用变量也是可以的</p></li></ul><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><ul><li><p>在使用中如果需要在字符串中使用反引号，就需对其进行转义(原因：反引号是模板字符串的标识)，如下所示</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token template-string"><span class="token string">`NO problem\` what you do`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用 \ 将其转义</span></code></pre></li><li><p><strong>使用模板字符串表示多行字符串</strong>，<strong>所有的空格和缩进都会保存在输出中</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES5使用转义字符换行</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"do you do \n want"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`do you do      want`</span></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出结果相同</span></code></pre></li><li><p>在<code>${}</code>中的大括号里<strong>可以放入任意的JavaScript表达式，还可以进行运算</strong>，以及引用对象属性</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`x=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">++</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,y=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token operator">+</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>模版字符串还可以调用函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"zzw likes es6!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：zzw likes es6!</span></code></pre></li><li><p>如果函数的结果不是字符串，那么，将按照一般的规则转化为字符串</p></li><li><p>模板字符串可以进行嵌套</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;模板字符串-ES6&quot;&gt;&lt;a href=&quot;#模板字符串-ES6&quot; class=&quot;headerlink&quot; title=&quot;模板字符串(ES6)&quot;&gt;&lt;/a&gt;模板字符串(ES6)&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;h</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://codehan045.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域和预解析</title>
    <link href="https://codehan045.github.io/posts/ada78833.html"/>
    <id>https://codehan045.github.io/posts/ada78833.html</id>
    <published>2021-08-16T06:54:12.000Z</published>
    <updated>2021-08-20T01:12:36.736Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="JavaScript作用域和预解析"><a href="#JavaScript作用域和预解析" class="headerlink" title="JavaScript作用域和预解析"></a>JavaScript作用域和预解析</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>JavaScript作用域：<ul><li>官方解释：一段程序代码中所用到的名字并不总是有效和可用的，限定这个名字的<strong>可用性的代码范围</strong>，就是这个名字的作用域</li><li>就是这段代码或变量在某个范围内的作用和效果</li></ul></li><li>目的：提高程序逻辑的局部性，增强程序的可靠性，减少名字冲突。</li></ul><h3 id="作用域分类"><a href="#作用域分类" class="headerlink" title="作用域分类"></a>作用域分类</h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><blockquote><p>整个script标签，或是一个单独的js文件</p></blockquote><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><blockquote><p>（函数作用域)在函数内部就是局部作用域这个代码的名字只在函数内部起效果和作用</p></blockquote><h4 id="ES6新增块级作用域：-包含的区域"><a href="#ES6新增块级作用域：-包含的区域" class="headerlink" title="ES6新增块级作用域：{} 包含的区域"></a>ES6新增块级作用域：{} 包含的区域</h4><h3 id="变量作用域-根据作用域不同"><a href="#变量作用域-根据作用域不同" class="headerlink" title="变量作用域(根据作用域不同)"></a>变量作用域(根据作用域不同)</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><blockquote><p>在全局作用域下的变量，在任何位置都可使用</p></blockquote><p>注：<strong>在函数内部，没有声明直接赋值的变量也属于全局变量</strong></p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><blockquote><p>在局部作用域下的变量，在函数内部的变量</p></blockquote><p>注：<strong>函数的形参也可以看作局部变量</strong></p><h4 id="从执行效率来看全局变量和局部变量"><a href="#从执行效率来看全局变量和局部变量" class="headerlink" title="从执行效率来看全局变量和局部变量"></a>从执行效率来看全局变量和局部变量</h4><ol><li><p>全局变量只有在浏览器关闭时才会销毁，比较占内存</p></li><li><p>局部变量程序执行完毕就会销毁，比较节约内存资源</p></li></ol><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li>只要是代码，就至少有一个作用域</li><li>写在函数内部的局部作用域</li><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</li><li>内部函数可以访问外部函数的变量机制</li><li>用链式查找决定哪些数据能被内部函数访问，就称作作用域链（就近原则）</li></ul><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li>JavaScript代码是由浏览器中的JavaScript解析器来执行的。</li><li>JavaScript解析器在运行JavaScript代码的时候分为两步:<ul><li><code>预解析</code>和<code>代码执行</code>。</li></ul></li></ul><h3 id="预解析-1"><a href="#预解析-1" class="headerlink" title="预解析"></a>预解析</h3><ul><li>js引擎会把js里<code>所有的var</code> 还有<code>function</code>提升到<code>当前作用域</code>的<code>最前面</code></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>变量预解析(变量提升)<ul><li>把所有的变量声明提升到当前的作用域最前面，<code>不提升赋值操作</code></li></ul></li><li>函数预解析(函数提升)<ul><li>把所有的函数声明提升到当前作用域的最前面，<code>不调用函数</code></li></ul></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li><p>变量提升</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相当于</span><span class="token keyword">var</span> num<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre></li><li><p>函数提升</p><pre class=" language-js"><code class="language-js"> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错</span><span class="token comment" spellcheck="true">// 函数表达式定义函数</span><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 相当于执行以下代码</span><span class="token keyword">var</span> fun<span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fun <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>例题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> fun <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相当于执行</span><span class="token keyword">var</span> num <span class="token punctuation">;</span><span class="token keyword">function</span> fun <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>num <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;JavaScript作用域和预解析&quot;&gt;&lt;a href=&quot;#JavaScript作用域和预解析&quot; class=&quot;headerlink&quot; title=&quot;JavaScript作用域和预解析&quot;&gt;&lt;/a&gt;JavaScript作用域和预解析&lt;/h1&gt;&lt;h2 </summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组</title>
    <link href="https://codehan045.github.io/posts/bd63f59d.html"/>
    <id>https://codehan045.github.io/posts/bd63f59d.html</id>
    <published>2021-08-12T11:44:00.000Z</published>
    <updated>2021-09-02T16:23:39.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript数组"><a href="#JavaScript数组" class="headerlink" title="JavaScript数组"></a>JavaScript数组</h1><h2 id="JavaScript-数组概念"><a href="#JavaScript-数组概念" class="headerlink" title="JavaScript 数组概念"></a>JavaScript 数组概念</h2><ul><li><p>官方：数组是指一堆有序数据的集合。即数组能够处理多个数据，并保持一定的顺序。</p></li><li><p>数组是多个数据的”仓库”。一个数组可以保存并管理多个数据。数据的保存顺序是根据<code>下标</code>来决定的</p></li><li><p>数组也是一个对象</p><ul><li><p>它和我们普通对象功能类似，也是用来存储一些值的</p></li><li><p> 不同的是普通对象是使用字符串作为属性名的，而数组时使用数字来作为索引操作元素</p></li></ul></li></ul><h2 id="一维数组的定义和使用"><a href="#一维数组的定义和使用" class="headerlink" title="一维数组的定义和使用"></a>一维数组的定义和使用</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class=" language-js"><code class="language-js">方式一：<span class="token comment" spellcheck="true">//创建数组对象</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作为构造函数的参数传递</span><span class="token comment" spellcheck="true">//元素之间使用,隔开</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>方式二：<span class="token comment" spellcheck="true">//使用字面量来创建数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空数组</span><span class="token comment" spellcheck="true">//使用字面量创建数组时，可以在创建时就指定数组中的元素</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="索引下标"><a href="#索引下标" class="headerlink" title="索引下标"></a>索引下标</h3><ul><li>概念：本质是一个数字。每个数组中的数据都有一个下标。下标决定了该数据在数组中的 位置。同时我们也是利用下标来对数据进行后续的处理。</li><li>原理：<code>下标从0开始</code>。下标为0指的是第一个数据，即数组中从左往右的第一个。后续数据的下标依次递增1。第二个数据的下标为1，第三个数据的下标为2.第i个数据的下标为<code>i-1</code>。最后一个数据的下标为<code>length-1</code></li></ul><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><ul><li><p>概念：数组的长度指的数组中包含的数据个数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用length获取数组长度</span><span class="token comment" spellcheck="true">//语法： 数组变量名.length</span></code></pre></li><li><p>如果修改的<code>length</code>大于原长度，则多出部分会空出来</p></li><li><p>如果修改的<code>length</code>小于原长度，则多出的元素会被删除,在末尾删除</p></li><li><p>清空数组，将数组长度<code>length</code>置为0</p></li><li><p>添加数据</p><ul><li>向数组的最后一个位置添加元素</li><li>语法：<code>数组[数组.length] = 值;</code></li></ul></li></ul><h3 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h3><ul><li><p>示例数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p>获取指定下标的数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法 ：数组变量名[下标]</span><span class="token comment" spellcheck="true">//例如：获取下标为0的数据</span><span class="token keyword">var</span> s <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取不存在的下标</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> undefined</code></pre></li><li><p>修改指定下标的数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//数组变量名[下标]= 新数据;</span><span class="token comment" spellcheck="true">//例子：将下标为0的数据改为60</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span></code></pre></li><li><p>数组的遍历(获取数组中的每个数据)</p><ul><li>所谓的遍历数组，就是将数组中所有的元素都取出来</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一</span><span class="token comment" spellcheck="true">//for循环遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>数组长度；i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>数组名<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//例子： </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    scroes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="数组的应用"><a href="#数组的应用" class="headerlink" title="数组的应用"></a>数组的应用</h3><ul><li><p>获取数组中的最大值最小值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> max <span class="token operator">=</span> number<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> min <span class="token operator">=</span> number<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>数组的倒序存放</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：在原数组中进行操作</span><span class="token keyword">var</span> sort<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sort<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token operator">=</span>sort<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    sort<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sort<span class="token punctuation">[</span>sort<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    sort<span class="token punctuation">[</span>sort<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二：创建一个新数组，将原数组中的数据，倒序添加到新数组中</span></code></pre></li><li><p>多个数组合并</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个新数组，将所有的数组中的数据依次添加到新数组中</span></code></pre></li><li><p>冒泡排序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//从数组的第一个数开始，相邻之间相互比较，将比较中较大的数与较小的数交换位置，最终得到从小到大的排列；</span><span class="token keyword">var</span> tab<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3332</span><span class="token punctuation">,</span><span class="token number">434</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tab<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> tab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            tab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tab<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            tab<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>质数判断</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方式二</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="数组API"><a href="#数组API" class="headerlink" title="数组API"></a>数组API</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>应用编程接口(application programming interface)。指的编程语言<code>已经写好的代码</code>，开发人员<code>直接可以使用</code>，能够解决编程过程中遇到的常见的操作。</li><li>JavaScript针对数组提供了大量的api来简化对数组的常规操作。</li><li>每个api本质是一个内置函数。</li><li>已经用过的api：<code>Math.random</code>、<code>Number()</code>、<code>parseInt()</code>、<code>parseFloat()</code>等</li></ul><h3 id="数组相关API-ES3"><a href="#数组相关API-ES3" class="headerlink" title="数组相关API(ES3)"></a>数组相关API(ES3)</h3><ol><li><p><strong><code>push</code></strong>:追加</p></li><li><p><strong><code>pop</code></strong>:删除末尾数据</p></li><li><p><code>unshift</code>:开头添加</p></li><li><p><code>shift</code>:删除开头的数据</p></li><li><p><strong><code>join</code></strong>:拼接成字符串</p></li><li><p>**<code>splice</code>**：数组指定位置的插入和删除</p></li><li><p><code>slice</code>：获取数组的一部分</p></li><li><p>**<code>indexOf</code>**：获取数据第一次出现下标</p></li><li><p><code>lastIndexOf</code>：获取数据最后一次出现下标</p></li><li><p>**<code>sort</code>**：数组排序</p></li><li><p><code>reverse()</code>方法 颠倒数组元素顺序，改变原始数组，不会创建新数组。</p></li><li><p><code>includes() </code>用来判断一个数组是否包含一个指定的值</p></li><li><p><code>concat()</code>可以连接两个或多个数组，并将新的数组返回</p></li></ol><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><ul><li><p><strong><code>push()</code></strong>:向数组的末尾添加一个或多个元素，并返回数组的新的长度,改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token string">"小张"</span><span class="token punctuation">,</span>  <span class="token string">"小李"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["小明", "小张",  "小李","小王"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span></code></pre></li><li><p><strong><code>pop()</code></strong>:删除数组的最后一个元素,并将被删除的元素作为返回值返回,若是操作空数组，返回<code>undefined</code> 改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> pop_arr <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["one", "two", "three", "four"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pop_arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// five</span></code></pre></li><li><p><code>unshift()</code>:向数组开头添加一个或多个元素，并返回新的数组长度,向前边插入元素以后，其他的元素索引会依次调整 改变原数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> length <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["yellow", "red", "green", "blue"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span></code></pre></li><li><p><code>shift()</code>:删除数组的第一个元素，并将被删除的元素作为返回值返回</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> shift_arr <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2,3,4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shift_arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre></li><li><p><strong><code>join()</code></strong>:对数组元素以指定的分隔符进行分隔，参数为空，默认以“，”进行分隔。返回值是分隔后形成的字符串,原数组没有影响</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1,2,3,4,5"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1+2+3+4+5"</span><span class="token comment" spellcheck="true">//如果连接符为空字符串，则会无缝连接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为12345；</span></code></pre></li><li><p>**<code>splice()</code>**： 从数组中添加/删除元素，返回被删除项，注意：这个操作会改变原始数组。 参数有三个，一个是起始位置，第二个是删除的数量，第三个是要插入的项</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr9 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span><span class="token string">"banner"</span><span class="token punctuation">,</span><span class="token string">"orange"</span><span class="token punctuation">,</span><span class="token string">"pair"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> splices <span class="token operator">=</span> arr9<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["apple",,"orange","pair"]  他改变了原来的数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>splices<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["banner"]  返回了要删除的项</span><span class="token keyword">var</span> arr10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入任意的数量项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr10<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr10<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span class="token keyword">var</span> arr11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向指定位置插入任意数量的项，并删掉任意数量的项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr11<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr11<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, 7, 8, 4, 5, 6]</span></code></pre></li><li><p><code>slice()</code>：获取数组的一部分</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法：arrayObject.slice(start,end)</span><span class="token comment" spellcheck="true">//1.截取开始的位置的索引，包含开始索引</span><span class="token comment" spellcheck="true">//2.截取结束的位置的索引，不包含结束索引</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span><span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["one", "two", "three","four", "five"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["three"]</span></code></pre><blockquote><p>第二个参数可以省略不写，此时会截取从开始索引往后的所有元素</p></blockquote></li><li><p>**<code>indexOf()</code>**：获取数据第一次出现的下标,如果数组没有该数据，得到-1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> 变量名<span class="token operator">=</span> 数组变量名<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>某数据<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span></code></pre></li><li><p><code>lastIndexOf()</code>：获取数据最后一次出现的下标，如果数组没有该数据，得到-1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> 变量名<span class="token operator">=</span> 数组变量名<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>某数据<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nus<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span></code></pre><blockquote><ul><li>应用：判断数据是否重复出现在数组中</li><li><code>indexOf</code>和<code>lastIndexOf</code>的下标不相等，则重复出现</li></ul></blockquote></li><li><p>**<code>sort()</code>**：数组排序,也会影响原数组，默认会按照Unicode编码进行排序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1. 默认排序</span>数组变量名<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 自定义排序</span>数组变量名<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//排序的规则代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子:</span><span class="token comment" spellcheck="true">//1. 按照自然顺序排序(0-9、a-z、A-Z)</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 针对数字数组：从小到大</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 针对数字数组：从大到小</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4. 数组随机排序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>reverse()</code>方法 颠倒数组元素顺序，改变原始数组，不会创建新数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr6 <span class="token operator">=</span> arr5<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [5,4,3,2,1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token operator">===</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><p><code>includes() </code>用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回<code> true</code>，否则返回<code>false</code>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr8<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr8<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li><li><p><code>concat()</code>可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"白骨精"</span><span class="token punctuation">,</span><span class="token string">"玉兔精"</span><span class="token punctuation">,</span><span class="token string">"蜘蛛精"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"二郎神"</span><span class="token punctuation">,</span><span class="token string">"太上老君"</span><span class="token punctuation">,</span><span class="token string">"玉皇大帝"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">,</span><span class="token string">"牛魔王"</span><span class="token punctuation">,</span><span class="token string">"铁扇公主"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>二维数组本质上是以一维数组作为数组元素的数组，即“数组的数组”</li><li>二维数组又称为矩阵，行列数相等的矩阵称为方阵。</li><li>对称矩阵<code>a[i][j] = a[j][i]</code>，对角矩阵：n阶方阵主对角线外都是零元素。</li></ul><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li><p>字面量定义</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p>数组对象创建</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>二维数组的遍历</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="ES5新增数组API"><a href="#ES5新增数组API" class="headerlink" title="ES5新增数组API"></a>ES5新增数组API</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><ul><li><p><code>forEach()</code>数组的专属遍历，可用于替代传统的for循环</p></li><li><p><code> forEach()</code>方法需要一个函数作为参数</p><p>像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</p><p>数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素</p><p> 以实参的形式传递进来，我们可以来定义形参，来读取这些内容</p></li></ul><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value <span class="token punctuation">,</span> index <span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//value:指的是遍历的数据本身</span>    <span class="token comment" spellcheck="true">//index：指的是遍历的数据对应的下标</span>   <span class="token comment" spellcheck="true">// array:指的是遍历数组本身</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个和第三个参数可选，value参数必须写</span></code></pre><ul><li>流程：当遍历数组时，forEach会依次从数组中拿出一个数据，调用一次我们传过去的函数，吧数据以及对应的下标以及数组作为实际参数传过去进行处理</li></ul><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote><p>遍历数组，根据条件拿到数组中满足条件的数据，并返回一个新的数组</p></blockquote><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//value:指的是遍历的数据本身</span>    <span class="token comment" spellcheck="true">//index：指的是遍历的数据对应的下标</span>    <span class="token comment" spellcheck="true">//array:指的是遍历数组本身</span>    如果value满足条件，需要<span class="token keyword">return</span> <span class="token boolean">true</span> 来告诉 filter 当前数据满足条件，不满足则 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>遍历数组，会将每次遍历处理后return的数据 加入到新数组中并返回。对原数组没有影响</p></blockquote><pre class=" language-js"><code class="language-js">  数组变量名<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//value:指的是遍历的数据本身</span>      <span class="token comment" spellcheck="true">//index：指的是遍历的数据对应的下标</span>      <span class="token comment" spellcheck="true">//array:指的是遍历数组本身</span>      将处理后的数据<span class="token keyword">return</span>，  如果没有<span class="token keyword">return</span>，那么新数组中对应下标位置上的数据是undefined  <span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><blockquote><p>遍历数组，用于判断某个遍历的数据是否满足指定的条件，只要有一个满足条件，则最终返回true,否则返回false。some返回的是布尔型数据</p></blockquote><pre class=" language-js"><code class="language-js">数组变量名<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//value:指的是遍历的数据本身</span>   <span class="token comment" spellcheck="true">// index：指的是遍历的数据对应的下标</span>    <span class="token comment" spellcheck="true">//array:指的是遍历数组本身</span>    对value进行处理并判断，如果满足，就<span class="token keyword">return</span> <span class="token boolean">true</span>，否则<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><blockquote><p>遍历数组，用于判断某个遍历的数据是否满足指定的条件，必须每一个都要满足条件，最终返回true，否则false。即<code>every</code>函数返回的是布尔型数据</p></blockquote><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值(或者上一次回调函数的返回值)，当前元素值，当前索引，调用 reduce 的数组。</p></blockquote><pre class=" language-js"><code class="language-js">数组变量名<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//data  累加值，初始值</span>    <span class="token comment" spellcheck="true">//value:指的是遍历的数据本身</span>   <span class="token comment" spellcheck="true">// index：指的是遍历的数据对应的下标</span>    <span class="token comment" spellcheck="true">//array:指的是遍历数组本身</span>    对value进行处理<span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre><blockquote><p>在没有初始值的空数组上调用 reduce 将报错</p><p>不给初始值的话，会取数组的第一项作为初始值</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript数组&quot;&gt;&lt;a href=&quot;#JavaScript数组&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组&quot;&gt;&lt;/a&gt;JavaScript数组&lt;/h1&gt;&lt;h2 id=&quot;JavaScript-数组概念&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript函数</title>
    <link href="https://codehan045.github.io/posts/f7c2ac27.html"/>
    <id>https://codehan045.github.io/posts/f7c2ac27.html</id>
    <published>2021-08-10T08:09:44.000Z</published>
    <updated>2021-08-15T11:14:41.428Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="JavaScript函数function"><a href="#JavaScript函数function" class="headerlink" title="JavaScript函数function"></a>JavaScript函数function</h1><h2 id="函数基础知识"><a href="#函数基础知识" class="headerlink" title="函数基础知识"></a>函数基础知识</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>当对多个数据进行相同操作时(比如获取数组的最大值)，会导致代码重复并且修改麻烦。代码结构冗余，结构不清晰。</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>函数本身可以理解为一段代码的容器。一个函数里的代码可以重复的被使用。具有特定的功能和方法；</li><li>函数也是一个对象</li><li>函数中可以封装一些功能，有需要时进行调用</li><li>使用<code>typeof</code>检查一个函数对象时，会返回<code>function</code></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>对某一功能进行封装，可以重复调用，无需任何修改，将具体的功能封装为多个函数，降低代码的耦合</li></ul><h3 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h3><h4 id="函数的定义与调用"><a href="#函数的定义与调用" class="headerlink" title="函数的定义与调用"></a>函数的定义与调用</h4><ul><li><p>创建一个函数对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//可以将要封装的代码以字符串的形式传递给构造函数</span><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"console.log('Hello 这是我的第一个函数');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//很少使用</span></code></pre></li><li><p>使用函数声明来创建一个函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法：</span><span class="token keyword">function</span>  <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">.</span>形参n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//例</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是我的第二个函数~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>使用 函数表达式 来创建一个函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法：</span><span class="token keyword">var</span>  函数名<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">.</span>形参n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//例</span> <span class="token keyword">var</span> fun3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数中封装的代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   </code></pre></li></ul><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><ul><li><p>封装到函数中的代码不会立即执行</p></li><li><p>函数中的代码会在函数调用时执行</p></li><li><p>当调用函数时，函数中封装的代码会按照顺序执行</p></li><li><p>函数一旦定义，可以多次使用</p></li><li><p>每使用一次函数，就会执行一次函数里的所有代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法</span><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h4><ul><li>基本的函数使用只能解决代码重复问题，但还是不能解决针对不同数据进行操作的问题。通过参数来解决针对不同数据进行相同操作的问题。</li></ul><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>函数参数是一种数据传递的机制。该机制中参数分为形式参数和实际参数。这两种参数协同一起使用可以解决<code>函数不能针对不同数据进行操作的问题</code></li></ul><h4 id="参数分类"><a href="#参数分类" class="headerlink" title="参数分类"></a>参数分类</h4><ul><li><p>形式参数</p><ul><li>本质是一个变量，写在函数定义时<code>()</code>中。该变量会在函数被调用时自动创建，该变量的数据是通过实际参数传递过来。</li><li>形式参数接收到数据之后，可以在函数的<code>{}</code>里进行使用。这样就完成了将函数外的数据传递到函数中进行处理。</li></ul></li><li><p>实际参数</p><ul><li>是指某个具体的数据或已定义的变量。写在函数调用时<code>()</code>中，会在函数调用时将具体的数据传递给形式参数。</li><li>当我们的参数过多时，可以将参数封装到一个对象中，然后通过对象传递</li></ul></li><li><p>形式参数和实际参数之间的关系</p><ul><li>在函数调用时，我们会把要处理的数据通过实际参数传递到函数中，被形式参数所接受，那么在函数中就可以通过形式参数来处理传递进去的数据</li></ul></li><li><p>使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形式参数<span class="token number">1</span><span class="token punctuation">,</span>形式参数<span class="token number">2</span><span class="token punctuation">,</span>形式参数n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">函数名</span><span class="token punctuation">(</span>实际参数<span class="token number">1</span><span class="token punctuation">,</span>实际参数<span class="token number">2</span><span class="token punctuation">,</span>实际参数n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li><p>调用函数时解析器不会检查实参的类型,</p></li><li><p>所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查</p></li><li><p>函数的实参可以是任意的数据类型</p></li><li><p>调用函数时，解析器也不会检查实参的数量</p></li><li><p>多余实参不会被赋值</p></li><li><p>如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</p></li></ul></blockquote></li></ul><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><h4 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h4><ul><li>通过参数可以实现处理不同的数据，但没办法直接获取函数处理后的数据。通过返回值来实现<code>在函数调用后能够继续使用函数中处理后的数据</code></li></ul><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ul><li>返回值是函数允许在调用后通过<code>return</code>语句能够将函数里的某个数据输出到函数外。我们可以定义变量来接收<code>return</code>返回的数据</li></ul><h4 id="返回值的使用"><a href="#返回值的使用" class="headerlink" title="返回值的使用"></a>返回值的使用</h4><h3 id="使用返回值"><a href="#使用返回值" class="headerlink" title="使用返回值"></a>使用返回值</h3><ol><li>在函数中合适的位置书写 return语句。一般是函数的最后一行</li><li>在函数调用时用变量来接收</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//省略了函数主体代码</span>    <span class="token keyword">return</span> 要返回的数据<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> 变量名  <span class="token operator">=</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">//例子</span><span class="token keyword">function</span> <span class="token function">mianji</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">3.14</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mianji</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">/*调用函数 相当于使用的函数的返回值*/</span> mianji<span class="token comment" spellcheck="true">/* 函数对象 相当于直接使用函数对象*/</span></code></pre><ul><li>在函数调用后用变量来接收返回的数据。</li></ul><blockquote><ul><li><p>在函数中<code>return</code>后的语句都不会执行</p></li><li><p><code>return</code>语句后不跟任何值就相当于返回一个<code>undefined</code></p></li><li><p>函数中不写<code>return</code>，默认会返回<code>undefined</code></p></li><li><p><code>return</code>后可以跟任意类型的值</p></li><li><p>需保证任何情况下，函数最终只会执行<code>一个return</code></p></li></ul></blockquote><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ul><li><p> 立即执行函数</p></li><li><p>函数定义完，立即被调用，这种函数叫做立即执行函数</p></li><li><p>立即执行函数往往只会执行一次</p></li><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一个匿名函数~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="箭头函数-ES6"><a href="#箭头函数-ES6" class="headerlink" title="箭头函数 ES6"></a>箭头函数 ES6</h2><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><ul><li>箭头函数就是个简写形式的函数表达式，箭头函数相当于匿名函数，所以采用函数表达式的写法。左边是传入函数的参数，右边是函数中执行的语句。</li><li>箭头函数用 =&gt; 符号来定义</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相当于</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（1）当要执行的代码块只有一条return语句时，可省略大括号和return关键字：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum  <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">+</span>y<span class="token punctuation">;</span></code></pre><p>（2）当传入的参数只有一个时，可以省略小括号：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ji <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">*</span>x<span class="token comment" spellcheck="true">//和上面一样 相当于一个函数 的参数 为 x return x * x 的值</span></code></pre><p>（3）当不需要参数时，使用空的圆括号：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><ul><li><p>概念：在javascript中，<code>arguments</code>实际上是当前函数的一个<code>内置对象</code>,所有函数都内置了一个arguments对象，arguments对象中<code>存储了传递的所有实参</code>；</p></li><li><p>应用：当我们不确定有多少参数传递的时候，可以用<code>arguments</code>来获取</p></li><li><p>只有函数才有<code>arguments</code>内置对象</p></li></ul><blockquote><p>arguments展示形式是一个伪数组(不是真正意义上的数组)，因此可以进行遍历，具有以下特点：</p><ul><li>具有<code>length</code>属性</li><li>按索引方式存储和读取数据</li><li>不具有数组的<code>push</code>、<code>pop</code>…等方法</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;JavaScript函数function&quot;&gt;&lt;a href=&quot;#JavaScript函数function&quot; class=&quot;headerlink&quot; title=&quot;JavaScript函数function&quot;&gt;&lt;/a&gt;JavaScript函数funct</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript运算符及语句</title>
    <link href="https://codehan045.github.io/posts/bc94c580.html"/>
    <id>https://codehan045.github.io/posts/bc94c580.html</id>
    <published>2021-08-07T07:11:47.000Z</published>
    <updated>2021-08-17T02:35:53.648Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="JavaScript运算符及语句"><a href="#JavaScript运算符及语句" class="headerlink" title="JavaScript运算符及语句"></a>JavaScript运算符及语句</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p>一套对数据进行运算的运算符，可以对一个或多个值进行运算，并获得运算结果</p></blockquote><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a><code>typeof</code>运算符</h3><ul><li><p>使用<code>typeof</code>操作符可以用来检查一个变量的数据类型，将值的类型以字符串的形式返回</p></li><li><p>使用方式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//typeof  数据 </span><span class="token keyword">typeof</span> <span class="token number">123</span></code></pre></li><li><p>返回结果</p><ul><li><code>typeof </code>数值  <code>number</code></li><li><code>typeof </code>字符串<code> string</code></li><li><code>typeof</code> 布尔型 <code>boolean</code></li><li><code>typeof</code> undefined <code>undefined</code></li><li><code>typeof </code>null <code>object</code></li></ul></li></ul><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><blockquote><p>顾名思义就是进行算数操作的运算符</p></blockquote><ul><li><p> 当对非<code>Number</code> 类型的值，会先转换为<code>Number</code>，然后再进行运算</p></li><li><p>任何值和<code>NaN</code>做运算 都为<code>NaN</code></p></li><li><p> 对于String 类型,进行拼接</p></li><li><p> 任何值和字符串相加，都会先转换成字符串，然后再进行拼接</p></li><li><p><code>c= c+""</code>;转换为字符串</p></li><li><p>可以通过一个值-0 *1 /1来将其转换为Number</p></li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>++(前置)</td><td>自增</td></tr><tr><td>-</td><td>减法</td><td>++(后置)</td><td>自增</td></tr><tr><td>*</td><td>乘法</td><td>–(前置)</td><td>自减</td></tr><tr><td>/</td><td>除法</td><td>–(后置)</td><td>自减</td></tr><tr><td>%</td><td>取模</td><td>+ 正</td><td>符号不变</td></tr><tr><td></td><td></td><td>-  负</td><td>符号反转</td></tr></tbody></table><h4 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h4><ul><li>自增 ++ 自减 –</li><li>自增和自减分为前置运算和后置运算。<ul><li>所谓的前置元素就是将元素符放到变量的前边，而后置将元素符放到变量的后边。</li><li> 例子：</li><li>前置自增：++a </li><li>后置自减：a– </li></ul></li><li>运算符在前置时，表达式值等于变量原值。</li><li>运算符在后置是，表达式值等于变量变更以后的值。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>一般情况下使用逻辑运算符会返回一个布尔值。</p></li><li><p>逻辑运算符主要有三个：非、与、或。</p></li><li><p>在进行逻辑操作时如果操作数不是布尔类型则会将其转换 布尔类型在进行计算</p></li><li><p>非使用符号 ! 表示，与使用 &amp;&amp; 表示，或使用 || 表示。</p></li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>短路规则</th></tr></thead><tbody><tr><td>!</td><td>逻辑非（NOT）</td><td>无</td></tr><tr><td>&amp;&amp;</td><td>逻辑与（AND)</td><td>若左值为假，则不运算右值</td></tr><tr><td>||</td><td>逻辑或（OR)</td><td>若左值为真，则不运算右值</td></tr></tbody></table><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><ul><li> 非运算符可以应用于任意值，无论值是什么类型，这个运算符都会返回一个布尔值</li><li> 非运算符会对原值取反，比如原值是true使用非运算符会 返回false，原值为false使用非运算符会返回true</li><li>可以为一个任意数据类型取两次反，来将其转换为布尔值，<ul><li> 原理和Boolean()函数一样</li></ul></li></ul><h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4><ul><li>与运算符可以应用于任何数据类型，且不一定返回布尔值</li><li>对于非布尔值运算，会先将非布尔值转换为布尔值</li><li>对布尔值做运算时，如果两个值都为true则返回true， 否则返回false</li></ul><blockquote><ul><li><p>非布尔值时：如果两个都为true，则返回第二个值，如 果两个值中有false则返回靠前的false的值</p></li><li><p>JS中的“与”属于短路的与，</p><ul><li>如果第一个值为false，则不会看第二个值</li></ul></li></ul></blockquote><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><ul><li>或运算符可以应用于任何数据类型，且不一定返回布尔值。</li><li>对于非布尔值运算，会先将非布尔值转换为布尔值</li><li>对布尔值进行运算时，如果两个值都为false则返回false， 否则返回true</li></ul><blockquote><ul><li><p>非布尔值时：如果两个都为false ，则返回第二个值，否 则返回靠前true的值</p></li><li><p>JS中的“或”属于短路的或</p></li><li><p>如果第一个值为true，则不会检查第二个值</p></li></ul></blockquote><p><strong>对于非布尔值进行与或运算时，会先将其转换为布尔值，然后再运算，并且返回原值</strong></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>的赋值操作符由等于号 （<code>=</code>） 表示,作用就是把右侧的值赋给左侧的变量</p></li><li><p>复合赋值操作</p><ul><li>+=、 *= 、-= 、/=、%=</li><li>比如：a+=10和a=a+10是一样的</li></ul></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><p>小于（&lt;） 、大于（&gt;） 、小于等于（&lt;=）和大于等于（&gt;=） 这几个关系运算符用于对两个值进行比较</p><ul><li>非数值的情况</li></ul><p>​       * - 对于非数值进行比较时，会将其转换为数字然后在比较</p><p>​       * - 如果符号两侧的值都是字符串时，不会将其转换为数字进行比较</p><p>​       *   而会分别比较字符串中字符的Unicode编码（按位比较）</p><ul><li><p>这几个运算符都返回一个布尔值，用来表示两个值之间的关系 是否成立</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//任何值和NaN做任何比较都是false</span><span class="token comment" spellcheck="true">//比较两个字符串时，比较的是字符串的字符编码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token operator">&lt;</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//比较字符编码时是一位一位进行比较</span><span class="token comment" spellcheck="true">//如果两位一样，则比较下一位，所以借用它来对英文进行排序</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">&lt;</span> <span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//比较中文时没有意义</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"戒"</span> <span class="token operator">></span> <span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//如果比较的两个字符串型的数字，可能会得到不可预期的结果</span><span class="token comment" spellcheck="true">//注意：在比较两个字符串型的数字时，一定一定一定要转型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"11123123123123123123"</span> <span class="token operator">&lt;</span> <span class="token operator">+</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre></li></ul></li><li><p>相等</p><ul><li>JS中使用<code>==</code>来判断两个值是否相等，如果相等则返回 true。</li><li>使用<code>!=</code>来表示两个值是否不相等，如果不等则返回true。</li><li>当使用<code>==</code>或<code>!=</code>来比较两个值时，如果类型不同，则会自动进行类型转换，将其转换为相同的类型，然后再比较</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//null和undefined使用==判断时是相等的。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN不和任何值相等，包括他本身</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//可以通过isNaN() 函数来判断一个值是否是NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre></li><li><p>全等</p><ul><li><code>===</code>表示全等，他和==基本一致，不过<code>==在判断两个值 时会进行自动的类型转换</code>，而<code>===</code>不会</li><li>例如：<code>”55”==55</code>会返回true，而<code>”55”===55</code>会返回 false</li><li><code>!==</code>表示不全等，同样比较时不会自动转型</li></ul></li><li><p>逗号</p><ul><li><p>使用逗号可以在一条语句中执行多次操作。 </p></li><li><p>比如：<code>var num1=1, num2=2, num3=3</code>;</p></li><li><p>使用逗号运算符分隔的语句会从左到右顺 序依次执行。</p></li></ul></li></ul><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><ul><li><p>三元运算符，写为 </p><pre class=" language-javascript"><code class="language-javascript">条件语句<span class="token operator">?</span>语句<span class="token number">1</span>：语句<span class="token number">2</span>条件判断为<span class="token boolean">true</span>则执行语句<span class="token number">1</span>，否则执行语句<span class="token number">2</span> ，并将结果返回</code></pre></li></ul><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><ul><li>若要优先进行运算，直接添加小括号</li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul><li>语句是一个程序的基本单位，JS的程序就是由一条一条 语句构成的，每一条语句使用<code>;</code>结尾</li><li>JS中的语句默认是由上至下顺序执行的，但是我们也可 以通过一些流程控制语句来控制语句的执行顺序</li></ul><h3 id="条件语句（流程控制语句）"><a href="#条件语句（流程控制语句）" class="headerlink" title="条件语句（流程控制语句）"></a>条件语句（流程控制语句）</h3><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"age=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"dont"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="if-else-if…else"><a href="#if-else-if…else" class="headerlink" title="if-else if…else"></a>if-else if…else</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你还未成年！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您已经是个青年了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你已经是个中年了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="switch—case语句"><a href="#switch—case语句" class="headerlink" title="switch—case语句"></a>switch—case语句</h4><ul><li><p>语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> 表达式<span class="token number">1</span><span class="token punctuation">:</span>语句<span class="token operator">...</span><span class="token keyword">case</span> 表达式<span class="token number">2</span><span class="token punctuation">:</span>语句<span class="token operator">...</span><span class="token keyword">default</span><span class="token punctuation">:</span>语句<span class="token operator">...</span><span class="token punctuation">}</span></code></pre><ul><li>需要注意的是case语句只是标识的程序运行的起点，并不是终 点，所以一旦符合case的条件程序会一直运行到结束。所以我 们一般会在case中添加break作为语句的结束。</li><li>变量与表达式关系是全等的匹配</li></ul></li></ul><h4 id="if和switch的比较"><a href="#if和switch的比较" class="headerlink" title="if和switch的比较"></a>if和switch的比较</h4><ul><li><p>一般情况下，它们两个语句可以相互替换</p></li><li><p>if和switch都是分支结构，用于判断不同的情况，做出不同的应答</p></li><li><p>if更适用于判断数值不明确，比如大于小于等情况</p></li><li><p>switch适用于固定数值的时候</p></li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li>循环中的语句只要满足一定的条件将会一 直执行</li></ul><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><ul><li><p>语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>语句<span class="token operator">...</span><span class="token punctuation">}</span></code></pre></li><li><p>和if一样while中的条件表达式将会被转换为布尔类型，只 要该值为真，则代码块将会一直重复执行。</p></li></ul><h4 id="do—while"><a href="#do—while" class="headerlink" title="do—while"></a>do—while</h4><ul><li><p>语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">{</span>语句<span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p> do…while循环会至少执行一次。</p></li></ul><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h5><ol><li>初始化条件</li><li>循环条件</li><li>循环体</li><li>迭代条件</li></ol><ul><li><p>语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式 <span class="token punctuation">;</span> 条件表达式 <span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>语句<span class="token operator">...</span>循环体<span class="token punctuation">}</span></code></pre></li></ul><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ul><li><code>break</code> :会使程序跳出循环</li><li><code>continue</code>:使用continue语句会使程序跳过当次循环，继续执行下一次循环，并不会结束整个循环</li></ul><blockquote><p>continue只能在循环中使用，不能出现在其他的结构中</p></blockquote><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//用户输入一个数，判断是否是质数  </span><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方式二</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不是质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><ul><li><p>使用 label 语句可以在代码中添加标签，以便将来使用</p></li><li><p>语法：</p><pre class=" language-javascript"><code class="language-javascript">start<span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p> 这个例子中定义的 start 标签可以在将来由 break 或 continue 语句 引用。加标签的语句一般都要与 for 语句等循环语句配合使用。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;JavaScript运算符及语句&quot;&gt;&lt;a href=&quot;#JavaScript运算符及语句&quot; class=&quot;headerlink&quot; title=&quot;JavaScript运算符及语句&quot;&gt;&lt;/a&gt;JavaScript运算符及语句&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基本语法</title>
    <link href="https://codehan045.github.io/posts/bbf13a25.html"/>
    <id>https://codehan045.github.io/posts/bbf13a25.html</id>
    <published>2021-08-07T01:50:07.000Z</published>
    <updated>2021-08-17T07:23:01.460Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h1><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li><p><code>alert(" ")</code> 控制浏览器弹出一个警告框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是我的第一个网页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>document.write("")</code> 可以向body中写入一个内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;a href='http://www.baidu.com'>百度一下&lt;/a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//如果要输出的是HTML标签的代码本身。那么JavaScript会将其解析为一个真正的标签并显示在页面上。</span></code></pre></li><li><p><code>console.log("")</code>向控制台输出一个内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul><li><p><code>prompt("")</code>获取用户输入的文字</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"提示性文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配合输出</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的手机号'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h2><h3 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="<script>标签"></a><code>&lt;script&gt;</code>标签</h3><ul><li><p>js代码需要编写到<code>&lt;script&gt; js代码&lt;/script&gt;</code>标签中</p></li><li><p><code>&lt;script&gt;</code>标签可以写在<code>&lt;head&gt;</code>标签中，也可以写在<code>&lt;body</code>标签中</p></li><li><p><code>&lt;script&gt;</code>属性</p><ul><li><code>type</code> 默认值<code>text/javascript</code>可以省略不写</li><li><code>src</code>当需要引入一个外部的js文件时，使用该属性指向文件的地址</li></ul><blockquote><p>注：<code>&lt;script&gt;</code>若作为外部引入js文件使用，则在标签内书写的js代码无效，默认被注释，不被解析,只能单一作用，若引入js文件后，再编写js代码，则需重新添加·<code>&lt;script&gt;</code>标签</p></blockquote></li></ul><h3 id="内联属性"><a href="#内联属性" class="headerlink" title="内联属性"></a>内联属性</h3><ul><li><p>可以将js代码编写到标签onclick 属性中，当我们点击按钮时，js代码才会执行</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>你点我干嘛！<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></li><li><p>可以将js代码写在超链接的href属性中，点击超链接时，执行js代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(<span class="token punctuation">'</span>让你点你就点！<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你也点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 无任何效果，可作占位符--></span></code></pre></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>注释中的内容不会被解析器解析执行，但是会在 源码中显示，我们一般会使用注释对程序中的内 容进行解释。</p></blockquote><ul><li><p>单行注释</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//单行注释</span></code></pre></li><li><p>多行注释</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * 多行注释 * js注释*/</span></code></pre></li><li><p>文档注释</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** 对一个方法或一段代码进行说明* **/</span></code></pre></li></ul><h2 id="javascript书写规范"><a href="#javascript书写规范" class="headerlink" title="javascript书写规范"></a>javascript书写规范</h2><ol><li><p>js严格区分大小写，也就是abc和Abc会被解析器 认为是两个不同的东西。</p></li><li><p>js中每一条语句以分号 ;结尾</p><ul><li>如果不写分号，浏览器会自动添加，但是会消耗资源，有时会加错 ，**必须写 **</li></ul></li><li><p>js中会忽略多个空格和换行，所以可以利用空格和换行来格式化</p></li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><blockquote><p>所谓标识符，就是可以自己起名字的变量，函数、属性等或是函数的参数</p></blockquote><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li><p>标识符中可以有字母，数字，_ ,$</p></li><li><p>不能以数字开头,第一个字符必须是一个<code>字母</code>、<code>下划线（ _ ）</code>或一个<code>美元符号（ $ ）</code></p></li><li><p>标识符不能是<code>关键字</code>和<code>保留字</code></p></li><li><p>一般使用<code>驼峰命名法</code></p><ul><li>首字母小写，每个单词的开头字母大写，其余子母小写</li><li>示例：<code> helloWorld</code></li></ul></li><li><p>Js底层保存标识符时，实际上是采用的是Unicode编码</p></li></ol><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><blockquote><p>关键字：具有特殊意义和功能的的单词</p><p>保留字：将来有可能作为关键字</p></blockquote><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210807105551.png"></p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210807105710.png"></p><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><blockquote><p>字面量：一些不可改变的值</p><p>变量：可以保存字面量，它的值可以任意改变，作用是给某一个值或对象标注名称，能够重复的使用数据</p><ul><li>变量定义一次，可以多次使用</li><li>变量都需要<code>先定义，再使用</code></li></ul></blockquote><ul><li><p>变量的声明</p><ul><li><p>使用var关键字来声明一个变量,可以用来保存任何类型的值，声明范围是函数作用域</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> he；</code></pre></li></ul></li><li><p>变量的赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre></li><li><p>声明和赋值同时进行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre></li><li><p>变量的使用</p><ul><li><p>需重新定义变量。直接修改变量的数据即可</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">//修改</span>demo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span></code></pre></li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型（JavaScript中有5种）"><a href="#基本数据类型（JavaScript中有5种）" class="headerlink" title="基本数据类型（JavaScript中有5种）"></a>基本数据类型（JavaScript中有5种）</h3><h4 id="字符串型-String"><a href="#字符串型-String" class="headerlink" title="字符串型 String"></a>字符串型 String</h4><blockquote><p>用于表示一个字符序列，即字符串</p></blockquote><ul><li><p>字符串需要使用<code>"</code>或 <code>'</code>括起来</p></li><li><p>引号不能嵌套，双引号不能放双引号，单引号不能放单引号</p></li><li><p>转义字符：</p><table><thead><tr><th>转义字符</th><th>含义</th><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td><td><code>\</code></td><td>斜杠</td></tr><tr><td><code>\t</code></td><td>制表符</td><td><code>\'</code></td><td>单引号</td></tr><tr><td><code>\b</code></td><td>空格</td><td><code>\"</code></td><td>双引号</td></tr><tr><td><code>\r</code></td><td>回车</td><td></td><td></td></tr></tbody></table></li><li><p>将其他数值转换为字符串有三种方式：<code>toString()</code>、<code>String()</code>、 <code>拼串</code>。</p></li></ul><h4 id="数值型-Number"><a href="#数值型-Number" class="headerlink" title="数值型 Number"></a>数值型 Number</h4><blockquote><p>js中所有的数值都是Number</p><p> 包括整数和浮点数（小数）</p></blockquote><ul><li><p>js中可以表示的数字的最大值</p><ul><li><code>Number.MAX_VALUE</code>    1.7976931348623157e+308</li><li>使用的Number超过 最大值，则会返回一个<code>Infinity</code> 正无穷 <code>Infinity</code> 数值类型</li></ul></li><li><p>大于0的最小值 <code>Number.MIN_VALUE</code></p></li><li><p><code>NaN</code> 是一个特殊的数字not a number 非数字</p></li><li><p>在js中整数的运算基本可以保证精确</p></li><li><p>使用js进行浮点运算，可能得到不精确的结果</p></li><li><p>数字保留指定位数的小数点</p><ul><li><p><code>toFixed</code>:能够指定某个数字保留几位小数,会四舍五入。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名<span class="token operator">=</span> 数字<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>小数点的位数<span class="token punctuation">)</span><span class="token punctuation">;</span>例子：保留一位小数<span class="token keyword">var</span> num <span class="token operator">=</span><span class="token number">1.674</span><span class="token punctuation">;</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1.7</span></code></pre></li></ul></li></ul><h4 id="布尔型-Boolean"><a href="#布尔型-Boolean" class="headerlink" title="布尔型 Boolean"></a>布尔型 Boolean</h4><ul><li>布尔值只有两个  做逻辑判断<ul><li><code>true</code></li><li><code>false</code> </li></ul></li></ul><h4 id="Null-型null-空值"><a href="#Null-型null-空值" class="headerlink" title="Null 型null  空值"></a>Null 型null  空值</h4><ul><li><p>Null类型只有一个，就是null</p></li><li><p> null这个值专门用来表示一个为空的对象</p></li><li><p>使用typeof 检查一个null值时，会返回object</p></li></ul><h4 id="Undefined型-undefined-未定义"><a href="#Undefined型-undefined-未定义" class="headerlink" title="Undefined型 undefined 未定义"></a>Undefined型 undefined 未定义</h4><ul><li><p>Undefined 类型只有一个值，即特殊的 <code>undefined</code> 。</p></li><li><p>在使用 var 声明变量但未对其加以初始化时，这个变量的值就 是 undefined</p></li></ul><blockquote><ul><li><p>typeof对没有初始化和没有声明的变量都会返回 undefined</p></li><li><p>undefined值实际上是由null值衍生出来的，所以如果比较 undefined和null是否相等，会返回true；</p></li></ul></blockquote><h3 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h3><ul><li>Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名</li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>Object 对象<ul><li>数组</li><li>函数 function</li></ul></li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="将其他数据类型转换为String"><a href="#将其他数据类型转换为String" class="headerlink" title="将其他数据类型转换为String"></a>将其他数据类型转换为<code>String</code></h3><ul><li>方式一<ul><li><p>调用被转换数据类型的toString()方法</p></li><li><p>对于Number调用toString()时可以在方法中传递一个整数作为参数</p><ul><li><p>此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为二进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为1111 1111</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//string</span></code></pre></li></ul></li><li><p>该方法不会影响原变量，会将转换的结果返回</p></li><li><p>注：null 和 undefined 这两个值没有toString()方法</p></li></ul></li><li>方式二<ul><li>调用String()函数，将被转换的数据作为参数传递给函数</li><li>使用String()函数做强制转换时：<ul><li>对于<code>Number</code>和<code>Boolean</code>实际上调用的是<code>toString()</code>方法</li><li>对于<code>null</code>和<code>undefined</code>是直接转换</li></ul></li></ul></li><li>方式三<ul><li>字符串的拼接，任何值与字符串相加，都会先转换为字符串，然后再进行拼接</li><li>一种隐式的类型转换，由浏览器自动完成，实际上它也是调用String()函数</li></ul></li></ul><h3 id="将其他数据类型转换为Number"><a href="#将其他数据类型转换为Number" class="headerlink" title="将其他数据类型转换为Number"></a>将其他数据类型转换为<code>Number</code></h3><ul><li><p>方式一</p><ul><li><p>使用<code>Number()</code>函数</p></li><li><p>不同数据类型转换结果</p><ul><li><p>字符串—–&gt;数字</p><ol><li><code>纯数字</code>，直接转换</li><li><code>非数字</code>的内容，则转换为<code>NaN</code></li><li>字符串是<code>空串</code>，或是<code>空格的字符</code>，转换为<code>0</code></li></ol></li><li><p>布尔值—–&gt;数字</p><ul><li><code>true</code> 转换为  <code>1</code></li><li><code>false</code>转换为  <code> 0</code></li></ul></li><li><p><code>null</code>—–&gt;数字   为  <code>0</code></p></li><li><p><code>undefined</code>—-&gt;数字   <code>NaN</code></p></li></ul></li></ul></li><li><p>方式二：专门用于字符串的转换</p><ul><li>若对<code>非String </code>使用<code> parseInt()</code> 或 <code>parseFloat()</code> ,他会先将其转换为String然后再操作</li><li><code>parseInt() </code>把一个字符串转换为一个整数</li><li>可以将一个字符串中的有效的整数内容提取出来，然后转换为Number</li><li><code>parseFloat() </code>获得有效的小数</li></ul></li><li><p>方式三</p><ul><li>通过运算符，<code>将一个值减0 ,*1, /1</code>来将其转换为<code>Number</code></li><li>原理和Number()函数一样</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;JavaScript基本语法&quot;&gt;&lt;a href=&quot;#JavaScript基本语法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基本语法&quot;&gt;&lt;/a&gt;JavaScript基本语法&lt;/h1&gt;&lt;h2 id=&quot;输入和输出&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript简介</title>
    <link href="https://codehan045.github.io/posts/da2d2f3e.html"/>
    <id>https://codehan045.github.io/posts/da2d2f3e.html</id>
    <published>2021-08-06T03:46:27.000Z</published>
    <updated>2021-08-08T07:43:09.927Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="javascript简介"><a href="#javascript简介" class="headerlink" title="javascript简介"></a>javascript简介</h1><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ul><li>语言的发展： <ul><li>纸带机：机器语言</li><li>汇编语言：符号语言</li><li>现代语言：高级语言</li></ul></li></ul><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><ul><li>诞生于1995年，主要用于处理网页中的前端验证</li><li>前端验证：指检查用户输入的内容是否符合一定的规则<ul><li>例如：用户名的长度，密码长度，邮箱的格式等</li></ul></li><li>网景公司发明，起初命名为LiveScript,后由sun公司介入，更名为Javascript</li><li>1996年微软公司在其最新的IE3浏览器中引入了自己对 JavaScript的实现JScript。</li><li>JS的标准名命名为<strong>ECMAScript</strong></li></ul><h3 id="javascript是什么"><a href="#javascript是什么" class="headerlink" title="javascript是什么"></a>javascript是什么</h3><ul><li>JavaScript是世界上最流行的语言之一，是一种运行在客户端的脚本语言（script是脚本的意思）</li><li>不需要编译，运行过程中由js解释器(js引擎)逐行来进行解释并执行</li></ul><h2 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h2><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210806110711.png" alt="image-20210806110426200"></p><h2 id="JS的特点"><a href="#JS的特点" class="headerlink" title="JS的特点"></a>JS的特点</h2><h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><ul><li>JavaScript是一门解释型语言，不需要编译为机器码在执行,而是直接执行</li><li>使用了JIT技术，运行速度得以改善</li><li>优缺点：<ul><li>优势：不需编译，开发起来尤为轻松</li><li>劣势：运行较慢</li></ul></li></ul><h3 id="类似于C和Java的语法结构"><a href="#类似于C和Java的语法结构" class="headerlink" title="类似于C和Java的语法结构"></a>类似于C和Java的语法结构</h3><ul><li>JavaScript的语法结构与C和Java很像，向for、if、while等语 句和Java的基本上是一模一样的。</li><li>不过JavaScript和与Java的关系也仅仅是看起来像而已</li></ul><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><ul><li>动态语言：在语言中的一切内容都是不确定的。</li><li>JavaScript 是一种基于事件驱动的脚本语言，它不需要经过 Web 服务器就可以对用户的输入直接做出响应。</li></ul><h3 id="基于原型的面向对象，弱类型的语言"><a href="#基于原型的面向对象，弱类型的语言" class="headerlink" title="基于原型的面向对象，弱类型的语言"></a>基于原型的面向对象，弱类型的语言</h3><p>• JavaScript是一门面向对象的语言。</p><h3 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h3><ul><li>JavaScript 依赖于浏览器本身，与操作环境无关。任何浏览器，只要具有JavaScript脚本引擎，就可以执行JavaScript。目前，几乎所有用户使用的浏览器都内置了JavaScript脚本引擎。</li></ul><h2 id="Js的优点"><a href="#Js的优点" class="headerlink" title="Js的优点"></a>Js的优点</h2><ul><li><p>交互性：可以与用户进行动态交互</p></li><li><p>安全性：只能在浏览器内部运行，不能访问本地硬盘或者其他资源</p></li><li><p>跨平台：无论任何平台，只要有浏览器，就能运行</p></li></ul><h2 id="JavaScript的组成部分"><a href="#JavaScript的组成部分" class="headerlink" title="JavaScript的组成部分"></a>JavaScript的组成部分</h2><p>标准化后的 JavaScript 包含了 3 个组成部分，如图 1 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210806114220.gif" alt="JavaScript组成部分"><br>图 1：JavaScript 组成部分</p><h4 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1) ECMAScript"></a>1) ECMAScript</h4><ul><li>脚本语言的核心内容，定义了脚本语言的基本语法和基本对象。现在每种浏览器都有对ECMAScript标准的实现。</li></ul><h4 id="2-DOM（Document-Object-Model）"><a href="#2-DOM（Document-Object-Model）" class="headerlink" title="2) DOM（Document Object Model）"></a>2) DOM（Document Object Model）</h4><ul><li>文档对象模型，它是HTML和XML文档的应用程序编程接口。浏览器中的DOM把整个网页规划成由节点层级构成的树状结构的文档。用DOM API可以轻松地删除、添加和替换文档树结构中的节点。</li></ul><h4 id="3-BOM（Browser-Object-Model）"><a href="#3-BOM（Browser-Object-Model）" class="headerlink" title="3) BOM（Browser Object Model）"></a>3) BOM（Browser Object Model）</h4><ul><li>浏览器对象模型，描述了对浏览器窗口进行访问和操作的方法和接口。</li></ul><h2 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h2><ul><li>表单的动态校验（密码强度检测）（js产生的最初目的）</li><li>网页特效</li><li>服务端开发（Node.js)</li><li>桌面程序</li><li>App</li><li>控制硬件-物联网</li><li>游戏开发（cocos2d-js)</li></ul><h2 id="浏览器执行js"><a href="#浏览器执行js" class="headerlink" title="浏览器执行js"></a>浏览器执行js</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>分为两部分<ul><li>渲染引擎：用来解析HTML、CSS俗称内核</li><li>js引擎：也称JS解释器，用来读取网页中的javascript代码，对其处理后运行</li></ul></li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><blockquote><p>浏览器本身并不会执行JS代码，而是通过内置的JS引擎来执行，JS引擎执行代码时逐行进行解释，每一句源码（转换为机器语言）,计算机去执行，Javascript语言归为脚本语言，会逐行解释执行</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;javascript简介&quot;&gt;&lt;a href=&quot;#javascript简介&quot; class=&quot;headerlink&quot; title=&quot;javascript简介&quot;&gt;&lt;/a&gt;javascript简介&lt;/h1&gt;&lt;h2 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap前端开发框架</title>
    <link href="https://codehan045.github.io/posts/c9c4c598.html"/>
    <id>https://codehan045.github.io/posts/c9c4c598.html</id>
    <published>2021-07-27T04:12:16.000Z</published>
    <updated>2021-08-04T11:09:28.099Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="Bootstrap前端开发框架"><a href="#Bootstrap前端开发框架" class="headerlink" title="Bootstrap前端开发框架"></a>Bootstrap前端开发框架</h1><h2 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h2><ul><li><p>Bootstrap来自Twitter，是基于HTML、CSS和 JAVASCRIPT的，简洁灵活。使Web开发更加快捷。</p></li><li><p>中文官网：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a></p></li><li><p>框架：一套架构，有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件，使用者要按照框架所规定的某种规范进行开发。</p></li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>提高开发效率</li></ul><h2 id="Bootstrap使用"><a href="#Bootstrap使用" class="headerlink" title="Bootstrap使用"></a>Bootstrap使用</h2><ol><li><p>创建文件夹结构</p></li><li><p>创建html骨架结构</p></li><li><p>引入相关样式文件</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bootstrap/css/bootstrap.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bootstrap/js/JQuery2.1.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>书写内容</p></li><li><p>检查修改样式</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;Bootstrap前端开发框架&quot;&gt;&lt;a href=&quot;#Bootstrap前端开发框架&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap前端开发框架&quot;&gt;&lt;/a&gt;Bootstrap前端开发框架&lt;/h1&gt;&lt;h2 id=&quot;Boot</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less基本使用</title>
    <link href="https://codehan045.github.io/posts/614a8be5.html"/>
    <id>https://codehan045.github.io/posts/614a8be5.html</id>
    <published>2021-07-27T04:05:54.000Z</published>
    <updated>2021-07-27T04:55:50.321Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="Less基础"><a href="#Less基础" class="headerlink" title="Less基础"></a>Less基础</h1><h4 id="维护CSS的弊端"><a href="#维护CSS的弊端" class="headerlink" title="维护CSS的弊端"></a>维护CSS的弊端</h4><ul><li>css是一门非编程式语言，没有变量、函数、SCOPE(作用域) 等概念</li><li>css需要书写大量看似没有逻辑的代码，冗余度较高</li><li>不方便维护及扩展，不利于复用</li><li>css没有很好的计算能力</li></ul><h4 id="less-介绍"><a href="#less-介绍" class="headerlink" title="less 介绍"></a>less 介绍</h4><ul><li>Less(Leaner Style Sheets) 是一门CSS扩展语言，成为CSS的预处理器</li><li>在CSS语法基础上，引入了变量，运算以及函数等功能，简化了CSS的编写，降低了CSS的维护成本，写的更少，做的更多</li><li>Less中文网址：<a href="http://lesscss.cn/">http://lesscss.cn</a></li><li>常见的CSS预处理器：Sass、Less、Stylus</li></ul><h4 id="Less使用"><a href="#Less使用" class="headerlink" title="Less使用"></a>Less使用</h4><blockquote><p>创建后缀名为less的文件，在这个文件里面书写less语句</p></blockquote><ul><li><p>less变量</p><ul><li><p>语法:</p><pre class=" language-less"><code class="language-less">@变量名<span class="token punctuation">:</span>值<span class="token punctuation">;</span></code></pre></li><li><p>变量命名规范</p><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul></li></ul></li></ul><h4 id="Less的编译"><a href="#Less的编译" class="headerlink" title="Less的编译"></a>Less的编译</h4><ul><li>使用Vscode Less插件—&gt;Easy LESS,安装完之后,重新加载下vscode</li><li>只要保存以下less文件,会自动生成CSS文件</li></ul><h4 id="Less嵌套"><a href="#Less嵌套" class="headerlink" title="Less嵌套"></a>Less嵌套</h4><ul><li>子元素的样式直接写到父元素里面</li><li>伪类选择器,伪元素选择器,需要在前面添加 &amp;</li><li>内层选择器的前面没有 &amp; 符号,则它被解析为 父选择器的后代</li><li>若有 &amp; 符号,它就被解析为父元素自身或父元素的伪类</li></ul><h4 id="Less运算"><a href="#Less运算" class="headerlink" title="Less运算"></a>Less运算</h4><ul><li><p>Less提供了加 减  乘 除 算术运算</p><pre class=" language-css"><code class="language-css">less 里面写<span class="token atrule"><span class="token rule">@width</span> <span class="token punctuation">:</span> 10px + 5<span class="token punctuation">;</span></span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token atrule"><span class="token rule">@width</span> solid red<span class="token punctuation">;</span></span><span class="token punctuation">}</span><span class="token selector">生成的cssdiv </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">15</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>less甚至还可以这样<span class="token property">width</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@width</span> + 5<span class="token punctuation">)</span> * 2<span class="token punctuation">;</span></span></code></pre><blockquote><p>注:</p><ol><li><p>运算符的左右两侧必须有一个空格隔开</p><ol start="2"><li>两个数参与运算,如果只有一个数有单位,则最后的结果就以这个单位为准</li></ol></li><li><p>两个数参与运算,如果2个数都有单位,而且不一样的单位,最后的结果以第一个单位为准</p></li></ol></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;Less基础&quot;&gt;&lt;a href=&quot;#Less基础&quot; class=&quot;headerlink&quot; title=&quot;Less基础&quot;&gt;&lt;/a&gt;Less基础&lt;/h1&gt;&lt;h4 id=&quot;维护CSS的弊端&quot;&gt;&lt;a href=&quot;#维护CSS的弊端&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="less" scheme="https://codehan045.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>移动端布局</title>
    <link href="https://codehan045.github.io/posts/ea92cade.html"/>
    <id>https://codehan045.github.io/posts/ea92cade.html</id>
    <published>2021-07-25T08:08:38.000Z</published>
    <updated>2021-08-30T03:09:00.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h1><h2 id="移动端技术选型"><a href="#移动端技术选型" class="headerlink" title="移动端技术选型"></a>移动端技术选型</h2><h3 id="单独制作移动端页面（主流）"><a href="#单独制作移动端页面（主流）" class="headerlink" title="单独制作移动端页面（主流）"></a>单独制作移动端页面（主流）</h3><ul><li>流式布局（百分比布局）</li><li>flex弹性布局</li><li>less+rem+媒体查询</li><li>混合布局</li><li>好处<ul><li>移动端有良好的用户体验</li></ul></li><li>缺点<ul><li>pc端和移动端代码是单独，代码量极大</li></ul></li></ul><h3 id="响应式页面兼容移动端（其次）"><a href="#响应式页面兼容移动端（其次）" class="headerlink" title="响应式页面兼容移动端（其次）"></a>响应式页面兼容移动端（其次）</h3><ul><li>媒体查询</li><li>bootstarp</li></ul><blockquote><p>选择布局方式：页面布局相对比较简单，pc端和移动端布局差异性比较小，可以使用响应式布局，页面布局复杂，pc端和移动端布局没有联系，就使用移动端布局。</p></blockquote><h2 id="流式布局（百分比布局）"><a href="#流式布局（百分比布局）" class="headerlink" title="流式布局（百分比布局）"></a>流式布局（百分比布局）</h2><ul><li>流式布局，就是百分比布局，也称非固定像素布局</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li><li>更多用于移动端，移动端的屏幕大小都有差异，为了网页能够适配不同的屏幕，让正常显示</li><li>好处:<ul><li>对不同的屏幕有一定的适应性</li></ul></li><li>缺点：<ul><li>当屏幕宽度足够小，导致内容无法查看</li></ul></li></ul><h2 id="弹性布局flex-弹性盒模型"><a href="#弹性布局flex-弹性盒模型" class="headerlink" title="弹性布局flex(弹性盒模型)"></a>弹性布局flex(弹性盒模型)</h2><ul><li>详情可在web前端分类中的弹性盒模型中查看(弹性盒模型) 请点击–&gt;<a href="https://codehan0417.github.io/posts/807df34f.html">弹性盒模型flex</a></li></ul><h2 id="rem-媒体查询-less"><a href="#rem-媒体查询-less" class="headerlink" title="rem+媒体查询+less"></a>rem+媒体查询+less</h2><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>   百分比： 可将属性值设置为相对于其父元素属性的百分比</p><p>   设置百分比，可以使子元素跟随父元素改变而改变</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><ul><li><p>是相对于父元素的字体大小来计算的</p></li><li><p>1 em= 1*font-size(父元素的)</p></li><li><p>em会根据字体大小的改变而改变</p></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><ul><li>rem是相对于根元素<code>html</code>元素的字体大小来计算</li><li>应用：可以通过修改html里面的文字大小来改变页面中元素的大小，可以整体控制</li></ul><h3 id="媒体查询（Media-Query"><a href="#媒体查询（Media-Query" class="headerlink" title="媒体查询（Media Query)"></a>媒体查询（Media Query)</h3><ul><li>媒体：在网页中媒体指的是各种设备，比如：电视、手机、电脑、打印机等等</li><li>查询：检测当前的屏幕属于哪种设备，以及属于哪种类型，根据这些信息我们采用对应的css代码，能够实现在不同 的屏幕上有不同的用户体验（页面效果）</li></ul><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>使用<code>@media</code>查询,可以针对不同的媒体类型定义不同的样式</li><li><code>@media</code>可以针对不同的屏幕尺寸设置不同的样式</li><li>重置浏览器页面大小的过程中，页面也会根据浏览器的宽度和高度 重新渲染页面</li><li>一般按照从小到大的顺序来 </li></ul><h4 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h4><h5 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h5><ul><li>当样式比较繁多时，可以针对不同的媒体使用不同的 stylesheets（样式表)</li><li>原理： 直接在link中判断设备的尺寸，然后引入不同的css文件</li></ul><h5 id="语法规范-1"><a href="#语法规范-1" class="headerlink" title="语法规范"></a>语法规范</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mediatype  and|not|only   (media feature)<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystylesheet.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h5 id="css编写"><a href="#css编写" class="headerlink" title="css编写"></a>css编写</h5><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> 媒体类型</span><span class="token punctuation">{</span>    <span class="token selector">选择器</span><span class="token punctuation">{</span>        css代码    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>用<code>@media</code>开头，注意@符号</li></ul><h4 id="mdiatype-媒体类型-查询类型"><a href="#mdiatype-媒体类型-查询类型" class="headerlink" title="mdiatype 媒体类型(查询类型)"></a><code>mdiatype</code> 媒体类型(查询类型)</h4><ul><li><code>all</code>：用于所有设备</li><li><code>print</code> 用于打印机和打印预览</li><li><code>screen</code> 用于电脑屏幕，平板电脑，智能手机等</li></ul><table><thead><tr><th align="center">值</th><th align="center">设备类型</th></tr></thead><tbody><tr><td align="center">All</td><td align="center">所有设备</td></tr><tr><td align="center">Print</td><td align="center">打印设备</td></tr><tr><td align="center">Screen</td><td align="center">电脑显示器，彩色屏幕</td></tr><tr><td align="center">Braille</td><td align="center">盲人用点字法触觉回馈设备</td></tr><tr><td align="center">Embossed</td><td align="center">盲文打印机</td></tr><tr><td align="center">Handhelp</td><td align="center">便携设备</td></tr><tr><td align="center">Projection</td><td align="center">投影设备</td></tr><tr><td align="center">Speech</td><td align="center">语音或者音频合成器</td></tr><tr><td align="center">Tv</td><td align="center">电视类型设备</td></tr><tr><td align="center">Try</td><td align="center">电传打印机或者终端</td></tr></tbody></table><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字 :"></a>关键字 :</h4><blockquote><p>将媒体类型或多个媒体特性连接到一起作为媒体查询的条件</p></blockquote><ul><li><p><code>and</code> ：可以将多个媒体特性连接到一起，相当于 ‘ 且 ‘ 的意思</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>,</code>：代表或者的意思，即满足逗号前后任意一个条件即可</p><ul><li>注意：逗号前后的媒体类型是独立的</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* , 代表或者的意思 */</span><span class="token comment" spellcheck="true">/* ,前后的设备类型是相互独立 */</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span>, print and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li><li><p><code>not</code> ：排除某个媒体特性，相当于  ‘非’ 的意思，可以省略</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* not 代表非，不是的意思 ，否定的是媒体的特性*/</span><span class="token atrule"><span class="token rule">@media</span> not screen  and  <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span>320px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li><li><p><code>only</code> ：指定某个特定的媒体类型</p><ul><li>代表唯一，这个条件放在媒体类型的前面，就是一种修饰的作用，强调</li><li>only在老版本的浏览器，可以用于选择特殊的一些版本，某些浏览器不支持媒体查询，用only排除</li></ul></li></ul><h4 id="media-feature-媒体特性，必须有小括号包含"><a href="#media-feature-媒体特性，必须有小括号包含" class="headerlink" title="media feature 媒体特性，必须有小括号包含"></a><code>media feature</code> 媒体特性，必须有小括号包含</h4><ul><li>概念：媒体特性是指媒体设备的特性，用来描述设备的特点，比如：设备的宽度、高度</li><li>我们可以利用媒体特点来区分pc端还是移动端</li></ul><table><thead><tr><th align="center"><strong>值</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">width</td><td align="center">网页显示区域完全等于设备的宽度</td></tr><tr><td align="center">height</td><td align="center">网页显示区域完全等于设备的高度</td></tr><tr><td align="center">max-width</td><td align="center">网页显示区域小于等于设备宽度</td></tr><tr><td align="center">max-height</td><td align="center">网页显示区域小于等于设备高度</td></tr><tr><td align="center">min-width</td><td align="center">网页显示区域大于等于设备的宽度</td></tr><tr><td align="center">min-height</td><td align="center">网页显示区域大于等于设备的高度</td></tr><tr><td align="center">orientation</td><td align="center">portrait (竖屏模式) | landscape (横屏模式)</td></tr></tbody></table><h3 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h3><ol><li>让一些不能自适应的元素,达到当设备尺寸发生变化时,等比例适配当前设备</li><li>使用媒体查询根据不同的设备按比例设置html的字体大小,然后页面元素使用rem做单位,当html字体大小变化,元素尺寸也会发生变化,从而达到等比缩放的适配</li></ol><h4 id="rem适配方案-元素大小的取值"><a href="#rem适配方案-元素大小的取值" class="headerlink" title="rem适配方案-元素大小的取值"></a>rem适配方案-元素大小的取值</h4><ol><li>公式:页面元素的rem值=页面元素值(px)/(屏幕宽度/划分的份数)</li><li>屏幕宽度/划分的份数,就是html font-size 的大小</li><li>或是:页面元素的rem值=页面元素值(px)/html font-size 字体大小</li></ol><h4 id="选取步骤"><a href="#选取步骤" class="headerlink" title="选取步骤"></a>选取步骤</h4><ol><li>首先,选取一套标准尺寸   一般以750为准</li><li>用屏幕尺寸除以我们划分的份数,得到了html里文字的大小,不同屏幕下得到的文字大小是不一样的</li><li>页面元素的rem值=页面元素在 750像素下的px值 除以  html 里面的文字大小</li></ol><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li><p>原理：利用媒体查询，实现当使用不同的设备时可以采用不同的css样式，即一套代码，多端使用，同时保证无论哪种设备进行访问时，都有良好的用户体验</p><table><thead><tr><th>设备划分</th><th>尺寸区间</th><th>响应式尺寸设置</th></tr></thead><tbody><tr><td>超小屏幕(手机)</td><td>&lt;768px</td><td>宽度为100%</td></tr><tr><td>小屏设备(平板)</td><td>&gt;=768px~ &lt;992px</td><td>宽度为750px</td></tr><tr><td>中等屏幕（桌面显示器）</td><td>&gt;=992px~&lt;1200px</td><td>宽度为970px</td></tr><tr><td>宽屏设备(大桌面显示器)</td><td>&gt;=1200px</td><td>宽度为1170px</td></tr></tbody></table><ul><li>好处<ul><li>支持不同的屏幕，有很好的适应性</li><li>良好的用户体验</li></ul></li><li>缺点：<ul><li>大量的css代码，开发难度比较大，维护性下降</li></ul></li></ul></li></ul><h3 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h3><ul><li>响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果</li><li>原理：在不同屏幕下，通过媒体查询来改变布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端布局&quot;&gt;&lt;a href=&quot;#移动端布局&quot; class=&quot;headerlink&quot; title=&quot;移动端布局&quot;&gt;&lt;/a&gt;移动端布局&lt;/h1&gt;&lt;h2 id=&quot;移动端技术选型&quot;&gt;&lt;a href=&quot;#移动端技术选型&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="移动端layout" scheme="https://codehan045.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AFlayout/"/>
    
  </entry>
  
  <entry>
    <title>sass概述</title>
    <link href="https://codehan045.github.io/posts/3d54f335.html"/>
    <id>https://codehan045.github.io/posts/3d54f335.html</id>
    <published>2021-07-22T11:34:19.000Z</published>
    <updated>2021-07-22T15:39:41.277Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h1><h2 id="原生css的不便"><a href="#原生css的不便" class="headerlink" title="原生css的不便"></a>原生css的不便</h2><ul><li>书写重复的选择器</li><li>修改css样式，不能达到一处改处处改</li><li>css书写重复</li><li>结构不明确</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>sass是一个css预处理器，可以为网站启用可定义、可管理和可重用的样式表。sass是一个动态样式表语言，扩展了css的功能。<ul><li>css预处理是一种脚本语言，可扩展css并将其编译为常规css语法，以便浏览器读取。</li><li>sass提供了嵌套、变量、数学运算、混合、循环等等，为了提高css代码的编写的效率</li></ul></li><li>目标：能够极大提高编写css代码的速率，提高开发速率</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="使用vscode-中的easy-sass插件来使用"><a href="#使用vscode-中的easy-sass插件来使用" class="headerlink" title="使用vscode 中的easy sass插件来使用"></a>使用vscode 中的<code>easy sass</code>插件来使用</h3><ul><li>利用vscode按照easy sass插件（支持将sass文件编译为css文件）</li><li>新建以<code>.scss</code>或者<code>.sass</code>为后缀名的文件，在里面书写sass代码<ul><li><code>.sass</code>是旧版本的sass文件格式</li><li><code>.scss</code>是新版本的sass文件格式</li></ul></li><li>easy sass插件可以将编写好的sass文件自动转为css文件，在页面中直接引入css文件即可</li></ul><h4 id="手动自动编译的css文件的文件保存路径"><a href="#手动自动编译的css文件的文件保存路径" class="headerlink" title="手动自动编译的css文件的文件保存路径"></a>手动自动编译的css文件的文件保存路径</h4><ul><li><p>设置——easy sass——target DIr更改路径</p></li><li><p>注意：路径是配置在vscode中，所以是从工作区出发</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210722171828.png" alt="image-20210722171821565"></p></li></ul><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><ul><li><p>sass支持选择器里面嵌套子选择器</p></li><li><p>作用：让css代码层级结构清晰明了，不会出现父子标签之间的权重问题。</p></li><li><p>语法：</p><pre class=" language-scss"><code class="language-scss"><span class="token selector">父选择器</span><span class="token punctuation">{</span>    <span class="token selector">css代码；    子选择器</span><span class="token punctuation">{</span>        css代码；    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">例子：header</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token selector">nav</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token selector">ul</span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token selector">>li</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// &amp;代表父选择器</span>                <span class="token selector"><span class="token parent important">&amp;</span>:hover</span><span class="token punctuation">{</span>                    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token selector"><span class="token parent important">&amp;</span>::before</span><span class="token punctuation">{</span>                    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token selector"><span class="token parent important">&amp;</span>::after</span><span class="token punctuation">{</span>                    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"after"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token selector">+div</span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">~div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">编译后的css代码：header </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li:hover </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li::before </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li::after </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"after"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul + div </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul ~ div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量可以看作一个容器，存放一些数据，可以在代码中重复使用</p></li><li><p>变量需要先定义，再使用</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css">定义变量$变量名<span class="token punctuation">:</span>  变量值；</code></pre><ul><li>变量值可以是css属性的属性值，比如：100px，red， 还可以是复合属性的属性值：1px solid red</li><li>变量的命名<ul><li>变量名可以包含数字、字母、_和-</li><li>不能以数字开头，不能包含特殊符号</li><li>多个单词之间尽量使用-连接</li></ul></li></ul></li><li><p>注意：</p><ul><li>一般在文件开始部分定义变量，那么文件任意位置都可以使用</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;SASS&quot;&gt;&lt;a href=&quot;#SASS&quot; class=&quot;headerlink&quot; title=&quot;SASS&quot;&gt;&lt;/a&gt;SASS&lt;/h1&gt;&lt;h2 id=&quot;原生css的不便&quot;&gt;&lt;a href=&quot;#原生css的不便&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="sass" scheme="https://codehan045.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>CSS3基础</title>
    <link href="https://codehan045.github.io/posts/ee3be2f.html"/>
    <id>https://codehan045.github.io/posts/ee3be2f.html</id>
    <published>2021-07-21T04:41:16.000Z</published>
    <updated>2021-07-22T15:39:41.271Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="CSS3基础"><a href="#CSS3基础" class="headerlink" title="CSS3基础"></a>CSS3基础</h1><h2 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h2><ul><li><p>像规则的渐变，可以使用1px的渐变背景平铺，像不规则的渐变背景，只能裁剪为一张图片。通过图片来实现渐变，维护性比较低，影响网页的加载速度。</p></li><li><p>CSS 3 提出了背景的渐变：线性渐变和径向渐变</p></li><li><p>渐变背景可以看作一个“图像”，使用属性background-image或简写 background。</p></li></ul><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><ul><li><p>概念:线性渐变就是沿着一条直线进行颜色的渐变。</p></li><li><p>注意：渐变至少有两个颜色</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token function">linear-gradient</span><span class="token punctuation">(</span>渐变方向 , 颜色<span class="token number">1</span>  位置，颜色<span class="token number">2</span>  位置，   颜色<span class="token number">3</span>   位置<span class="token punctuation">)</span>；</code></pre></li><li><p>渐变方向</p><ul><li><p>to  方位单词    </p><ul><li>to  left ——&gt;-90deg 或者270deg</li><li>to top——0deg </li><li>to  right——90deg或者 -270deg</li><li>to  bottom  —— 180deg或者-180deg</li><li>to  top  left——   -45deg或者315deg</li><li>to  top right ——  45deg或者 -315deg</li><li>to  bottom left ——   -135deg或者225deg</li><li>to bottom right ——  135deg或  -225deg</li></ul></li><li><p>角度：必须带deg单位，0deg的方向是垂直向上，顺时针是正方向，逆时针是负方向</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720105842.png" alt="image-20210720105842728"></p></li></ul></li><li><p>色标：是由一个颜色和一个位置构成，色标可以写多个</p><p>颜色：单词、#十六进制 、rgb、rgba</p><p>位置：百分比，像素</p><ul><li><p>只设置颜色，渐变默认是均匀渐变</p></li><li><p>如果首尾的颜色不在0%或者100%，那么默认是首尾颜色的纯色</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*0%~20%是red，20%~40%是红到绿的渐变，40%~80%是绿色到粉色的渐变，80%~100%是粉色 */</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red <span class="token number">20%</span>,green <span class="token number">40%</span>,pink <span class="token number">80%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>如果两个颜色的位置相同，那么中间渐变的范围为0 ，就会出现断层的效果</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red <span class="token number">20%</span>,green <span class="token number">20%</span>,pink <span class="token number">80%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h3><ul><li><p>将线性渐变重复铺设，使用<code>repeating-linear-gradient</code></p></li><li><p>注意：只有首尾不在0%或者100%时，重复线性渐变才有效</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>pink <span class="token number">0</span>px, pink <span class="token number">20</span>px,yellow <span class="token number">20</span>px ,yellow <span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><ul><li><p>概念：径向渐变就是椭圆渐变，渐变是沿着椭圆的半径径向渐变，圆其实是一种特殊椭圆</p></li><li><p>分为两部分：</p><ul><li>椭圆：用来控制径向渐变的位置、大小、形状等</li><li>色标：是由一个颜色和一个位置构成，用来控制渐变颜色变化</li></ul></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token function">radial-gradient</span><span class="token punctuation">(</span>大小  形状  at  x轴  y轴,   颜色<span class="token number">1</span>  位置，颜色<span class="token number">2</span>   位置，颜色<span class="token number">3</span>  位置 <span class="token number">...</span><span class="token punctuation">)</span>；</code></pre></li><li><p>大小</p><ul><li><code>farthest-corner</code>：默认值，半径是圆心到最远角</li><li><code>farthest-side</code>：半径是圆心到最远边</li><li><code>closest-corner</code>：半径是圆心到最近角</li><li><code>closest-side</code>：半径是圆心到最近的边</li></ul></li><li><p>形状：</p><ul><li><code>ellipse</code>：椭圆 默认值</li><li><code>circle</code>：正圆</li></ul></li><li><p>圆心：at x轴  y轴  可以控制径向渐变位置，默认圆心在盒子的中心点，center center</p><ul><li>单词：left  right  center top  bottom 两两搭配使用</li><li>像素</li><li>百分比：参考的盒子的宽和高  50% 50%相当于center center</li></ul></li></ul><h3 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h3><ul><li><p>将径向渐变重复铺设</p></li><li><p>注意：只有首尾不再0%或100%时，重复径向渐变才有效</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">repeating-radial-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#ccc</span> <span class="token number">0</span>px,<span class="token hexcode">#ccc</span> <span class="token number">5</span>px, <span class="token hexcode">#666</span> <span class="token number">5</span>px, <span class="token hexcode">#666</span> <span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="圆角原理"><a href="#圆角原理" class="headerlink" title="圆角原理"></a>圆角原理</h2><ul><li><p>盒子默认四个角都是直角，通过border-radius设置圆角的效果</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css">分别设置四个角的圆角border-top-left-radiusborder-top-right-radiusborder-bottom-left-radiusborder-bottom-right-radius复合属性border-radius一个值：四个角同时设置两个值：左上右下   右上左下三个值：左上   右上左下   右下四个值：左上   右上   右下  左下八个值：<span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px / <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>注意<span class="token punctuation">:</span> /前面代表每个角的水平半径，/后面代表每个角的垂直半径</code></pre></li><li><p>圆角的形成：取一个椭圆或者正圆的一段圆弧</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720152629.png" alt="image-20210720152629470"></p></li><li><p>如果垂直半径和水平半径相等，取的时正圆的圆弧，如果水平半径和垂直半径不等，取的是椭圆的圆弧。</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720152714.png" alt="image-20210720152714872"></p></li></ul><h3 id="内半径和外半径"><a href="#内半径和外半径" class="headerlink" title="内半径和外半径"></a>内半径和外半径</h3><ul><li>当边框的足够宽时，设置的border-radius大于边框的宽度，边框外层的圆角是外半径的形成，边框内部的圆角是内半径形成</li><li>内半径=外半径  - 边框的厚度</li><li>注意：当border-radius的大小小于边框时，内半径为负，不能渲染，默认为0，当border-radius（外半径）大于边框时，内半径为正，边框内部采用圆角的效果</li></ul><p>应用场景：</p><ol><li>绘制正圆：盒子的宽高相等，设置border-radius：50%</li><li>绘制胶囊状：设置border-radius为短边的一半</li></ol><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><ul><li><p>使用<code>box-shadow</code>给盒子添加阴影</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色；虚化程度和阴影大小可以不写<span class="token property">box-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴偏移量   颜色；将外部阴影转为内部阴影<span class="token property">box-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色  inset；可以设置多层的阴影，中间使用逗号隔开box-shadow：x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色，x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色，x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色；</code></pre></li><li><p><code>box-shadow:20px 10px 20px  12px black ;</code></p><ul><li>第一个值：水平偏移量，设置阴影的水平位置，正值向右移动，负值向左移动</li><li>第二个值：垂直偏移量，设置阴影的垂直位置，正值向下移动，负值向上移动</li><li>第三个值：阴影的模糊半径，虚化程度  可省略</li><li>第四个值：阴影的大小 可省略</li><li>第五个值：阴影的颜色</li></ul></li><li><p>外部阴影(默认值)/内部阴影(inset在属性值最后添加)</p></li><li><p>多层阴影，之间使用逗号隔开</p></li></ul><h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><ul><li><p><code>text-shadow</code>给文本添加阴影</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴的偏移量  虚化程度  颜色；</code></pre></li></ul><h2 id="结构选择器"><a href="#结构选择器" class="headerlink" title="结构选择器"></a>结构选择器</h2><ul><li>根据html代码结构找到对应的标签，也是伪类选择器</li></ul><h3 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a>:first-child</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个元素里面的第一个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中的所有class名为box的标签里面所有的后代p标签，并且这个p标签必须是某个标签的第一个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个标签的倒数第一个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中的所有class名为box的标签里面所有的后代p标签，并且这个p标签必须是某个标签的最后一个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="nth-child-n"><a href="#nth-child-n" class="headerlink" title=":nth-child(n)"></a>:nth-child(n)</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个标签的第n个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，并且这个p标签是某个标签第n个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-child(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>找到偶数行的子标签：  <code>:nth-child(2n)</code>/  <code>:nth-child(even)</code></p></li><li><p>找到奇数行的子标签：<code>:nth-child(2n-1)</code>或<code>:nth-child(2n+1)</code>/  <code>:nth-child(odd)</code></p></li></ul><h3 id="nth-last-child-n"><a href="#nth-last-child-n" class="headerlink" title=":nth-last-child(n)"></a>:nth-last-child(n)</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个标签的倒数第n个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，并且这个p标签是某个标签倒数第n个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-last-child(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="nth-of-type-n"><a href="#nth-of-type-n" class="headerlink" title=":nth-of-type(n)"></a>:nth-of-type(n)</h3><ul><li><p>找到满足条件的标签，将标签筛选出来，重新排序，找到其中的第n个标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，将p标签按照代码顺序重新排序，找到其中的第n个标签 */</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-of-type(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="nth-last-of-type-n"><a href="#nth-last-of-type-n" class="headerlink" title=":nth-last-of-type(n)"></a>:nth-last-of-type(n)</h3><ul><li><p>找到满足条件的标签，将标签筛选出来，重新排序，找到其中的倒数第n个标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，将p标签按照代码顺序重新排序，找到其中的倒数第n个标签 */</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-last-of-type(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="CSS3滤镜filter（了解）"><a href="#CSS3滤镜filter（了解）" class="headerlink" title="CSS3滤镜filter（了解）"></a>CSS3滤镜filter（了解）</h3><ul><li><p><code>filter</code> CSS属性将模糊或颜色偏移等图形效果应用于元素。</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"> <span class="token property">filter</span><span class="token punctuation">:</span> 函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*例如：*/</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> blur模糊处理 数值越大越模糊</code></pre></li></ul><h3 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h3><ul><li><p>此CSS函数让你在声明CSS属性值时执行一些计算。</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> 括号里面可以使用 + - * / 来进行计算。</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;CSS3基础&quot;&gt;&lt;a href=&quot;#CSS3基础&quot; class=&quot;headerlink&quot; title=&quot;CSS3基础&quot;&gt;&lt;/a&gt;CSS3基础&lt;/h1&gt;&lt;h2 id=&quot;渐变背景&quot;&gt;&lt;a href=&quot;#渐变背景&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS3" scheme="https://codehan045.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>H5标签</title>
    <link href="https://codehan045.github.io/posts/3e68ff45.html"/>
    <id>https://codehan045.github.io/posts/3e68ff45.html</id>
    <published>2021-07-20T14:33:16.000Z</published>
    <updated>2021-07-24T02:35:55.015Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h2 id="HTML5-新增的语义化标签"><a href="#HTML5-新增的语义化标签" class="headerlink" title="HTML5 新增的语义化标签"></a>HTML5 新增的语义化标签</h2><h3 id="语义化标签的好处"><a href="#语义化标签的好处" class="headerlink" title="语义化标签的好处"></a>语义化标签的好处</h3><ol><li>易于用户阅读，样式丢失的时候让页面结构更加清晰</li><li>有利于SEO，搜索引擎根据标签确定上下文和各个关键字的权重</li><li>方便其他设备的解析，如盲人阅读器</li><li>有利于开发和维护，语义化标签具有可读性，代码更好维护</li></ol><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><ul><li><p>在之前的布局中，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“header”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“nav”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“content”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“footer”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>&lt;header&gt;</code>：头部标签</p></li><li><p><code>&lt;main&gt;</code>:网页的主体部分，内容区域，页面上有且仅有一个标签</p></li><li><p> <code>&lt;nav&gt;</code>：导航标签</p></li><li><p><code>&lt;article&gt;</code>：内容标签</p></li><li><p><code>&lt;section&gt;</code>：定义文档某个区域</p></li><li><p> <code>&lt;aside&gt;</code>：侧边栏标签</p></li><li><p> <code>&lt;footer&gt;</code>：尾部标签</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210722194703.png"></p><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><ul><li>H5媒体标签，早期通过flash技术来引入</li></ul><h4 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签 audio"></a>音频标签 audio</h4><ul><li><p>用于引入音频文件</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html">写法一:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file/music.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">muted</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span>写法二：<span class="token comment" spellcheck="true">&lt;!-- 可以连接多种不同的音频文件格式，可以避免浏览器对音频的兼容问题 --></span> &lt; audio controls="controls" >     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span><span class="token punctuation">></span></span> 标签。 &lt;/ audio></code></pre><ul><li><code>src</code>：连接音频的文件</li><li><code>controls</code>：这是一个控制器，可以控制音频的播放等等</li><li><code>muted</code>：静音播放</li><li><code>autoplay</code>：自动播放</li><li><code>loop</code>：循环播放</li></ul></li></ul><h4 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签 video"></a>视频标签 video</h4><ul><li><p>用于网页中视频文件的引入</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html">写法一：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file/play.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>写法二：<span class="token comment" spellcheck="true">&lt;!-- 引入多种不同的视频文件格式，避免浏览器兼容性问题 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span> 标签播放视频 &lt;/ video ></code></pre></li><li><p>属性：</p><ul><li><code>src</code>：连接视频的文件</li><li><code>controls</code>：这是一个控制器，可以控制视频的播放、快进等等</li><li><code>muted</code>：静音播放</li><li><code>autoplay</code>：自动播放（谷歌浏览器需要添加muted来解决自动播放的问题）</li><li><code>loop</code>：循环播放</li><li><code>poster</code>：加载等待的画面图片</li></ul><p>学习js的时候，我们可以自己开发视频播放器、弹幕、快进、播放暂停等等</p></li></ul><h4 id="多媒体标签总结"><a href="#多媒体标签总结" class="headerlink" title="多媒体标签总结"></a>多媒体标签总结</h4><ul><li>音频标签和视频标签使用方式基本一致</li><li>浏览器支持情况不同</li><li>谷歌浏览器把音频和视频自动播放禁止了</li><li> 我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li><li> 视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li></ul><h3 id="语义化标签的使用"><a href="#语义化标签的使用" class="headerlink" title="语义化标签的使用"></a>语义化标签的使用</h3><table><thead><tr><th>标签名</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;header&gt;</code></td><td>代表网页的头部</td></tr><tr><td><code>&lt;main&gt;</code></td><td>网页的主体部分，内容区域，页面上有且仅有一个标签</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>代表导航</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>代表网页的尾部</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>代表侧边栏</td></tr><tr><td><code>&lt;article&gt;</code></td><td>代表网页中一个独立区域，一般方内容</td></tr><tr><td><code>&lt;section&gt;</code></td><td>代表网页中一个模块，理解为平时的div</td></tr><tr><td><code>&lt;audio&gt;</code></td><td>音频</td></tr><tr><td><code>&lt;video&gt;</code></td><td>视频</td></tr><tr><td><code>&lt;source&gt;</code></td><td>资源标签，用于连接多媒体资源</td></tr><tr><td><code>&lt;thead&gt;</code></td><td>表格的头部</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td>表格的内容</td></tr><tr><td><code>&lt;tfoot&gt;</code></td><td>表格的尾部</td></tr><tr><td><code>&lt;canvas&gt;</code></td><td>定义图形</td></tr></tbody></table><ul><li>section：表示网页中一个模块，作用类似div，如果内容可以分为几部分，可以使用article，在article里面使用section来表示没部分。</li><li>article：代表是一个独立的区域，区域可以分为多个section</li><li>aside：侧边栏、广告。推荐信息</li></ul><h4 id="标签如何去选择"><a href="#标签如何去选择" class="headerlink" title="标签如何去选择"></a>标签如何去选择</h4><ul><li>最外层标签尽量使用语义化标签</li><li>标题尽量使用标题标签，主要目的是为了seo优化</li><li>对于网页的内容区域，如果重复出现一些模块可以使用section</li><li>具体内容该用什么标签还是用什么标签</li></ul><h2 id="H5新增表单标签"><a href="#H5新增表单标签" class="headerlink" title="H5新增表单标签"></a>H5新增表单标签</h2><ul><li><p>form、input（text）、input（password）、input(radio)、input（checkbox）、select、textarea、按钮（input、button）</p></li><li><p>新增了很多表单标签，新增了功能性的标签。</p></li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>type="email"</code></td><td>提供邮箱格式的验证，以后通过js控制</td></tr><tr><td><code>type="number"</code></td><td>只能输入数字</td></tr><tr><td><code>ype="url"</code></td><td>只能输入http或者https开头的完整的网址</td></tr><tr><td><code>type="color"</code></td><td>提供选取颜色的色块</td></tr><tr><td><code>type="range"</code></td><td>选取范围</td></tr><tr><td><code>type="file" </code></td><td>文件上传，默认文件只能上传一个，设置<code>multiple</code>属性可以上传多个文件</td></tr><tr><td><code>type="date"</code></td><td>选择年/月/日</td></tr><tr><td><code> type="month"</code></td><td>选择某年某月</td></tr><tr><td><code>type="week"</code></td><td>选择某年第几周</td></tr><tr><td><code> type="time"</code></td><td>选择时间</td></tr><tr><td><code>type=search</code></td><td>搜索框</td></tr><tr><td><code>type=tel</code></td><td>手机号</td></tr></tbody></table><h3 id="选项列表-datalist"><a href="#选项列表-datalist" class="headerlink" title="选项列表 datalist"></a>选项列表 datalist</h3><ul><li><p>datalist需要和输入框进行绑定</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datalist的id名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小猪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小猪佩奇<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小猪乔治<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小米手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大米手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span></code></pre><ul><li>通过input框的list属性和datalist的id名进行绑定</li></ul></li></ul><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><ul><li>required：必填项，必须填写才能提交，其内容不能为空</li><li>autofocus：自动获取焦点</li><li>readonly：只读，不能修改内容,可以复制，可以提交给服务器</li><li>disabled：禁用，不能修改内容，可以复制，不能提交给服务器</li><li>autocomplete：值为off/on 当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出字段中填写的选项 ，默认打开 ，值为off关闭</li></ul><p>可以通过以下设置方式修改placeholder里面的字体颜色： <code> input::placeholder { color: pink; }</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h2 id=&quot;HTML5-新增的语义化标签&quot;&gt;&lt;a href=&quot;#HTML5-新增的语义化标签&quot; class=&quot;headerlink&quot; title=&quot;HTML5 新增的语义化标签&quot;&gt;&lt;/a&gt;HTML5 新增的语义化标签&lt;/h2&gt;&lt;h3 id=&quot;语义化标签的好处</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML5" scheme="https://codehan045.github.io/tags/HTML5/"/>
    
  </entry>
  
</feed>
