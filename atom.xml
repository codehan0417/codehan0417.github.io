<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>doNow</title>
  
  <subtitle>smilePosition</subtitle>
  <link href="https://codehan045.github.io/atom.xml" rel="self"/>
  
  <link href="https://codehan045.github.io/"/>
  <updated>2021-11-20T07:37:16.333Z</updated>
  <id>https://codehan045.github.io/</id>
  
  <author>
    <name>时光路人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Express</title>
    <link href="https://codehan045.github.io/posts/d7c881ac.html"/>
    <id>https://codehan045.github.io/posts/d7c881ac.html</id>
    <published>2021-11-19T12:27:11.000Z</published>
    <updated>2021-11-20T07:37:16.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能。</p></blockquote><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><ul><li><p>使用npm下载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express-generator -g     / /-g 全局安装 </code></pre></li></ul><h3 id="利用express完成创建项目并完成初始化"><a href="#利用express完成创建项目并完成初始化" class="headerlink" title="利用express完成创建项目并完成初始化"></a>利用express完成创建项目并完成初始化</h3><ul><li><p>创建express项目</p><pre class=" language-bash"><code class="language-bash">express 项目名称</code></pre></li></ul><h3 id="项目文件架构"><a href="#项目文件架构" class="headerlink" title="项目文件架构"></a>项目文件架构</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── app.js ---整个项目的入口文件，核心文件，该文件负责项目的架构以及项目的配置├── bin   ---- 项目配置信息│   └── www -----项目入口文件，内部用于搭建基于node.js的服务器├── package.json   ---第三方包目录，显示该项目使用了哪些第三方包├── public  ---用于存放前端的静态资源。│   ├── images ---图片│   ├── javascripts  ---js│   └── stylesheets   ---css│       └── style.css├── routes    ---- 负责请求的获取和处理│   ├── index.js│   └── users.js└── views     ----放置HTML页面，一般会放在public中    ├── error.html</code></pre><h3 id="运行初始项目"><a href="#运行初始项目" class="headerlink" title="运行初始项目"></a>运行初始项目</h3><ul><li><p>在app.js中最后一行改为,配置端口信息</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已启动，使用了系统的3000端口'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>安装第三方依赖包</p><pre class=" language-js"><code class="language-js">npm install简写： npm i</code></pre><ul><li>该命令会找到该目录下的package.json并自动安装所需要的第三方库</li></ul></li><li><p>运行项目</p><pre class=" language-js"><code class="language-js">node app<span class="token punctuation">.</span>js</code></pre><blockquote><p>终端必须为项目文件目录下启动</p></blockquote></li><li><p>查看运行效果</p><p>打开浏览器，输入<code>localhost:3000</code> 查看项目的初始页面</p></li><li><p><code>注</code> :当修改了app.js或route中的内容，都需要重新启动服务</p><ul><li>使用<code>ctrl+c</code>停止当前服务器的运行</li><li>使用<code>node app.js</code>重新运行</li></ul></li><li><p>插件： 自动更新启动服务器的插件：<code>nodemon</code></p><ul><li>安装：<code>npm i nodemon</code></li><li>启动：<code>nodemon app.js</code></li></ul></li></ul><h3 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h3><blockquote><p><em>路由</em>是指确定应用程序如何响应客户端对特定端点的请求，即 URI（或路径）和特定的 HTTP 请求方法（GET、POST 等）。每个路由可以有一个或多个处理函数，当路由匹配时执行。</p></blockquote><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">METHOD</span><span class="token punctuation">(</span>PATH<span class="token punctuation">,</span> HANDLER<span class="token punctuation">)</span></code></pre><ul><li><p><code>app</code>是 的一个实例<code>express</code>。</p></li><li><p><code>METHOD</code>是一个<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">HTTP 请求方法</a>，小写。</p></li><li><p><code>PATH</code> 是服务器上的路径。</p></li><li><p><code>HANDLER</code> 是路由匹配时执行的函数。</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="完整的交互"><a href="#完整的交互" class="headerlink" title="完整的交互"></a>完整的交互</h3><ul><li><p>流程：前端发送ajax请求到服务器，服务器通过对应路由(route)来获取请求并根据地址分发到对应的请求处理代码中进行操作。操作后也可以返回数据到前端。</p></li><li><p>前端发送请求</p><ul><li>在<code>/public/html</code>中新建一个HTML页面(使用时需要用到ajax，需要引入jquery)</li></ul><pre class=" language-js"><code class="language-js"> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"/users/login"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//请求路径</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//表示该请求用于提交数据</span>            type<span class="token punctuation">:</span><span class="token string">"post"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>如果不发送数据，那么建议使用<span class="token keyword">get</span>如果要发送数据，那么建议用post</code></pre><ul><li>其中<code>users/login</code>就是发送到后端的地址。后端会通过该地址分发到不同文件中去处理</li></ul></li><li><p><code>app.js</code>文件中可以进行一级路由的配置,其中 <code>app.use('/users', usersRouter)</code>：指定所有以<code>/users</code>开头的路径都交给<code>userRouter</code>去处理。<code>userRouter</code>由该指令<code>var usersRouter = require('./routes/users.js');</code>指向 <code>users.js</code>文件 ，该文件需要进行对<code>/login</code>路径的处理</p><pre class=" language-js"><code class="language-js">文件route<span class="token operator">/</span>users<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//   /users/login</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'这个请求负责登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><blockquote><ul><li>req:一个对象，包含了请求的基本信息。req有一个属性<code>req.body</code>可以获取post请求传递过来的数据</li><li>res:一个对象，负责服务器的发送数据的信息。 res有一个函数<code>res.send(数据)</code>将数据发送到浏览器。针对ajax请求，那么send里的数据发送到ajax里的<code>success(data)</code>的data中</li></ul></blockquote></li><li><p>修改之后重启服务器，查看控制台输出内容,若输出为<code>这个请求负责登录</code>则成功实现</p></li></ul><blockquote><p>服务器上的app.js内书写一级路由.比如前端请求路径为<code>/users/info</code>.其中<code>/users</code>是一级路由，<code>/login</code>为二级路由</p><ul><li>每个一级路由需要再<code>routes</code>文件夹下创建一个js文件，一般同名(比如<code>users.js</code>)，该文件就负责该一级路由下的所有请求处理</li><li>该文件里除了基本代码以外，针对每个二级路由，会专门书写一段代码来处理。比如(<code>/users/login</code>的get请求处理)</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="nodejs" scheme="https://codehan045.github.io/tags/nodejs/"/>
    
    <category term="express" scheme="https://codehan045.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>npm(node包管理器)</title>
    <link href="https://codehan045.github.io/posts/f07c6a66.html"/>
    <id>https://codehan045.github.io/posts/f07c6a66.html</id>
    <published>2021-11-04T12:03:55.000Z</published>
    <updated>2021-11-09T16:13:25.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>npm（node package manage）是nodejs官方所提供的包管理工具。能够管理项目中所使用的所有 第三方库(jquery bootstrap)。可以完成项目中所有第三方库的增删查。</li><li>对于包的理解可以认为一个包就是一个第三方库。比如jQuery就是一个包</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>在安装nodejs时会自动安装npm。nodejs自带的npm不一定是最新的版本。可以通过命令更新npm版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> -g</code></pre><ul><li>-g:表示全局安装，即安装后，任何目录下都可以使用npm。</li></ul></li><li><p>可以通过<code>npm --version</code>来查看npm的版本</p></li></ul><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ul><li><p><code>npm init</code>:初始化项目的包管理环境。初始化之后会生成一个<code>package.json</code>文件，该文件用于记录该项目用了哪些包以及对应的版本。</p><ul><li>在某个目录下，打开终端，执行命令:</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init<span class="token punctuation">;</span></code></pre><ul><li>运行后会有几个选项需要选择，一路回车即可，最后输入y即可完成项目的初始化</li></ul></li><li><p><code>npm list</code>:当前项目已经安装的第三方库(包)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> list<span class="token punctuation">;</span></code></pre></li><li><p><code>npm search 包名字</code>:搜索远程的包仓库中是否有指定的包</p></li><li><p><code>npm install 包名</code>:利用npm安装指定的包，默认安装该包的最新版本.也可以通过<code>@版本号</code>安装指定的版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span>  jquery <span class="token function">npm</span> <span class="token function">install</span> jquery@3.5.1</code></pre></li><li><p><code>npm uninstall 包名</code>:卸载某个包</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall jquery</code></pre></li></ul><h3 id="改变npm所使用的远程仓库地址"><a href="#改变npm所使用的远程仓库地址" class="headerlink" title="改变npm所使用的远程仓库地址"></a>改变npm所使用的远程仓库地址</h3><ul><li>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</li></ul><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm%E6%B7%98%E5%AE%9D%E7%9A%84%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E6%8A%8Anpm%E5%9C%A8%E5%9B%BD%E5%86%85%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%87%E4%BB%BD%EF%BC%89%E3%80%82">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><ul><li>安装淘宝的cnpm：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#在任意目录执行都可以</span><span class="token comment" spellcheck="true">#--global表示安装到全局，而非当前目录</span><span class="token comment" spellcheck="true">#--global不能省略，否则不管用</span><span class="token function">npm</span> <span class="token function">install</span> --global cnpm</code></pre><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#走国外的npm服务器下载jQuery包，速度比较慢</span><span class="token function">npm</span> <span class="token function">install</span> jQuery<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#使用cnpm就会通过淘宝的服务器来下载jQuery</span>cnpm <span class="token function">install</span> jQuery<span class="token punctuation">;</span></code></pre><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> jquery --registry<span class="token operator">=</span>https://npm.taobao.org<span class="token punctuation">;</span></code></pre><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://npm.taobao.org<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看npm配置信息</span><span class="token function">npm</span> config list<span class="token punctuation">;</span></code></pre><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><ul><li><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p></li><li><p>这个文件可以通过<code>npm init</code>自动初始化出来</p></li><li><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p></li><li><p>建议每个项目的根目录下都有一个<code>package.json</code>文件</p></li><li><p>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</p></li></ul><h3 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h3><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li><li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>从文件来看，有一个<code>lock</code>称之为锁<ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="node" scheme="https://codehan045.github.io/tags/node/"/>
    
    <category term="npm" scheme="https://codehan045.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Node.js模块化</title>
    <link href="https://codehan045.github.io/posts/93fac3b6.html"/>
    <id>https://codehan045.github.io/posts/93fac3b6.html</id>
    <published>2021-11-03T15:23:13.000Z</published>
    <updated>2021-11-04T12:02:18.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化的由来"><a href="#模块化的由来" class="headerlink" title="模块化的由来"></a>模块化的由来</h2><ul><li>在团队协作中，经常会不同队员负责不同的文件编写(比如js)，那么如果不同js文件定义了相同的变量，那么如果这些文件都引入在页面中，那么会出问题。-导致了全局变量的污染。</li><li>期望不同的文件之间互不干扰，同时也不会污染到全局变量。—模块化</li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li><li>通俗来讲就是将每一个js文件作为一个单独的模块，如果需要使用另一个js文件，需要使用专门的语法，模块内的内容和变量对于其他模块都是不可见的。</li><li>通信规则<ul><li>加载require</li><li>导出exports</li></ul></li></ul><h2 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h2><blockquote><p>概念：是一个如何实现模块化的规范。规定实现JavaScript模块化应该是什么样子。nodejs根据commonjs实现了一套模块化的语法</p></blockquote><ul><li><code>commonjs</code>和<code>nodejs</code>的关系<ul><li><code>commonjs</code>是模块化的规范，模板。<code>nodejs</code>是<code>commonjs</code>的实现。</li></ul></li></ul><h3 id="common-js模块化内容"><a href="#common-js模块化内容" class="headerlink" title="common.js模块化内容"></a>common.js模块化内容</h3><ul><li><p><code>require</code>：引入,模块的语法。如果需要在一个模块中引入另一个模块,需要使用<code>require</code>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span>  变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"模块的路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>require</code>引入一个模块是指引入模块所暴露出来的内容。并不是模块的全部。</li></ul></li><li><p><code>module</code>：这是每个模块都有的一个变量，指的是模块本身。</p></li><li><p><code>module.exports</code>:一个模块暴露的内容，是一个对象。<code>require</code>语法引入的就这个属性的内容</p></li></ul><blockquote><p>如果一个模块引入的内容比较多，也可以使用解构赋值来优化</p></blockquote><h4 id="module-exports与exports"><a href="#module-exports与exports" class="headerlink" title="module.exports与exports"></a><code>module.exports</code>与<code>exports</code></h4><ul><li><p><code>exports</code> 是<code> module.exports</code> 的引用</p></li><li><p>注意：给 <code>module.exports</code> 赋值会切断与 <code>exports</code> 之间的联系   </p><ol><li><p>直接添加属性两者皆可。</p></li><li><p>赋值操作时，只能使用 <code>module.exports</code></p></li></ol></li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> module<span class="token punctuation">.</span>exports <span class="token operator">===</span> exports <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ==> true</span> <span class="token comment" spellcheck="true">// 等价操作</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">123</span>exports<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">// 赋值操作：不要使用 exports = {}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="模块路径"><a href="#模块路径" class="headerlink" title="模块路径"></a>模块路径</h3><ul><li><p>相对路径：以该模块的本身所在目录为出发点</p><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./子目录名/'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./../'</span><span class="token punctuation">)</span></code></pre><ul><li><code>./</code>指的是的当前模块所在文件夹</li></ul></li><li><p>绝对路径</p><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'/目录名/模块名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>/</code>指的是当前盘符为起点(C盘、d盘等)</li></ul></li><li><p><code>nodejs</code>本身的模块:</p><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>直接写模块名，不需要写路径</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模块化的由来&quot;&gt;&lt;a href=&quot;#模块化的由来&quot; class=&quot;headerlink&quot; title=&quot;模块化的由来&quot;&gt;&lt;/a&gt;模块化的由来&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在团队协作中，经常会不同队员负责不同的文件编写(比如js)，那么如果不同js文件定义了相同的变量</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="node.js模块化" scheme="https://codehan045.github.io/tags/node-js%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    <category term="common.js" scheme="https://codehan045.github.io/tags/common-js/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS</title>
    <link href="https://codehan045.github.io/posts/9d5ee47d.html"/>
    <id>https://codehan045.github.io/posts/9d5ee47d.html</id>
    <published>2021-10-29T14:42:29.000Z</published>
    <updated>2021-11-03T15:11:22.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前后端"><a href="#前后端" class="headerlink" title="前后端"></a>前后端</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>一个web应用(网站、app、h5游戏等)从开发角度分为前端和后端。<ul><li>前端主要负责页面的实现以及页面交互以及数据渲染(数据来自于后端).</li><li>后端主要负责服务器程序的编写以及数据库的交互，以及将数据传给前端或数据库</li></ul></li></ul><ul><li>前端和后端的交互：一个基本的流程<ul><li>前端通过ajax等技术发送请求到服务器，服务器接收请求并处理，处理后发现需要数据，后端开发人员就会去数据库里拿数据，服务器拿到数据库数据之后再传给前端。</li></ul></li><li>技术栈<ul><li>前端：HTML+css+JavaScript+vue(生态)+react(生态)</li><li>后端：NodeJs+Express</li><li>数据库：MongoDB、mongoose(实现和nodejs进行交互)</li></ul></li><li>服务器程序工作<ul><li>接收和处理请求</li><li>读取或保存数据到数据库</li><li>将前端获得的数据以及从数据库拿到的数据进行交互</li></ul></li></ul><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote><ul><li>Node.js 是一个开源和跨平台的 JavaScript 运行时环境。 Node.js可以解析和运行JavaScript代码</li><li>Node.js 在浏览器之外运行 V8 JavaScript 引擎（Google Chrome 的内核）</li><li>既不是语言，也不是框架，它是一个平台</li></ul></blockquote><ul><li>Node.js 中的 JavaScript<ul><li>没有 BOM、DOM</li><li>EcmaScript 基本的 JavaScript 语言部分</li><li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul><li>文件读写操作</li><li>http 服务器</li><li>网络服务器的构建</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>envent-driven  事件驱动</li><li>non-blocking I/O mode 非阻塞IO模型(异步)</li><li>lightweight and efficent 轻量和高效</li><li>npm是世界上最大的开源库生态系统</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>官网安装:<a href="http://nodejs.cn/download/current/">http://nodejs.cn/download/current/</a> </p><p> <a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></p><ul><li>win7：选择12.x。win10:用最新的稳定版本，目前是14.x</li></ul></li><li><p>傻瓜式安装(一路<code>next</code>)</p></li><li><p>安装过再次安装会升级</p></li></ul><h4 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h4><ul><li>打开终端命令行，输入<code>node -v</code>查看当前版本</li><li>若出现<code>不是内部或外部命令</code>则需要进行环境变量的配置</li></ul><h3 id="解析执行js"><a href="#解析执行js" class="headerlink" title="解析执行js"></a>解析执行js</h3><ol><li>创建JavaScript脚本文件</li><li>打开终端，进入脚本文件目录</li><li>输入<code>node 文件名.js</code> 执行对应文件</li></ol><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//fs是file-system的简写，就是文件系统的意思</span><span class="token comment" spellcheck="true">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span><span class="token comment" spellcheck="true">//在fs这个模块中，就提供了所有文件操作相关的API</span><span class="token comment" spellcheck="true">//例如 fs.readFile就是用来读取文件的</span><span class="token comment" spellcheck="true">//  1.使用fs核心模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.读取文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.将数据写入文件</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span><span class="token string">'我是文件写入的信息'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Http服务器"><a href="#Http服务器" class="headerlink" title="Http服务器"></a>Http服务器</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.加载http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.使用http.createServer()创建一个web服务器</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.服务器要做的事儿</span><span class="token comment" spellcheck="true">// 提供服务：对数据服务</span><span class="token comment" spellcheck="true">// 发请求</span><span class="token comment" spellcheck="true">//    接收请求</span><span class="token comment" spellcheck="true">//    处理请求</span><span class="token comment" spellcheck="true">//    反馈（发送响应）</span><span class="token comment" spellcheck="true">//    当客户端请求过来，就会自动触发服务器的request请求事件，</span><span class="token comment" spellcheck="true">//然后执行第二个参数：回调处理函数</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户的请求了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.绑定端口号，启动服务</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'runing...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前后端&quot;&gt;&lt;a href=&quot;#前后端&quot; class=&quot;headerlink&quot; title=&quot;前后端&quot;&gt;&lt;/a&gt;前后端&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;u</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="node" scheme="https://codehan045.github.io/tags/node/"/>
    
    <category term="服务器" scheme="https://codehan045.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="https://codehan045.github.io/posts/764f33bc.html"/>
    <id>https://codehan045.github.io/posts/764f33bc.html</id>
    <published>2021-10-27T06:39:58.000Z</published>
    <updated>2021-10-27T16:13:12.229Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211027232002.png"></p><h2 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h2><blockquote><p>webpack是一种前端资源构建工具，一个静态模块打包器(module bundler).在webpack看来，前端的所有资源文件(js、json、css、img、less、scss…)都会作为模块处理，根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle).</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211027231432.png"></p><h2 id="webpack作用"><a href="#webpack作用" class="headerlink" title="webpack作用"></a>webpack作用</h2><ul><li>能够对前端资源进行打包</li><li>良好的兼容性。能够自动将新版本代码转为低版本代码。比如ES6-&gt;ES5</li><li>不同模块打包：对于其他资源也可以进行打包，比如将scss和css等进行打包处理。</li><li>提供丰富的插件。能够简化其他的项目工作</li></ul><h2 id="webpack五个核心概念"><a href="#webpack五个核心概念" class="headerlink" title="webpack五个核心概念"></a>webpack五个核心概念</h2><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><blockquote><p>入口(entry) 指示 <code>webpack</code>以哪个文件为入口起点开始打包，分析构建内部依赖图</p></blockquote><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><blockquote><p>输出(output) 指示 <code>webpack</code>打包后的资源 <code>bundles</code> 输出到哪里去，以及如何命名</p></blockquote><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><blockquote><p>loader 让 <code>webpack</code>能够去处理那些非 <code>js</code>文件 webpack本身能够处理<code>js</code>和<code>json</code>资源</p></blockquote><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><blockquote><p>插件(plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等</p></blockquote><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><blockquote><p>模式(mode)指示<code>webpack</code>使用相应模式的配置</p></blockquote><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>development</code>（开发模式）</td><td align="left">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code>. 为模块和 chunk 启用有效的名。</td></tr><tr><td align="left"><code>production</code>（生产模式）</td><td align="left">会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code>。为模块和 chunk 启用确定性的混淆名称，<code>FlagDependencyUsagePlugin</code>，<code>FlagIncludedChunksPlugin</code>，<code>ModuleConcatenationPlugin</code>，<code>NoEmitOnErrorsPlugin</code> 和 <code>TerserPlugin</code> 。比开发模式多一个压缩代码</td></tr></tbody></table><h2 id="webpack使用"><a href="#webpack使用" class="headerlink" title="webpack使用"></a>webpack使用</h2><ol><li><p>使用<code>npm init</code>针对前端项目生成<code>package.json</code></p></li><li><p>下载并安装<code>webpack</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i webpack webpack-cli --save-dev</code></pre><ul><li><code>--save-dev</code>:表示在开发模式中能够使用，上线之后就不再使用，可以简写成<code>-D</code></li></ul></li></ol><ul><li>通过webpack命令和配置文件来对项目打包进行配置。</li></ul><h3 id="配置文件webpack-config-js"><a href="#配置文件webpack-config-js" class="headerlink" title="配置文件webpack.config.js"></a>配置文件webpack.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 配置文件     作用：指示webpack干哪些事（当运行webpack指令时，会加载里面的配置）    所有构建工具都是基于nodejs平台运行的，模块化默认采用commonjs    loader :1 下载 2.使用(配置loader)    plugins:1.下载 2.引入 3.使用*/</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将css单独打包成一个文件的插件，它为每个包含css的js文件都创建一个css文件。它支持css和sourceMaps的按需加载。</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// webpack配置</span>    <span class="token comment" spellcheck="true">//入口起点</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> <span class="token string">"./src/js/index.js"</span><span class="token punctuation">,</span>        login<span class="token punctuation">:</span> <span class="token string">"./src/js/login.js"</span><span class="token punctuation">,</span>        register<span class="token punctuation">:</span> <span class="token string">"./src/js/regist.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输出</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出文件名</span>        filename<span class="token punctuation">:</span> <span class="token string">'./js/[name].js'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// __dirname  nodejs的变量，代表当前文件的目录绝对路径</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// loader的配置</span>    <span class="token comment" spellcheck="true">// 不同文件必须配置不同loader处理</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">// 详细的loader配置</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打包css</span>                <span class="token comment" spellcheck="true">//匹配哪些文件</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.css$/i</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//use数组中的loader执行顺序：从右到左，从下到上 依次执行</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 创建style标签，将js的样式资源插入进行,添加到head中生效，这里使用了插件，与此loader冲突，所以不写</span>                    <span class="token comment" spellcheck="true">// 'style-loader',</span>                    <span class="token comment" spellcheck="true">// 将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span>                    <span class="token string">'css-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 打包scss文件</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.scss/i</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 将scss文件编译成css文件</span>                    <span class="token string">'sass-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 打包图片</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|jpeg|gif)/i</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 下载：url-loader 依赖于 file-loader</span>                loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 图片大小小于8kb,就会被base64处理</span>                    <span class="token comment" spellcheck="true">// 优点：减少请求数量（减轻服务器压力）</span>                    <span class="token comment" spellcheck="true">// 缺点：图片体积 会更大(文件请求速度更慢)</span>                    limit<span class="token punctuation">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 输出路径</span>                    outputPath<span class="token punctuation">:</span> <span class="token string">'./assets/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 问题：因为 url-loader 默认使用 es6 模块化解析，而 html-loader 引入图片是 commonjs</span><span class="token comment" spellcheck="true">// 解析时会出问题：[object Module]</span><span class="token comment" spellcheck="true">// 解决：关闭 url-loader 的 es6 模块化，使用 commonjs 解析</span>                    esModule<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 用于解决兼容性问题</span>                    <span class="token comment" spellcheck="true">// [hash:6]取图片的hash的前6位</span>                    <span class="token comment" spellcheck="true">// [ext]:取文件原来的扩展名</span>                    name<span class="token punctuation">:</span> <span class="token string">'[hash:6].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// html 中 img</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.html$/i</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 处理html文件中的img图片(负责引入img，从而被url-loader进行处理)</span>                loader<span class="token punctuation">:</span> <span class="token string">'html-withimg-loader'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// plugins的配置</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 详细plugins的配置</span>        <span class="token comment" spellcheck="true">// 打包html 使用 html-webpack-plugin插件:</span>        <span class="token comment" spellcheck="true">// 功能:默认会创建一个空的html，自动引入打包输出的所有资源(js、css)</span>        <span class="token function">htmlPlugin</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">htmlPlugin</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">htmlPlugin</span><span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token punctuation">:</span> <span class="token string">'./css/[name].css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 全局暴露jquery</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            $<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>            jQuery<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 开发模式</span>    <span class="token comment" spellcheck="true">// mode:'production', //生产模式</span>    <span class="token comment" spellcheck="true">// 开发服务器devServer:用来自动化(自动编译自动打开浏览器，自动刷新浏览器)</span>    <span class="token comment" spellcheck="true">// 特点：只会在内存中编译打包，不会有任何输出</span>    <span class="token comment" spellcheck="true">// 启动指令：webpack4:webpack-dev-server</span>    <span class="token comment" spellcheck="true">// webpack5:npx webpack s</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动gzip压缩</span>        compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 端口号</span>        port<span class="token punctuation">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// openPage:'html/login.html',webpack5不支持报错</span>        open<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'html/login.html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动服务器时自动打开页面</span>        hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 实时更新</span>        <span class="token comment" spellcheck="true">//跨域问题解决</span>        proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                 target<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000'</span>  <span class="token comment" spellcheck="true">// 后端服务器地址</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//封装打包html文件</span><span class="token keyword">function</span> <span class="token function">htmlPlugin</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需要打包的HTML页面, 设置要打包的源文件 HTML 的路径</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`./src/html/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html`</span></span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//设置打包后的文件路径和文件名</span>        filename<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`./html/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html`</span></span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//需要引入的js文件名数组, 当前 HTML 文件中引入的 JS 的名字</span>        chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211027232002.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;webpack是什么&quot;&gt;&lt;a href=&quot;#webpack是什么&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="前端资源打包" scheme="https://codehan045.github.io/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>promise解读-async/await</title>
    <link href="https://codehan045.github.io/posts/dd7185f2.html"/>
    <id>https://codehan045.github.io/posts/dd7185f2.html</id>
    <published>2021-10-10T15:37:55.000Z</published>
    <updated>2021-10-30T03:32:07.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise的理解和运用"><a href="#Promise的理解和运用" class="headerlink" title="Promise的理解和运用"></a>Promise的理解和运用</h2><h3 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><blockquote><p>Promise是ES6标准化提供的一套异步编程的解决方案，用来替代传统回调函数的异步操作。Promise在JavaScript中是一个内置的类,它的每一个对象都可以负责一个异步操作。</p></blockquote><ol><li><p>抽象表达</p><p><code>Promise</code>是<code>js</code>中进行异步编程的新的解决方案(旧的是纯回调函数   )</p></li><li><p>具体表达</p><ul><li>从语法上来说：Promise是一个构造函数</li><li>功能上来说：Promise对象用来封装一个异步操作并获取其结果</li></ul></li></ol><h4 id="Promise的状态改变"><a href="#Promise的状态改变" class="headerlink" title="Promise的状态改变"></a>Promise的状态改变</h4><ol><li>pending: 初始状态, 非 fulfilled 或 rejected.</li><li>fulfilled: 成功的操作.</li><li>rejected: 失败的操作.</li></ol><blockquote><p>这里从pending状态可以切换到fulfill状态（jQuery中是resolve状态），也可以从pengding切换到reject状态，这个状态切换不可逆，且fulfilled和reject两个状态之间是不能互相切换的。</p></blockquote><h4 id="Promise基本流程"><a href="#Promise基本流程" class="headerlink" title="Promise基本流程"></a>Promise基本流程</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211029212342.png" alt="promise"></p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步操作代码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>异步操作成功<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//即指定resolve函数，</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//即指定reject函数，</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//封装ajax请求获取数据</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reson<span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span>url<span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//...arr不定长参数</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            fail<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">reson</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 指定then和catch</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.fastmock.site/mock/bb4157f45a0b5ffdcb3f6d984517a6c0/woniuMovie/getMoviesCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'https://www.fastmock.site/mock/bb4157f45a0b5ffdcb3f6d984517a6c0/woniuMovie/getAllMovies'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'https://www.fastmock.site/mock/bb4157f45a0b5ffdcb3f6d984517a6c0/woniuMovie/getAllTypes'</span><span class="token punctuation">,</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出所有请求的数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><ul><li>当promise对象创建后，会立即执行异步操作。对于异步操作成功后要执行的<code>resolve</code>函数或失败后要执行的<code>reject</code>是由then和catch来补充的</li><li>会根据异步操作的结果调用对应的函数。如果异步操作执行成功，会执行then里的函数，如果失败，会执行catch里的函数。</li><li>promise对象执行异步 操作后会保存结果。直到我们指定了then和catch后才会拿到异步的结果并处理。then指定的是resolve函数，catch是reject函数</li></ul></blockquote><h3 id="为什么要用Promise"><a href="#为什么要用Promise" class="headerlink" title="为什么要用Promise"></a>为什么要用Promise</h3><h4 id="指定回调函数的方式更加灵活"><a href="#指定回调函数的方式更加灵活" class="headerlink" title="指定回调函数的方式更加灵活"></a>指定回调函数的方式更加灵活</h4><ol><li>旧的：必须在启动异步任务前指定</li><li>promise：启动异步任务 =&gt; 返回 promise 对象 =&gt; 给 promise 对象绑定回调函数 (甚至可以在异步任务结束后指定)</li></ol><h4 id="支持链式调用，可以解决回调地狱问题"><a href="#支持链式调用，可以解决回调地狱问题" class="headerlink" title="支持链式调用，可以解决回调地狱问题"></a>支持链式调用，可以解决回调地狱问题</h4><ol><li><p>什么是回调地狱?</p><p> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</p></li><li><p> 回调地狱的缺点? </p></li></ol><p>   不便于阅读 不便于异常处理 </p><ol start="3"><li><p>解决方案? </p><p>promise 链式调用 </p></li><li><p>终极解决方案?</p><p>async/await</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211030113127.png" alt="链式调用"></p><h3 id="如何使用Promise"><a href="#如何使用Promise" class="headerlink" title="如何使用Promise"></a>如何使用Promise</h3><ol><li><p>Promise 构造函数: <code>Promise (excutor) {} excutor</code> 函数: 同步执行 (resolve, reject) =&gt; {} </p><p><code>resolve</code> 函数: 内部定义成功时我们调用的函数 value =&gt; {} </p><p><code>reject</code> 函数: 内部定义失败时我们调用的函数 reason =&gt; {} </p><p>说明: excutor 会在 Promise 内部立即同步回调,异步操作在执行器中执行</p></li><li><p><code>Promise.prototype.then</code> 方法: (onResolved, onRejected) =&gt; {} </p><p><code>onResolved</code> 函数: 成功的回调函数 (value) =&gt; {} </p><p><code>onRejected</code> 函数: 失败的回调函数 (reason) =&gt; {} </p><p>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调 返回一个新的 promise 对象 </p></li><li><p><code>Promise.prototype.catch</code> 方法: (onRejected) =&gt; {} </p><p><code>onRejected</code> 函数: 失败的回调函数 (reason) =&gt; {} </p><p>说明: then()的语法糖, 相当于: <code>then(undefined, onRejected)</code> </p></li><li><p><code>Promise.resolve</code> 方法: (value) =&gt; {} </p><p><code>value</code>: 成功的数据或 promise 对象 </p><p>说明: 返回一个成功/失败的 promise 对象 </p></li><li><p><code>Promise.reject </code>方法: (reason) =&gt; {} </p><p><code>reason</code>: 失败的原因 </p><p>说明: 返回一个失败的 promise 对象 </p></li><li><p><code>Promise.all</code> 方法: (promises) =&gt; {} </p><p>promises: 包含 n 个 promise 的数组 </p><p>说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一 个失败了就直接失败 </p></li><li><p><code>Promise.race</code> 方法: (promises) =&gt; {} </p><p>promises: 包含 n 个 promise 的数组 </p><p>说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的 结果状态</p></li></ol><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><blockquote><ul><li>ES7 的新增的内容，作为异步编程的最终解决方案。</li><li>async作为一个函数的修饰符，表示该函数主要用于解决异步编程问题。即该函数里一般情况下主要执行异步代码。</li><li>await作为一个修饰符。只能够在<code>async</code>函数中使用。表示等待一个异步操作结束并接收异步操作的处理结果。但需保证该异步操作是用promise来处理的</li></ul></blockquote><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><ol><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><h3 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h3><ol><li><code>await</code> 右侧的表达式一般为 <code>promise</code> 对象, 但也可以是其它的值 </li><li>如果表达式是 <code>promise</code> 对象, <code>await</code> 返回的是 <code>promise</code> 成功的值 </li><li>如果表达式是其它值, 直接将此值作为 <code>await</code> 的返回值</li></ol><blockquote><ol><li><code>await</code> 必须写在 <code>async</code> 函数中, 但 <code>async</code> 函数中可以没有 <code>await</code></li><li>如果 <code>await</code> 的 <code>promise</code> 失败了, 就会抛出异常, 需要通过 <code>try...catch</code> 捕获处理</li></ol></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> a<span class="token operator">=</span> <span class="token keyword">await</span>  promise对象<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//能够让多个异步操作像同步代码一样顺序执行并拿到异步操作的数据</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Promise的理解和运用&quot;&gt;&lt;a href=&quot;#Promise的理解和运用&quot; class=&quot;headerlink&quot; title=&quot;Promise的理解和运用&quot;&gt;&lt;/a&gt;Promise的理解和运用&lt;/h2&gt;&lt;h3 id=&quot;Promise是什么&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="promise" scheme="https://codehan045.github.io/tags/promise/"/>
    
    <category term="异步编程" scheme="https://codehan045.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>异步编程</title>
    <link href="https://codehan045.github.io/posts/8731ab21.html"/>
    <id>https://codehan045.github.io/posts/8731ab21.html</id>
    <published>2021-10-03T13:03:24.000Z</published>
    <updated>2021-10-12T08:01:23.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是异步编程"><a href="#什么是异步编程" class="headerlink" title="什么是异步编程"></a>什么是异步编程</h2><ul><li><p>同步编程：一件事情做完之后才能去做另外一件事情（单线程）</p></li><li><p>异步编程：上一件事情没有处理完的情况下，就可以去做下一件事情（多线程）</p></li></ul><blockquote><p> JS 代码在浏览器中执行，而浏览器是多进程的，当我们打开一个界面的时候就相当于开启了一个进程，在这一个进程里会存在多个线程（JS引擎、GUI渲染、HTTP网络请求、DOM事件监听器、定时器监听线程…），其中JS引擎就来执行JS代码，很明显它是一个单线程，因为它是单线程所以默认情况下它只能同步完成代码执行，但是JS可以实现异步，这是因为它内部存在事件循环和事件队列机制。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211012160001.png"></p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><blockquote><p>Javascript语言的执行环境是”单线程”（single thread）。</p><p>所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推</p></blockquote><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><blockquote><p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的</p><p>生活中的同步是指同一时间只能处理一件事情</p></blockquote><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><blockquote><p>“异步模式”则是每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的</p></blockquote><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><ol><li><p>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p></li><li><p>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个执行任务。定时器<code>setTimeout</code>是时间为0 后才添加到任务队列里</p></li><li><p>一旦”执行栈”中的所有同步任务执行完毕，事件循环系统就会读取”任务队列”，看看里面有哪些对应的异步任务，按照于是结束等待状态，进入执行栈，开始执行。</p></li><li><p>主线程不断重复上面的第三步</p></li></ol><blockquote><p>根据规范：事件循环是通过 <strong>「任务队列」</strong> 的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task source)，<strong>「源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列」</strong>。<code> setTimeout/Promise</code> 等API便是任务源，而进入任务队列的是他们指定的具体执行任务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211010230041.png" alt="EventLoop"></p><h3 id="异步任务分类"><a href="#异步任务分类" class="headerlink" title="异步任务分类"></a>异步任务分类</h3><h4 id="宏任务macrotask"><a href="#宏任务macrotask" class="headerlink" title="宏任务macrotask"></a>宏任务<code>macrotask</code></h4><pre class=" language-bash"><code class="language-bash">发起者：宿主（Node、浏览器）事件：script<span class="token punctuation">(</span>整体代码<span class="token punctuation">)</span>、setTimeout、setInterval、setImmediate<span class="token punctuation">(</span>Node.js 环境<span class="token punctuation">)</span>、UI事件、I/O（Node.js）运行：后运行</code></pre><h4 id="微任务microtask"><a href="#微任务microtask" class="headerlink" title="微任务microtask"></a>微任务<code>microtask</code></h4><pre class=" language-bash"><code class="language-bash">发起者: JS引擎事件：Promise、MutaionObserver、process.nextTick（Node.js）运行：先运行</code></pre><blockquote><p>微任务优先级高于宏任务,先执行完所有微任务,宏任务在之后执行</p></blockquote><p>关系图</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211010230315.png"></p><p>示例动画</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20211007212049.gif"></p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><blockquote><p>回调函数是一个函数，将会在另一个函数完成执行后立即执行。回调函数是一个作为参数传给另一个 JavaScript 函数的函数。这个回调函数会在传给的函数内部执行。</p><ul><li>常见的回调函数:ajax的success/定时器的函数/jquery动画里的函数</li><li>作用:进行后续操作,起到一个通知的作用</li><li>应用：<ul><li>定时器(异步回调)</li><li>ajax(异步回调)</li><li>事件处理程序(异步回调)</li><li>sort</li></ul></li></ul></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>根据是否是同步操作还是异步的操作，将回调函数分为同步回调和异步回调两种</li></ul><h4 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h4><ul><li>回调函数的代码必定是按照书写顺序来执行的</li><li>立即执行，完全执行完才结束，不会放入回调队列中<ul><li>例子：数组遍历相关的回调函数</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">task1</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'任务1执行中'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'任务2执行中'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">task1</span><span class="token punctuation">(</span>task2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h4><ul><li>回调函数的执行跟书写顺序不一致。</li><li>不会立即执行，会放入回调队列中将来执行<ul><li>例子：定时器回调、ajax回调、promise的成功失败回调</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1000后执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器之后的代码,会在回调函数之前执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>实际应用中，很多时候，需要多个异步操作能够按照顺序执行。比如先获取电影数据的个数，获取数据的个数后再获得具体的电影数据，还需要获取电影类型的数据。这样导致了回调函数的不断嵌套</li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>回调地狱是指因为多个异步操作需要按一定顺序执行，导致每个异步操作的回调函数代码形成了多层嵌套。导致了代码阅读不易，维护不方便</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取电影个数:第一个异步操作</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span><span class="token string">"地址"</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拿到个数，根据个数在页面上生成对应数量的标签</span>        <span class="token comment" spellcheck="true">//拿到具体的数据:第二个异步操作</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"地址"</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//拿到电影数据</span>                <span class="token comment" spellcheck="true">//拿到分类数据:第三个异步操作</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>解决办法：promise,  async&amp;await  处理有异步代码顺序执行的问题</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是异步编程&quot;&gt;&lt;a href=&quot;#什么是异步编程&quot; class=&quot;headerlink&quot; title=&quot;什么是异步编程&quot;&gt;&lt;/a&gt;什么是异步编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;同步编程：一件事情做完之后才能去做另外一件事情（单线程）&lt;/p&gt;
&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="异步编程" scheme="https://codehan045.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用特性</title>
    <link href="https://codehan045.github.io/posts/f24c0bad.html"/>
    <id>https://codehan045.github.io/posts/f24c0bad.html</id>
    <published>2021-10-03T10:33:41.000Z</published>
    <updated>2021-10-07T15:49:06.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><blockquote><p>是ES6 新增的一个特殊的运算符，也称Rest运算符.能够简化一些针对数组和对象的复制和合并、展开等操作。</p></blockquote><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token operator">...</span>变量名</code></pre></li><li><p>变量名保存数据类型的不同，扩展运算符会有不同的效果</p></li></ul><h3 id="数组中的应用"><a href="#数组中的应用" class="headerlink" title="数组中的应用"></a>数组中的应用</h3><ul><li>合并数组</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>传统<span class="token punctuation">:</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>扩展运算符：<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>复制数组</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>在数组api中的应用</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//push</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span></code></pre><ul><li>将dom标签的类数组对象转换为真正的数组</li></ul><blockquote><p>若变量存储的数据类型为数组，可以直接展开使用</p></blockquote><h3 id="对象中的使用"><a href="#对象中的使用" class="headerlink" title="对象中的使用"></a>对象中的使用</h3><ul><li>合并对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    address<span class="token punctuation">:</span><span class="token string">'中国四川'</span><span class="token punctuation">,</span>    phone<span class="token punctuation">:</span><span class="token string">"1399999999"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>    <span class="token operator">...</span>obj2<span class="token punctuation">}</span></code></pre><ul><li>复制对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在对象中需要使用{} 包裹并展开 {…property}</p></blockquote><h3 id="函数中的应用"><a href="#函数中的应用" class="headerlink" title="函数中的应用"></a>函数中的应用</h3><ul><li><p>作为形式参数：将所有的实际参数组合成一个数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>传递了<span class="token number">5</span>个参数<span class="token function">demo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre></li><li><p>作为实际参数：将数组里的每个数据都作为一个实际参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等同于</span><span class="token comment" spellcheck="true">// demo(1,2,3,4);</span></code></pre></li></ul><h3 id="字符串中的应用"><a href="#字符串中的应用" class="headerlink" title="字符串中的应用"></a>字符串中的应用</h3><ul><li><p>展开字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcde'</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等同于</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><ul><li>一般来说，无论是数组或对象，扩展运算符的作用就是展开其里面的内容</li><li>在函数中作为形式参数，会把所有的实际参数合并成一个数组</li></ul></blockquote><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><blockquote><p>是ES6新增的特性。可以用来对数据(一般指对象或数组)进行解构，按照一定语法，将解构的数据快速赋给不同的变量。</p></blockquote><h3 id="数组中的应用-1"><a href="#数组中的应用-1" class="headerlink" title="数组中的应用"></a>数组中的应用</h3><ul><li><p>对数组进行解构，并把数组中的 数据赋给变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token punctuation">,</span>变量名n<span class="token punctuation">]</span><span class="token operator">=</span> 数组<span class="token comment" spellcheck="true">//按照数组对应的下标将数据赋给对应位置的变量</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3<span class="token punctuation">]</span><span class="token operator">=</span>arr2<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// num1:1   num2:2  num3:[3,4]</span></code></pre></li></ul><h3 id="对象中的使用-1"><a href="#对象中的使用-1" class="headerlink" title="对象中的使用"></a>对象中的使用</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//实例对象</span><span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">"zs"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span></code></pre><ul><li><p>将对象中不同属性的值赋给不同的变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>属性名<span class="token number">1</span><span class="token punctuation">:</span>变量名<span class="token number">1</span><span class="token punctuation">,</span>属性名<span class="token number">2</span><span class="token punctuation">:</span>变量名<span class="token number">2</span><span class="token punctuation">,</span>属性名n<span class="token punctuation">:</span>变量名n<span class="token punctuation">}</span><span class="token operator">=</span>对象<span class="token keyword">let</span> <span class="token punctuation">{</span>username<span class="token punctuation">:</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">:</span>uage<span class="token punctuation">,</span>sex<span class="token punctuation">:</span>usex<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span></code></pre></li><li><p>会将对象中和<strong>变量同名属性</strong>的值赋给变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token punctuation">,</span>变量名n<span class="token punctuation">}</span> <span class="token operator">=</span>对象<span class="token keyword">let</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span>obj<span class="token punctuation">;</span></code></pre></li></ul><h3 id="字符串中的应用-1"><a href="#字符串中的应用-1" class="headerlink" title="字符串中的应用"></a>字符串中的应用</h3><ul><li><p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>length<span class="token punctuation">}</span><span class="token operator">=</span>str<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//11 11  字符串的属性</span></code></pre></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><p>处理请求时对返回的数据进行解构</p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token punctuation">:</span><span class="token string">"https://www.fastmock.site/mock/bb4157f45a0b5ffdcb3f6d984517a6c0/woniuMovie/getAllMovies"</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span>movies<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//解构赋值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>配合扩展运算符，获取剩余的数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span>phone<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'全班qq号'</span><span class="token punctuation">,</span><span class="token string">'10086'</span><span class="token punctuation">,</span><span class="token string">'10000'</span><span class="token punctuation">,</span><span class="token string">'00777777'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['10086', '10000', '00777777']</span></code></pre></li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>set集合是ES6所提供的自带去重的用于保存和管理多个数据的语法结构。类似于数组，但和数组有很大区别</p></blockquote><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>set集合自带去重</p></li><li><p>set集合没有下标</p></li><li><p>set集合内部会维护数据的插入顺序。即遍历set集合时，数据的遍历顺序跟插入顺序是一致的。</p></li><li><p>set集合底层是用map来实现的。</p></li><li><p>set对于数据的处理都是通过自带的api来操作。</p></li><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1. 定义一个空的 set集合</span> <span class="token keyword">let</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 定义带有默认数据的set集合</span><span class="token keyword">let</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>数组<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//会将数组里的数据插入到set中并去重。</span></code></pre></li></ul><h4 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h4><ul><li><p>添加数据 <code>add()</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>‘zs’<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>‘ls’<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>‘zs’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//支持链式调用</span></code></pre></li><li><p>删除数据  <code>delete()</code></p><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查找数据 <code>has()</code></p><ul><li>判断set中是否有某个数据,返回一个布尔型数据</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre></li><li><p>清空数据 <code>clear()</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">set</span>集合变量名<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取长度  <code>size</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">set</span>集合变量名<span class="token punctuation">.</span>size</code></pre></li><li><p>遍历</p><pre class=" language-js"><code class="language-js"><span class="token keyword">set</span>集合变量名<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>应用</p><blockquote><p>数据去重</p></blockquote></li></ul><h3 id="set集合和数组的之间的转换"><a href="#set集合和数组的之间的转换" class="headerlink" title="set集合和数组的之间的转换"></a>set集合和数组的之间的转换</h3><ul><li><p>数组转为set集合</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> setobj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>数组名<span class="token punctuation">)</span>；</code></pre></li><li><p>set集合转为数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span>集合变量名<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用扩展运算符</span></code></pre></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><blockquote><p>ES6新增的用于保存多个键值对数据的语法结构，简称map集合。</p><p>键值对：指的一个数据以名字-&gt;数据的模式来描述。 比如姓名-&gt;张三 。姓名就是键，张三就是值。</p></blockquote><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>map集合的每个数据都是一个<code>键值对</code>.</li><li>map集合的每个数据里的键是唯一的，不允许重复，重复添加同一个键，会将以前的值给覆盖掉。</li><li>map是通过键来访问对应的数据</li><li>map没有下标。</li><li>map也是通过<code>api</code>来完成键值对的 操作</li></ul><h4 id="定义map集合"><a href="#定义map集合" class="headerlink" title="定义map集合"></a>定义map集合</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1. 定义一个空的map集合</span><span class="token keyword">let</span> 变量名<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 定义带有默认数据的map集合</span><span class="token keyword">let</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>二维数组<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="map对应API"><a href="#map对应API" class="headerlink" title="map对应API"></a>map对应API</h4><ul><li><p>添加、修改数据</p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>如果重复添加同一个键，该键所对应的数据会被后添加的给覆盖（修改）</strong></p></li><li><p>通过键删除数据：<code>delete(key)</code></p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过键查找是否存在某数据：<code>has(key)</code>返回布尔值</p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过键来查找对应的值：<code>get(key)</code></p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>清空：<code>clear</code></p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取长度</p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span>size</code></pre></li><li><p>遍历</p><pre class=" language-js"><code class="language-js">map集合变量名<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>在JavaScript中，不写var和写var表现什么不同？？？<ul><li>如果没有用var 声明，那么程序会直接将该变量作为全局变量。会导致变量定义混乱，并且会额外占用全局资源</li><li>一个良好的编程，无论是否是全局变量或其他的语法，都应该遵守一个严格的规则。</li></ul></li></ul><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>严格模式时JavaScript1.8(后续是ES3)引入的一种可选的模式。该模式下修复了JavaScript设计的一些不合理 的地方。但是当时JavaScript已经普及了，所以为了照顾以前的版本，所以严格模式只是可选，而不是必须。</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><p>如何触发严格模式</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span></code></pre><p><strong>一般写在当前作用域的第一行，会将当前的作用域作为严格模式来执行</strong></p></li><li><p>严格模式的作用</p><ul><li>消除非严格模式下的一些不合理的地方</li><li>让代码编写更加规范</li><li>提高程序运行速度</li></ul></li></ul><h4 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h4><ul><li><p>变量必须声明</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span></code></pre></li><li><p>变量名不允许使用关键字</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token keyword">while</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span></code></pre></li><li><p>不允许删除全局变量或函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">delete</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span></code></pre></li><li><p>this指向问题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"use strict"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;扩展运算符&quot;&gt;&lt;a href=&quot;#扩展运算符&quot; class=&quot;headerlink&quot; title=&quot;扩展运算符&quot;&gt;&lt;/a&gt;扩展运算符&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;是ES6 新增的一个特殊的运算符，也称Rest运算符.能够简化一些针对数组和对象的复制和合</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="ES6特性" scheme="https://codehan045.github.io/tags/ES6%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript异常</title>
    <link href="https://codehan045.github.io/posts/aac20146.html"/>
    <id>https://codehan045.github.io/posts/aac20146.html</id>
    <published>2021-10-03T08:32:23.000Z</published>
    <updated>2021-10-07T15:49:06.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常基础"><a href="#异常基础" class="headerlink" title="异常基础"></a>异常基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>当 <strong>JavaScript</strong> 引擎执行 <strong>JavaScript</strong> 代码时，有可能会发生各种异常，例如是语法异常，语言中缺少的功能，由于来自服务器或用户的异常输出而导致的异常。</p></blockquote><blockquote><p>而 <strong><code>Javascript</code></strong> 引擎是单线程的，因此一旦遇到异常，**<code>Javascript</code>** 引擎通常会停止执行，阻塞后续代码并抛出一个异常信息，因此对于可预见的异常，我们应该捕捉并正确展示给用户或开发者</p></blockquote><h2 id="Error对象"><a href="#Error对象" class="headerlink" title="Error对象"></a>Error对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Error是JavaScript的内置异常的基础类。该类主要是在程序报错时会创建一个异常对象，该异常对象就包含了错误的相关信息，比如错误内容(message)、出错的地方(stack)、错误的类型名称(name)</p></blockquote><ul><li><p><code>message</code>、<code>stack</code>、<code>name</code>是<code>Error</code>类的三个属性。</p></li><li><p>开发人员可以通过<code>throw</code>关键字来主动报错。</p></li></ul><h3 id="Error内置子类-异常分类"><a href="#Error内置子类-异常分类" class="headerlink" title="Error内置子类 (异常分类)"></a>Error内置子类 (异常分类)</h3><ul><li><code>RangeError</code>:范围错误。一般是数组长度不合法的时候会报该错误</li><li><code>referenceError</code>:引用错误。使用了未定义的变量</li><li><code>URIError</code>:对地址解析不对，会导致该错误</li><li><code>TypeError</code>：处理的数据类型不对</li><li><code>SyntaxError</code>：语法错误</li><li><code>evalError</code>:当使用<code>eval</code>时的报错。但是目前使用<code>eval</code>不会报错，所以这个只是为了兼容以前的版本遗留下来的。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// RangeError</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建长度为-1的数组</span><span class="token comment" spellcheck="true">// SyntaxError </span><span class="token keyword">let</span> 1a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// TypeError</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//URIError </span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">"%2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try-catch-异常捕获和处理"><a href="#try-catch-异常捕获和处理" class="headerlink" title="try-catch:异常捕获和处理"></a>try-catch:异常捕获和处理</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><blockquote><p>try-catch是专用于解决捕获异常防止程序终止，后续代码无法运行，这样可以保证代码哪怕报错之后，也不会终止程序的运行。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可能会报错的代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当报错时会执行catch里的代码</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无论是否报错，都会执行finally里的代码</span><span class="token punctuation">}</span></code></pre><ul><li>报错时，错误的相关信息JavaScript会自动创建一个异常对象并将信息保存起来作为<code>catch</code>代码执行时的参数</li><li>如果<code>try</code>里的代码没有报错，那么<code>catch</code>里的代码不会执行。</li></ul><h3 id="throw-主动抛出异常"><a href="#throw-主动抛出异常" class="headerlink" title="throw :主动抛出异常"></a>throw :主动抛出异常</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">throw</span>  异常对象<span class="token punctuation">;</span> 例子：抛出一个loginError异常<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li><p>背景：为了实现自己项目中业务相关的异常，可以通过定义新的类继承<code>Error</code>类来实现自定义异常</p></li><li><p>作用：实现定制的异常</p></li><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">LoginError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用父类初始化构造器</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"LoginError"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>程序中的异常是指程序报的”错误”,本质上是一个异常对象。</li><li>能够使用<code>try-catch-finally</code>捕获并处理异常，能够保证处理异常之后程序可以继续执行</li><li>可以使用<code>throw</code>来主动抛出异常(不符合自己的业务逻辑)</li><li>当<code>JavaScript</code>内置异常满足不了开发需求时可以自定义异常<ol><li>定义一个类继承<code>Error</code>类</li><li>构造函数里需要调用<code>super(message)</code></li><li>构造函数里需要给<code>this.name</code>赋值，这个表示自定义异常的类型名称。</li><li>自定义异常可以通过<code>throw</code>来抛出，即主动抛出</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;异常基础&quot;&gt;&lt;a href=&quot;#异常基础&quot; class=&quot;headerlink&quot; title=&quot;异常基础&quot;&gt;&lt;/a&gt;异常基础&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="异常处理" scheme="https://codehan045.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之Object类</title>
    <link href="https://codehan045.github.io/posts/fed2b313.html"/>
    <id>https://codehan045.github.io/posts/fed2b313.html</id>
    <published>2021-10-02T08:04:36.000Z</published>
    <updated>2021-11-04T05:17:31.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>JavaScript的内置的类，任何自定义函数的默认原型就是Object类的一个对象。所以自己创建的对象能够直接通过原型链使用Object定义的api</li></ul><h3 id="Object-API"><a href="#Object-API" class="headerlink" title="Object API"></a>Object API</h3><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a><code>Object.create()</code></h4><ul><li> 创建一个对象。特点是可以手动指定新对象的原型，可以为null</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该新对象没有原型,</span><span class="token comment" spellcheck="true">//第一个参数设置对象的__proto__ 属性，第二个参数设置自身属性</span><span class="token keyword">let</span> obj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自身的属性,必须是对象</span>    b<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//descriptor</span>        value<span class="token punctuation">:</span>属性值，        configurable<span class="token punctuation">:</span>是否可配置，默认为<span class="token boolean">false</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> 是否可更改，默认为<span class="token boolean">false</span>        enumerable<span class="token punctuation">:</span> 是否可枚举 默认值为<span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li><strong>如果传递的参数为null，那么该新对象没有任何原型。哪怕Object提供的api也不能使用</strong></li></ul><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a><code>Object.assign()</code></h4><ul><li><p>完成多个对象的合并,源对象有可枚举的特性</p><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//目标对象     源对象</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token operator">...</span>source<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//原理是返回的一个target对象，枚举源对象的属性，（只会分配键值对）分配给target目标对象然后返回</span><span class="token comment" spellcheck="true">//属性的设置添加 getter 和 setter  存取运算符</span></code></pre></li><li><p><strong>不会将原型中的属性进行分配</strong></p></li><li><p>面试题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> v1<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">const</span> v2<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">const</span> v3<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">const</span> v4<span class="token operator">=</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> v5<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">,</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*0  1   1  2   2  3  */</span></code></pre></li></ul><h4 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a><code>Object.defineProperty</code></h4><ul><li><p>给某个对象添加或修改某个属性的值(详细)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//三个参数；</span><span class="token comment" spellcheck="true">/*第一个参数：目标对象第二个参数：需要添加的属性第三个参数：属性描述器*/</span><span class="token keyword">const</span> target <span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span><span class="token string">'属性值'</span><span class="token punctuation">,</span>    writtable<span class="token punctuation">:</span>是否可以被更改<span class="token punctuation">,</span>默认为<span class="token boolean">false</span><span class="token punctuation">,</span>    enumrable：是否可枚举<span class="token punctuation">,</span>默认为<span class="token boolean">false</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token function">是否可配置</span><span class="token punctuation">(</span>是否可以被删除<span class="token punctuation">)</span>，默认为<span class="token boolean">false</span>，  <span class="token comment" spellcheck="true">//在读取该对象的a属性时，get函数(getter)就会被调用，且返回值就是属性a的值  </span>   <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'helo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//在修改该对象的a属性时，set函数(setter)就会被调用，且会收到修改的具体值 </span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a><code>hasOwnProperty</code></h4><ul><li><p>判断某个属性是否是自己的属性，不考虑继承过来的属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Sun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre></li></ul><h4 id="其他Api"><a href="#其他Api" class="headerlink" title="其他Api"></a>其他Api</h4><ul><li><code>Object.freeze()</code>:冻结一个对象。冻结即该对象不可修改</li><li><code>Object.isFrozen()</code>:判断一个对象是否冻结,返回布尔型</li><li><code>propertyIsEnumable()</code>:判断一个对象的某个属性是否可枚举。</li><li><code>Object.is()-ES6</code>:判断两个数据是否一致，类似于<code>===</code>,只是判断NaN是否等于NaN时为true</li><li><code>Object.assign()-ES6</code>:将多个对象进行合并，一般用于对象复制</li><li><code>toString()</code>:对象的字符串输出.</li><li><code>Object.keys(对象参数)</code>将传入对象的所有属性名提取出来，返回一个数组</li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>概念：枚举是指对象中的 某个属性是否可以被遍历出来。</li><li>特点：用户定义的属性默认都是可以枚举的</li><li>改变枚举:<code>Object.defineProperty()</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置age属性为不可枚举(不可被遍历)</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//不可枚举</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="浅克隆和深克隆（针对引用类型数据）"><a href="#浅克隆和深克隆（针对引用类型数据）" class="headerlink" title="浅克隆和深克隆（针对引用类型数据）"></a>浅克隆和深克隆（针对引用类型数据）</h2><blockquote><p>无论是浅拷贝或深拷贝，都是在做同一件事情：拷贝对象</p></blockquote><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><ul><li>遍历</li><li>扩展运算符</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//扩展</span><span class="token comment" spellcheck="true">//let o2 = {...o1};</span><span class="token comment" spellcheck="true">//遍历</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> o1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将o1的属性赋给o2</span>    o2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> o1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p> 浅克隆问题：当对象中的某个属性的值也是一个对象时，拷贝该属性时只是把对象的地址给拷贝过去了，所以拷贝的该属性无论是新对象还是旧对象，针对该属性，都是指的同一个属性值(对象)</p></blockquote><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><ul><li>原理：对属性值是对象的属性也进行一次浅克隆（即使用递归）</li></ul><h4 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h4><blockquote><ol><li>递归方式返回一个新对象(更灵活)</li><li>JSON转换为字符串，有缺陷，若属性值为’null’ ,转换之后与之前对象不匹配</li><li>Object.assign() 对象的合并</li><li>扩展运算符{…Object};</li></ol></blockquote><h5 id="ES5深克隆"><a href="#ES5深克隆" class="headerlink" title="ES5深克隆"></a>ES5深克隆</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个空对象</span>    <span class="token keyword">var</span> tar<span class="token operator">=</span> target <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>；    <span class="token keyword">var</span> toStr<span class="token operator">=</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>    <span class="token keyword">var</span> arrType<span class="token operator">=</span><span class="token string">"[object Array]"</span>；    <span class="token comment" spellcheck="true">//遍历对象</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> origin<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//自身的属性进行克隆</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断属性是否是对象并且不为null   null的类型也为object</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span>  origin<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> origin<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断是否为数组</span>                tar<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>toStr<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span>arrType<span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//递归调用，将属性值为对象的属性值再次克隆</span>                <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>tar<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//非对象直接将属性值添加到目标对象中</span>                tar<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>origin<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//undefined 和 null == 结果为true</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>origin<span class="token operator">==</span> undefined <span class="token operator">||</span> <span class="token keyword">typeof</span> origin <span class="token operator">!==</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对于特殊的对象返回</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>origin <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用源对象的构造函数，创建一个新的对象</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">origin<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> origin<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="Object类" scheme="https://codehan045.github.io/tags/Object%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>ES5高级特性</title>
    <link href="https://codehan045.github.io/posts/28718b75.html"/>
    <id>https://codehan045.github.io/posts/28718b75.html</id>
    <published>2021-09-30T15:27:49.000Z</published>
    <updated>2021-10-02T16:00:08.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>指的是一个函数能够使用另一个函数里的变量。</p><p>函数嵌套函数，内部函数就是闭包</p></blockquote><ul><li>语法</li></ul><pre class=" language-js"><code class="language-js">一般是在一个函数里定义一个子函数，并返回子函数。<span class="token keyword">function</span> <span class="token function">father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sun<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//闭包函数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//外部的访问不到num, 原理：执行上下文栈</span></code></pre><ul><li><p>正常情况下：函数执行完，内部变量会销毁（释放内存空间）</p></li><li><p>闭包：内部函数没有执行完，外部函数变量不会被销毁</p></li><li><p>应用：</p><ul><li>封装一段代码</li><li>实现私有变量，节约全局变量</li><li>实现块级作用域，后期有<code>let</code>和<code>const</code>来代替。</li></ul></li></ul><h2 id="IIFE-立即执行函数"><a href="#IIFE-立即执行函数" class="headerlink" title="IIFE(立即执行函数)"></a>IIFE(立即执行函数)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p> <code>IIFE(immediately invoked Function Expression)</code>- 立即调用函数<code>表达式</code></p></blockquote><ul><li><p>函数声明</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//函数声明式</span><span class="token keyword">function</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Function Declaration'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//（）函数名后面的括号，叫做执行符号</span></code></pre></li><li><p>函数表达式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将一个(匿名)函数(函数声明式) 赋值给一个变量的形式   函数表达式</span><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Function Expression'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="IIFE语法"><a href="#IIFE语法" class="headerlink" title="IIFE语法"></a>IIFE语法</h4><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Function Expression'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的分号若有多个立即执行函数，必须添加，否则报错</span></code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>可以创建一个与外界没有任何关联的作用域，独立的作用域</li><li>执行完成之后，自动销毁</li><li>ES3,ES5没有模块的概念，立即执行函数来模拟模块化(封闭作用域，抛出接口(向外部抛出一系列属性和方法)) window上保存属性和方法</li></ul><h2 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote><ul><li>是把接受多个参数的函数变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</li><li>即一个函数只 处理一个参数，剩余的参数就通过返回的函数进行处理</li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">_add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>封装正则表达式检验用户输入手机邮箱</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> _check <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> check<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> checkPhone <span class="token operator">=</span> <span class="token function">_check</span><span class="token punctuation">(</span><span class="token regex">/^1[34578]\d{9}$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> checkEmail <span class="token operator">=</span> <span class="token function">_check</span><span class="token punctuation">(</span><span class="token regex">/^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token function">checkPhone</span><span class="token punctuation">(</span><span class="token string">'18388888899'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token string">'xxxxx@test.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实现一个add方法，使计算结果能够满足如下预期：</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一次执行时，定义一个数组专门用来存储所有的参数</span>    <span class="token keyword">var</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span>    <span class="token keyword">var</span> adder <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _adder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// [].push.apply(_args, [].slice.call(arguments));</span>            _args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> _adder<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 利用隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span>        _adder<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> _adder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// return adder.apply(null, _args);</span>    <span class="token keyword">return</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>补充</strong></p><blockquote><p>函数的隐式转换。当我们直接将函数参与其他的计算时，函数会默认调用toString方法，直接将函数体转换为字符串参与计算。</p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>递归是程序的编程技巧。指函数调用自己。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形式参数<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要通过判断来限制出现无限递归</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示递归结束。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过调用自己来达到类似于循环的效果</span>    <span class="token function">函数名</span><span class="token punctuation">(</span>实际参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>一般流程</p><ul><li><p>确定递归的函数是用来干什么的，功能点在哪？</p></li><li><p>确定该功能能够被分解成更小的功能</p></li><li><p>找到结束递归的分界点</p></li></ul></li><li><p>作用</p><ul><li>简化循环代码</li><li>采用分治算法，让逻辑复杂的情况简单处理（将大问题分解成一个个小的问题）</li></ul></li><li><p>常见例子</p><ul><li><p>阶乘</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//递归案例</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>累计(加减乘除)</p></li><li><p>斐波那契数列</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//斐波那契数列 的第n项 </span>   <span class="token comment" spellcheck="true">// 0 1 1 2 3 5 8 13 21 34 ... </span>   <span class="token comment" spellcheck="true">//f(n) = f(n-1) +f(n-2)</span>   <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// f(5): f(1)+f(2)+f(2)+f(1)+f(2) =0+1+1+0+1 = 3</span></code></pre></li><li><p>快速排序</p><blockquote><p>核心思想在于将排序过程分为多次，每次会吧一个数（基准数）放在合适的位置，并且该数左边的都小于，右边的都大于该数。</p><p>快速排序利用递归来分别对左边和右边也进行排序过程</p></blockquote></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span>left<span class="token punctuation">,</span>j <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">3</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>               <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一次结束</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;指的是一个函数能够使用另一个函数里的变量。&lt;/p&gt;
&lt;p&gt;函数嵌套函数，内部函数就是闭包&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="ES5进阶" scheme="https://codehan045.github.io/tags/ES5%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>ES6面向对象</title>
    <link href="https://codehan045.github.io/posts/81af4647.html"/>
    <id>https://codehan045.github.io/posts/81af4647.html</id>
    <published>2021-09-29T15:59:43.000Z</published>
    <updated>2021-09-30T15:24:18.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象的基础概念"><a href="#面向对象的基础概念" class="headerlink" title="面向对象的基础概念"></a>面向对象的基础概念</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><ul><li>类：具有相同属性和行为事物的统称。比如人、动物、鸟</li><li>对象：类的具体的表现。比如老王对于人这个类来说是一个具体的表现。老王家的奔驰对于汽车来说是一个具体的表现。</li></ul><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul><li>类是对象的模板，对象是类的一个实例(具体表现)</li></ul><h3 id="属性和行为"><a href="#属性和行为" class="headerlink" title="属性和行为"></a>属性和行为</h3><ul><li>属性：指某个事物上的特征。比如对于人这个类来说，它的对象都有姓名、年龄、性别、籍贯、肤色、发色等属性。</li><li>行为：指事物的动作的描述或具有的功能。比如对于人来说，有吃饭、睡觉、上厕所、唱、跳、rap等。</li></ul><h2 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><ul><li>面向过程就是分析出解决问题的步骤，然后用方法实现每个步骤，按照流程依次调用方法，最后完成程序</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>是一种编程的思想。指以类和对象为核心来将程序拆分成多个模块，然后模块间相互调用来完成程序的一整套设计理念，用于替代面向过程</li></ul><h3 id="面向对象和面向过程的比较"><a href="#面向对象和面向过程的比较" class="headerlink" title="面向对象和面向过程的比较"></a>面向对象和面向过程的比较</h3><ul><li>面向对象是多个模块进行处理，如果中间某个模块需要更改，其他模块可以直接进行复用。而面向过程如果中间的步骤需要更换，可能会整个流程需要重写书写</li><li>低耦合：程序的一段代码更改之后不会影响到其他代码。</li><li>维护性更高： 需要更新，面向对象直接加一个新的模块即可。但面向过程需要重新书写整个流程。</li></ul><h4 id="优劣对比"><a href="#优劣对比" class="headerlink" title="优劣对比"></a>优劣对比</h4><ul><li>面向过程：<ul><li>优点 ：性能比面向对象高，因为类调用时要实例化，比较消耗资源。</li><li>缺点：没有面向对象易维护，易复用，易扩展</li></ul></li><li>面向对象：<ul><li>优点：易维护，易复用，易扩展，面向对象具有封装，继承，多态的特性，可以设计出低耦合的系统，使系统更加灵活，更易于维护；</li><li>缺点：性能比面向过程低</li></ul></li></ul><h2 id="ES6面向对象"><a href="#ES6面向对象" class="headerlink" title="ES6面向对象"></a>ES6面向对象</h2><blockquote><ul><li>类在程序中是以一种特殊的复合型的数据结构存在。类中包含了各种各样的属性和函数(行为).通过类可以创建对应的对象</li><li>ES6的面向对象的语法本质上相当于ES5面向对象的语法糖</li></ul></blockquote><h3 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h3><ul><li><p>创建类(class)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器：</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 属性值    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// t添加行为</span>    <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>根据某个类创建对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> 变量名<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">类名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>例子：<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="构造器constructor"><a href="#构造器constructor" class="headerlink" title="构造器constructor()"></a>构造器<code>constructor()</code></h3><blockquote><p><code>constructor()</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor()</code>方法，如果没有显式定义，一个空的<code>constructor()</code>方法会<strong>被默认添加。</strong></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>完成对象属性的初始化</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span>参数n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">1</span><span class="token operator">=</span> 参数<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">2</span><span class="token operator">=</span> 参数<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名n<span class="token operator">=</span> 参数n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">类名</span><span class="token punctuation">(</span>实际参数<span class="token number">1</span>，实际参数<span class="token number">2</span><span class="token punctuation">,</span>实际参数n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>构造器只会在创建对象时自行调用一次。不可手动调用</li><li><code>new</code>负责分配内存空间并生成原生对象的基本架构。构造器则负责该对象属性的初始化</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li>概念：<code>this</code>在面向对象中指的是当前创建出来对象本身。即当前对象</li><li>用处<ul><li>能够在构造器中通过<code>this.属性名</code>来修改属性的值</li><li>在行为中通过该<code>this.属性名</code>能够访问当前对象的某个属性</li></ul></li></ul><h3 id="类属性-静态属性"><a href="#类属性-静态属性" class="headerlink" title="类属性(静态属性)"></a>类属性(静态属性)</h3><blockquote><p>静态属性指的是Class本身的属性，通过类名来调用</p><p>所有对象都可以使用，即可以认为类属性是<code>所有对象共享</code>的。</p></blockquote><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    <span class="token keyword">static</span> 变量名<span class="token operator">=</span> 值<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用和修改</span>类名<span class="token punctuation">.</span>属性名类名<span class="token punctuation">.</span>属性名<span class="token operator">=</span>新数据</code></pre></li></ul><h4 id="类属性和一般属性"><a href="#类属性和一般属性" class="headerlink" title="类属性和一般属性"></a>类属性和一般属性</h4><ul><li>语法：类属性需要<code>static</code>. 一般的属性在<code>constructor</code>里通过<code>this.属性名</code>来使用</li><li>调用：类属性是类本身来调用。一般属性是通过<code>对象名.属性名</code>或在类里通过<code>this.属性名</code>来调用</li><li>应用：类属性作为对象的共享属性来使用，一般属性作为对象的私有属性来使用。</li></ul><h3 id="类行为-静态方法"><a href="#类行为-静态方法" class="headerlink" title="类行为(静态方法)"></a>类行为(静态方法)</h3><blockquote><p>在函数前添加<code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用</p><p>包含this关键字，指向类</p></blockquote><ul><li><strong>实例对象不能调用静态方法</strong></li><li>父类的静态方法，可以被子类继承</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>作为工具函数进行使用<ul><li>定义一个<code>Random</code>类，用于实现各种各样的随机数</li><li>定义一个<code>RegUtil</code>类，用于定义常用的正则表达式即检测类方法</li></ul></li></ul><h4 id="类行为-静态方法-和一般行为"><a href="#类行为-静态方法-和一般行为" class="headerlink" title="类行为(静态方法)和一般行为"></a>类行为(静态方法)和一般行为</h4><ul><li>语法：类行为需要<code>static</code>. 一般的行为直接写函数名(){}即可</li><li>调用：类行为是类本身来调用。一般行为通过对象来调用</li><li>应用：类行为一般是作为工具方法来使用。一般行为是作为对象的一般函数来使用(偏向于业务)</li></ul><h2 id="面向对象特性"><a href="#面向对象特性" class="headerlink" title="面向对象特性"></a>面向对象特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote><p>封装是将内部的实现细节封装起来，向外暴露调用的接口例如：功能函数</p><ul><li>目的是将信息隐藏</li></ul></blockquote><h4 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h4><ul><li>数据封装<ul><li><code>js</code>当中只能依靠变量的作用域来实现封装的特性,并且只能模拟出<code>public(公有)</code>和<code>private(私有)</code>两种特性。</li><li>利用创建函数的作用域达到数据封装</li></ul></li><li>封装实现<ul><li>对象内部的变化对外界是透明的,不可见。这种做法使对象之间低耦合,便于维护升级,团队协作开发。</li></ul></li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p><strong>降低耦合率 可重复调用类中的属性 提高安全性</strong></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>继承是子对象可以继承父对象的属性和行为，即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为</p></blockquote><p><strong>本质还是基于原型链的继承</strong></p><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>extends关键字用于表示是哪一个类继承了父类，子类会拥有父类的行为。</li><li>super()是用于将父类里的属性赋给子类</li><li>子类不会继承父类的<code>类属性和类行为</code></li><li>如果子类的属性都是来自于父类，那么子类的<code>构造函数</code>可以省略不写</li><li>减少类的定义代码</li></ul><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><blockquote><p><code>super</code>这个关键字，既可以当作函数使用，也可以当作对象使用，<code>ES6</code>要求子类的构造函数必须执行一次<code>super</code>函数。</p><ul><li><p><code>super</code>作为函数调用时，代表父类的构造函数</p></li><li><p><code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p></li></ul></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意，使用<code>super</code>的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</strong></p><h4 id="子类扩展"><a href="#子类扩展" class="headerlink" title="子类扩展"></a>子类扩展</h4><ul><li>子类除了可以使用父类的属性和行为之外，本身可以写自己的属性和行为。</li><li>如果子类有自己的属性的话，那么需要自己书写<code>构造函数</code></li></ul><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><ul><li>子类可以重新编写父类已经有的行为同名函数。这样程序在调用行为时，会优先调用子类已经重写的行为，如果没有重写，直接调用父类写的行为。</li><li>重写是针对父类有的行为。子类自己扩展的行为不算重写。</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>一种定义，多种实现，即在JavaScript中，一个行为传入不同类的对象，该行为会有不同的效果。天生具备多态</p></blockquote><ul><li> 实现多态的三个必要条件：</li></ul><ol><li>继承</li><li>重写<br><strong>通俗来讲就是同一个函数，因为传递的参数列表不同，可以实现的不同的功能</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面向对象的基础概念&quot;&gt;&lt;a href=&quot;#面向对象的基础概念&quot; class=&quot;headerlink&quot; title=&quot;面向对象的基础概念&quot;&gt;&lt;/a&gt;面向对象的基础概念&lt;/h2&gt;&lt;h3 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript进阶" scheme="https://codehan045.github.io/tags/javascript%E8%BF%9B%E9%98%B6/"/>
    
    <category term="ES6" scheme="https://codehan045.github.io/tags/ES6/"/>
    
    <category term="面向对象" scheme="https://codehan045.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>ES5面向对象(原型与原型链及继承)</title>
    <link href="https://codehan045.github.io/posts/f45f3dd2.html"/>
    <id>https://codehan045.github.io/posts/f45f3dd2.html</id>
    <published>2021-09-27T11:11:15.000Z</published>
    <updated>2021-10-01T10:22:57.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型及相关概述"><a href="#原型及相关概述" class="headerlink" title="原型及相关概述"></a>原型及相关概述</h2><h3 id="prototype-函数的属性：对象"><a href="#prototype-函数的属性：对象" class="headerlink" title="prototype (函数的属性：对象{})"></a><code>prototype</code> (函数的属性：对象{})</h3><blockquote><p> 原型是JavaScript独有的行为继承机制。主要内容是每个JavaScript函数在创建的时候默认会向该函数添加一个属性(<code>prototype</code>),这个属性对应一个Object对象，称为原型对象(原型在程序里面默认就是一个Object对象)</p></blockquote><ul><li>函数作为普通函数调用prototype没有任何作用</li><li>通过函数创建的对象可以直接使用原型对象上的行为。</li><li>原型对象就相当于一个公共的区域，所有<strong>同一个类的实例都可以访问到这个原型对象</strong>，我们可以将对象中共有的内容，统一设置到原型对象中,<strong>继承的基础</strong></li><li>Object类是JavaScript自带的一个类，默认该类的对象会作为所有函数的原型对象。</li><li>我们给原型上添加行为，通过函数生成的对象也可以使用新增的行为</li><li>各自函数的原型不是同一个对象</li></ul><h3 id="proto-对象Object的一个属性：对象"><a href="#proto-对象Object的一个属性：对象" class="headerlink" title="__proto__(对象Object的一个属性：对象{})"></a><code>__proto__</code>(对象Object的一个属性：对象{})</h3><blockquote><p>原型的链接点</p></blockquote><ul><li><p>其实不属于构造函数的原型，而是来自于Object.prototype</p></li><li><p>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过<code>__proto__</code>来访问该属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><p>当读取实例属性时候，如果找不到，就去继承原型中的属性，如果还查不到？那咋整？当然是再去找原型的原型喽，知道找到最顶层为止</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Daisy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Daisy</span><span class="token comment" spellcheck="true">//删除person自身属性name</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的为原型对象的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Kevin</span></code></pre><blockquote><p>这里面的首先给实例原型赋属性值name为“Kevin”，下面给实例化对象也赋值属性name为“Daisy”，第一遍访问person的name属性时，值为“Daisy”，delete之后，实例化本身的name已经为空，所以再次访问的时候，就会往上一层寻找name属性，即通过prototype赋的name值，所以这时的值是“Kevin“。</p></blockquote></li></ul><p><strong>对象的<code>__proto__</code>保存着该对象构造函数的<code>prototype</code></strong></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h3><ul><li><p>构造函数的<code>prototype</code>指向原型，原型对象的<code>constructor</code>指向构造函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre></li><li><p>可以被更改</p></li></ul><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><ul><li><p>原型对象也是对象，所以它也有原型，</p></li><li><p>当我们使用一个对象的属性或方法时，会现在自身中寻找， </p><p>自身中如果有，则直接使用 </p></li><li><p>如果没有则去原型对象中寻找，如果原型对象中有，则使用，</p></li><li><p>如果没有则去原型的原型中寻找,直到找到Object对象的原型，</p></li><li><p>Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null</span></code></pre></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>以一个对象为基准，<code>__proto__</code>为连接的链条，一直到<code>Object.prototype.__proto__</code>为止</p></blockquote><ul><li>JavaScript 每个对象都有一个私有属性 <code>__proto__</code> 指向它的构造函数的原型对象 <code>prototype</code>。该原型对象也有一个 <code>__proto__</code>，层层向上直到一个对象的原型对象<code>__proto__</code>为 <code>null</code>，作为这个原型链中的最后一个环节</li><li>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，会在该对象的原型链上依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</li><li>意义：在ES5中实现继承</li></ul><h2 id="Function和Object的特殊性"><a href="#Function和Object的特殊性" class="headerlink" title="Function和Object的特殊性"></a>Function和Object的特殊性</h2><ul><li><code>Function</code>和<code>Object</code>既是函数又是对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Function<span class="token punctuation">.</span>Prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//Text构造底层原理 </span><span class="token keyword">const</span> Text<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//底层规范  Function 构造了本身</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Object<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="判断对象中是否包含某属性"><a href="#判断对象中是否包含某属性" class="headerlink" title="判断对象中是否包含某属性"></a>判断对象中是否包含某属性</h3><ul><li><p><code>hasOwnProperty</code> 判断某个属性是否是自身的属性，不考虑继承过来的属性。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>in</code>判断某个属性是否是自身的属性，考虑继承过来的属性</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="继承-ES5"><a href="#继承-ES5" class="headerlink" title="继承(ES5)"></a>继承(ES5)</h2><ul><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>phone  <span class="token operator">=</span>phone<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">GrandPa</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用原型链实现继承</span><span class="token comment" spellcheck="true">//老爸继承爷爷</span>Father<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GrandPa</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//儿子继承老爸</span>Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">'10086'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sun</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>存在的问题</p><ul><li>继承的属性值是默认的，固定的，不符合继承的实现</li></ul></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>子构造函数的原型设置为父构造函数的实例对象</p><pre class=" language-js"><code class="language-js">子函数名<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">父函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>子函数第一行利用<code>Call</code>让子函数创建出来的对象拥有父构造函数中定义的属性和行为</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span>参数n<span class="token punctuation">)</span><span class="token punctuation">{</span>    父函数名<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span>参数n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><blockquote><p>注：call  本身是JavaScript的一个内置函数（之后会再进行补充）</p><ul><li><p>作用：能够改变一个函数的执行环境，实现’借用’</p></li><li><p>语法</p><pre class=" language-js"><code class="language-js">函数名<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>新的执行环境<span class="token punctuation">,</span>函数调用需要的参数<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>以新的执行环境调用一次函数，函数所需的参数，是从call的第二个实际参数开始。</p></li></ul><p>在ES5中的作用’</p><ul><li>把子类作为父类构造函数的执行环境并执行一次父类的构造。目的是为了子类对象拥有父类构造函数里定义的属性和行为</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原型及相关概述&quot;&gt;&lt;a href=&quot;#原型及相关概述&quot; class=&quot;headerlink&quot; title=&quot;原型及相关概述&quot;&gt;&lt;/a&gt;原型及相关概述&lt;/h2&gt;&lt;h3 id=&quot;prototype-函数的属性：对象&quot;&gt;&lt;a href=&quot;#prototype-函数的属性</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES5" scheme="https://codehan045.github.io/tags/ES5/"/>
    
    <category term="javascript进阶" scheme="https://codehan045.github.io/tags/javascript%E8%BF%9B%E9%98%B6/"/>
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>get和post请求</title>
    <link href="https://codehan045.github.io/posts/707991da.html"/>
    <id>https://codehan045.github.io/posts/707991da.html</id>
    <published>2021-09-26T11:14:53.000Z</published>
    <updated>2021-09-26T16:23:22.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><ul><li><p><code>GET</code>方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据</p></li><li><p><strong>获取资源</strong>，用来请求访问已被URI（统一资源标志符，和URL是包含和被包含的关系）识别的资源</p></li></ul><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><ul><li><code>POST</code>方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或<strong>副作用</strong></li></ul><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul><li><code>GET</code>和<code>POST</code>，两者是<code>HTTP</code>协议中发送请求的方法</li><li>本质上都是<code>TCP</code>链接，并无差别</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>从<code>w3schools</code>得到的标准答案的区别如下：</p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中</li></ul><h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><ol><li><p>请求参数长度限制：</p><ul><li>在HTTP协议中没有对URL长度进行限制，这个限制是<strong>不同的浏览器及服务器</strong>由于有不同的规范而带来的限制。</li></ul></li><li><p>GET请求一定不能用<code>request body</code>传输数据</p><ul><li>GET<strong>可以带request body，但不能保证一定能被接收到</strong>，不同的服务器，会有不同的处理</li></ul></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><strong>请求参数</strong>：GET请求参数是通过URL传递的，多个参数以&amp;连接，POST请求放在request body中。</li><li><strong>请求缓存</strong>：GET请求会被缓存，而POST请求不会，除非手动设置。</li><li><strong>收藏为书签</strong>：GET请求支持，POST请求不支持。</li><li><strong>安全性</strong>：POST比GET安全，GET请求在浏览器回退时是无害的，而POST会再次请求。</li><li><strong>历史记录</strong>：GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留。</li><li><strong>编码方式</strong>：GET请求只能进行url编码，而POST支持多种编码方式。</li><li><strong>对参数的数据类型</strong>：GET只接受ASCII字符，而POST没有限制。</li></ul><blockquote><p>通过浏览器地址栏输入URL访问资源的方式都是<code>GET</code>请求。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GET请求&quot;&gt;&lt;a href=&quot;#GET请求&quot; class=&quot;headerlink&quot; title=&quot;GET请求&quot;&gt;&lt;/a&gt;GET请求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;GET&lt;/code&gt;方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="get" scheme="https://codehan045.github.io/tags/get/"/>
    
    <category term="post" scheme="https://codehan045.github.io/tags/post/"/>
    
    <category term="JS" scheme="https://codehan045.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之原生对象ES5</title>
    <link href="https://codehan045.github.io/posts/70daaa09.html"/>
    <id>https://codehan045.github.io/posts/70daaa09.html</id>
    <published>2021-09-25T12:29:39.000Z</published>
    <updated>2021-09-27T11:07:46.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象的概述"><a href="#对象的概述" class="headerlink" title="对象的概述"></a>对象的概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>为了更方便的描述复杂数据，用数组描述，操作不便，还需记忆每个下标对应的意义</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>JavaScript 原生对象是一种引用的数据类型，该数据可以包含多个基本类型的数据</li><li>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>内置对象</p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：<code>Math String Number Boolean Function Object....</code></li></ul></li><li><p>宿主对象</p><ul><li>由JS的运行环境提供的对象，目前来讲，主要是指由浏览器提供的对象</li><li>比如：<code>BOM、DOM</code></li></ul></li><li><p>自定义对象</p><ul><li>由我们自己定义的创建的对象</li></ul></li></ol><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h4><ul><li><p> 使用new关键字调用的函数，是构造函数<code>function</code></p></li><li><p>构造函数是专门用来创建对象的函数</p></li><li><p>使用typeof检查一个对象时，会返回object</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="字面量创建对象"><a href="#字面量创建对象" class="headerlink" title="字面量创建对象"></a>字面量创建对象</h4><ul><li><p>定义一个空的对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 对象变量名 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>定义带有默认数据的对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 对象变量名 <span class="token operator">=</span> <span class="token punctuation">{</span>    属性名<span class="token number">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">,</span>    属性名<span class="token number">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">,</span>    属性名<span class="token number">3</span><span class="token punctuation">:</span> 属性值<span class="token number">3</span><span class="token punctuation">,</span>    属性名n<span class="token punctuation">:</span> 属性值n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>在对象中保存的值称为属性</p></blockquote><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>向对象中添加或修改属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//添加</span>对象<span class="token punctuation">.</span>属性名<span class="token operator">=</span>属性值；obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"孙悟空"</span><span class="token punctuation">;</span>对象<span class="token punctuation">[</span><span class="token string">'属性名'</span><span class="token punctuation">]</span><span class="token operator">=</span>属性值；<span class="token comment" spellcheck="true">//修改</span>对象<span class="token punctuation">[</span><span class="token string">'属性名'</span><span class="token punctuation">]</span><span class="token operator">=</span>新值；对象<span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 新值；obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span></code></pre></li><li><p>读取对象中的属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.方式一</span>对象<span class="token punctuation">.</span>属性名console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//2.方式二</span>对象<span class="token punctuation">[</span><span class="token string">'属性名'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>；</code></pre><p><strong>如果读取到对象中没有的属性，不会报错而是返回<code>undefined</code></strong></p></li><li><p>删除对象的属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">delete</span>  对象<span class="token punctuation">.</span>属性名；<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre></li></ul><h4 id="属性名和属性值"><a href="#属性名和属性值" class="headerlink" title="属性名和属性值"></a>属性名和属性值</h4><h5 id="属性名"><a href="#属性名" class="headerlink" title="属性名"></a>属性名</h5><ul><li><p>对象的属性名不强制要求遵守标识符的规范</p></li><li><p>如果要使用特殊的属性名，不能采用<code>.</code>的方式来操作,读取时也需使用这种方式</p><pre class=" language-js"><code class="language-js">对象<span class="token punctuation">[</span><span class="token string">"属性名"</span><span class="token punctuation">]</span> <span class="token operator">=</span> 属性值</code></pre></li><li><p>使用<code>[ ]</code>这种形式去操作属性，更加的灵活，</p></li><li><p> 在<code>[ ]</code>中可以直接传递一个变量，来读取对应属性名的属性值</p></li></ul><h5 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h5><ul><li> <code>JS</code>对象的属性值，可以是任意的数据类型，甚至也可以是一个对象</li></ul><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><ul><li><p><code>in</code>运算符</p><ul><li>通过该运算符可以检查一个对象中是否含有指定的属性</li><li>如果有则返回true，没有则返回false</li></ul><pre class=" language-js"><code class="language-js"><span class="token string">"属性名"</span> <span class="token keyword">in</span> 对象<span class="token comment" spellcheck="true">//检查obj中是否含有test2属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test2"</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>工厂模式创建对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用工厂方法创建对象</span><span class="token comment" spellcheck="true">//通过该方法可以大批量的创建对象</span><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age <span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个新的对象 </span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向对象中添加属性</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将新的对象返回</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用工厂方法创建的对象，使用的构造函数都是Object</span><span class="token comment" spellcheck="true">//所以创建的对象都是Object这个类型，</span><span class="token comment" spellcheck="true">//就导致我们无法区分出多种不同类型的对象</span></code></pre></li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li><p>专门用于创建对象，对对象中的属性等进行初始化</p></li><li><p> 构造函数就是一个普通的函数，创建方式和普通函数没有区别,<strong>不同的是构造函数习惯上首字母大写</strong></p></li><li><p><strong>构造函数和普通函数的区别就是<code>调用方式</code>的不同，普通函数是直接调用，而构造函数需要使用new关键字来调用</strong></p></li><li><p>使用同一个构造函数创建的对象，称为一类对象，一个构造函数称为一个类</p></li><li><p>通过一个构造函数创建的对象，称为该类的实例</p></li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol><li>立刻创建一个新的对象</li><li>将新建的对象设置为函数中<code>this</code>,在构造函数中可以使用<code>this</code>来引用新建的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回,在创建对象时，用一个变量接收</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;对象的概述&quot;&gt;&lt;a href=&quot;#对象的概述&quot; class=&quot;headerlink&quot; title=&quot;对象的概述&quot;&gt;&lt;/a&gt;对象的概述&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES5" scheme="https://codehan045.github.io/tags/ES5/"/>
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
    <category term="原生对象" scheme="https://codehan045.github.io/tags/%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JS垃圾回收机制及内存泄露</title>
    <link href="https://codehan045.github.io/posts/d3671726.html"/>
    <id>https://codehan045.github.io/posts/d3671726.html</id>
    <published>2021-09-25T09:03:46.000Z</published>
    <updated>2021-09-25T09:34:12.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><ul><li>概念</li></ul><blockquote><p>来处理程序运行中产生的垃圾,没有引用的对象等</p></blockquote><ul><li><strong>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作。</strong></li><li><strong>我们需要做的只是要将不再使用的对象设置为null 即可</strong>。</li></ul><h3 id="内部算法"><a href="#内部算法" class="headerlink" title="内部算法"></a>内部算法</h3><p>基本的垃圾回收算法称为<strong>“标记-清除”</strong>，定期执行以下“垃圾回收”步骤:</p><ul><li>垃圾回收器获取根并<strong>“标记”</strong>(记住)它们。</li><li>然后它访问并“标记”所有来自它们的引用。</li><li>然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。</li><li>以此类推，直到有未访问的引用(可以从根访问)为止。</li><li>除标记的对象外，所有对象都被删除。</li></ul><blockquote><p>什么是垃圾</p><ul><li>一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。</li></ul></blockquote><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><blockquote><p>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p></blockquote><h3 id="常见的内存泄露"><a href="#常见的内存泄露" class="headerlink" title="常见的内存泄露"></a>常见的内存泄露</h3><ul><li><p>作用域未释放（闭包）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> leakArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>leak <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>leakArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"leak"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>每次调用 leak 方法，都会导致局部变量 leakArray 不停增加且不被释放。</p><p>闭包可以维持函数内部变量驻留内存，使其得不到释放</p></li></ul></li><li><p> 没必要的全局变量</p></li></ul><p>  声明过多的全局变量，会导致变量常驻内存，要直到进程结束才能够释放内存。</p><ul><li><p>无效的 DOM 引用</p></li><li><p>定时器未清除</p></li></ul><h4 id="内存泄漏优化"><a href="#内存泄漏优化" class="headerlink" title="内存泄漏优化"></a>内存泄漏优化</h4><p>1.解除引用</p><ul><li><p>在执行中的代码只保存必要的数据。一旦数据不再有用，通过将其值设置为 null 来释放其引用——这个做法叫做解除引用（dereferencing）</p></li><li><p>解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收</p></li></ul><ol start="2"><li>提供手动清空变量的方法</li><li>在业务不需要用到的内部函数，可以重构在函数外，实现解除闭包</li><li>避免创建过多生命周期较长的对象，或将对象分解成多个子对象</li><li>避免过多使用闭包</li><li>注意清除定时器和事件监听器</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;垃圾回收机制&quot;&gt;&lt;a href=&quot;#垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收机制&quot;&gt;&lt;/a&gt;垃圾回收机制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;来处理程序运行中产生的垃圾,没有引用</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript高级" scheme="https://codehan045.github.io/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
    <category term="垃圾回收机制" scheme="https://codehan045.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>变量原理</title>
    <link href="https://codehan045.github.io/posts/58f885a1.html"/>
    <id>https://codehan045.github.io/posts/58f885a1.html</id>
    <published>2021-09-18T09:23:18.000Z</published>
    <updated>2021-10-01T10:18:59.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量分类-ES5"><a href="#变量分类-ES5" class="headerlink" title="变量分类(ES5)"></a>变量分类(ES5)</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li><p>定义：定义在函数外的变量，每个都是全局变量。</p></li><li><p>特点</p><ul><li>页面上任何地方都可以使用</li></ul></li></ul><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>定义在函数内部的变量。</li><li>特点：<ul><li>只能在函数内进行使用，函数外不能使用</li></ul></li></ul><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><blockquote><ul><li>能够使用局部变量就用局部变量，可以极大的提高内存空间的利用率</li></ul></blockquote><h2 id="let和const命令-ES6"><a href="#let和const命令-ES6" class="headerlink" title="let和const命令(ES6)"></a>let和const命令(ES6)</h2><h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>ES6新增了<code>let</code>命令，用来声明变量，用法类似于<code>var</code> 但所声明的变量，只在<code>let</code>所在的代码块中起作用；</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token keyword">let</span>  a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ReferenceError: a is not defined.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><blockquote><p>在上述代码中，同样是在代码块中声明了变量a和b，但在代码快外输出，用let定义的报错，用var 定义的将结果输出，表明let声明的变量只在它所在的代码块中才有效</p></blockquote><h4 id="for循环中的使用"><a href="#for循环中的使用" class="headerlink" title="for循环中的使用"></a>for循环中的使用</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span></code></pre><blockquote><p>上面的代码，用let定义的i只在for循环体内有效，在循环体外就会报错</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token comment" spellcheck="true">//所有数组a的成员里面的i，指向的都是同一个i</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><blockquote><p>变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6<br>JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</p></blockquote><ul><li><p><code>for</code>循环设置循环变量的那部分是父作用域，循环体内部是子作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">//输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域（同一个作用域不可使用 let 重复声明同一个变量）</span></code></pre></li></ul><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><ul><li>不能在定义之前使用，它声明的变量一定要在声明后使用，否则报错</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//var 定义</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 undefined</span><span class="token keyword">var</span> cout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//let定义</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错  ReferenceError</span><span class="token keyword">let</span> cout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><ul><li>只要在块级作用域内使用let命令，它所声明的变量就‘绑定’ 这个区域，不再受外部的影响</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>上面代码中，存在全局变量<code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错</p><p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的，这种在语法上,称为<code>暂时性死区</code>（TDZ）;</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">var</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">let</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//未声明就使用</span><span class="token comment" spellcheck="true">// ReferenceError: x is not defined</span></code></pre><blockquote><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p></blockquote><h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><ul><li><code>let</code>不允许在相同作用域内，重复声明同一变量</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不同的块作用域</span>      <span class="token keyword">let</span> arg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不报错</span></code></pre><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><ul><li>一对<code>{}</code> 包含的区域</li><li>ES6 允许块级作用域的任意嵌套。</li><li>内层作用域可以定义外层作用域的同名变量</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span><span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>insane<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第四层的作用域无法读取到第五层作用域的内部变量</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span><span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p></li><li><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SyntaxError: Missing initializer in const declaration</span></code></pre></li><li><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效</p></li><li><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用</p></li><li><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p></li></ul><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><blockquote><p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动.</p><ul><li>对于基本数据类型，值就保存在变量指向的那个内存地址，因此等同于常量</li><li>对于引用数据类型，变量指向的内存地址，是不可变的，对于它的值是不能控制的</li></ul></blockquote><h3 id="var-let-const之间的联系和区别"><a href="#var-let-const之间的联系和区别" class="headerlink" title="var let const之间的联系和区别"></a>var let const之间的联系和区别</h3><ul><li>联系：都是用于定义变量</li><li>区别<ul><li><code>var</code>和<code>let</code>保存的数据可以更改，<code>const</code>保存的数据”不可被更改”</li><li><code>let</code>和<code>const</code>具有块级作用域、<code>TDZ</code>、”不存在声明提升”，同一块级作用域变量不能重复定义。var只有全局作用域或函数作用域、存在声明提升。</li></ul></li><li>一般使用<code>const</code>来定义变量，如果要改变数据类型的话用let，优先级 <code>const &gt;let &gt;var</code></li></ul><h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><h3 id="数据（一切皆数据）"><a href="#数据（一切皆数据）" class="headerlink" title="数据（一切皆数据）"></a>数据（一切皆数据）</h3><ol><li><p>什么是数据</p><p>存储在内存中代表特定信息，本质上是010101…</p></li><li><p>数据的特点</p><p>可传递、可运算</p></li><li><p>内存中所有操作的目标：数据</p></li></ol><h3 id="内存空间划分"><a href="#内存空间划分" class="headerlink" title="内存空间划分"></a>内存空间划分</h3><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ul><li><p>概念</p><p>内存条通电之后产生的可存储数据的空间（临时的）</p></li><li><p>内存的产生和死亡</p><p>内存条（电路板）==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;断电==&gt;内存空间和数据都消失</p></li><li><p>一个内存的两个数据</p><p>内部存储的数据</p><p>地址值</p></li></ul><h4 id="javaScript中的内存"><a href="#javaScript中的内存" class="headerlink" title="javaScript中的内存"></a>javaScript中的内存</h4><ul><li>在物理角度下：JavaScript内存就一块区域，我们称为”堆(heap)”.</li><li>从逻辑角度下:<ol><li>栈(stack):存放基本类型的数据以及引用地址，全局变量/局部变量</li><li>堆:存放所有的对象数据<ol><li>数组</li><li>函数</li><li>自定义对象</li><li>dom元素</li></ol></li><li>常量池：存放常量(const 变量)</li></ol></li></ul><h3 id="变量的空间分配"><a href="#变量的空间分配" class="headerlink" title="变量的空间分配"></a>变量的空间分配</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>当定义一个基本类型的数据时，JavaScript会在栈里分配一块内存空间(大小是固定的)用于保存数据，将该区域的内存地址赋给变量。即变量保存的是内存地址。当我们访问变量时，JavaScript会通过变量保存的内存地址找到对应的数据并使用。<ol><li>如果遇到<code>var a=1;var c=a</code>这种情况时，实际上创建变量<code>c</code>时，JavaScript会分配新的内存空间，把变量<code>a</code>的值复制到空间里，并把新的内存地址赋给变量<code>c</code>。即变量<code>a</code>和变量<code>c</code>的内存地址是不一样的，互不干扰。</li><li>每声明一个变量，就会在栈中开辟一个内存空间</li><li>在栈内存中的数据发生复制行为时，系统会自动为新的变量分配一个新值，最后这些变量都是 <strong>相互独立，互不影响的</strong>。</li></ol></li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>如果一个变量的数据是对象，那么JavaScript会在堆里分配一块可动态增长的内存区域保存对象数据，然后再栈里分配一块区域保存对象数据对应堆空间的内存地址，最后将栈里对应空间的内存地址赋给变量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210926201708.jpg" alt="内存空间"></p><h4 id="内存、变量、数据三者之间的关系"><a href="#内存、变量、数据三者之间的关系" class="headerlink" title="内存、变量、数据三者之间的关系"></a>内存、变量、数据三者之间的关系</h4><ul><li>内存用来存储数据的空间</li><li>变量是内存的标识</li></ul><h3 id="执行上下文-Execution-Context"><a href="#执行上下文-Execution-Context" class="headerlink" title="执行上下文(Execution Context)"></a>执行上下文(Execution Context)</h3><ul><li>全局执行上下文<ul><li>在执行全局代码前，将<code>window</code>确定为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var 定义的全局变量==&gt;<code>undefined</code>添加为<code>window</code>的属性</li><li><code>function</code>声明的全局函数==&gt;赋值(fun)，添加为<code>window</code>的方法</li><li><code>this</code>==&gt;赋值（<code>window</code>）</li></ul></li><li>开始执行全局代码</li></ul></li><li>函数级执行上下文（独立的区域，执行完之后销毁）<ul><li>在调用函数，准备执行函数之前，创建对应的函数执行上下文对象（不是真实存在的,存在于栈中）</li><li>对局部数据进行预处理<ul><li>形参变量–&gt;赋值(实参)–&gt;添加为执行上下文的属性</li><li><code>arguments</code>-&gt;赋值(实参列表)，添加为执行上下文的属性</li><li><code>var</code> 定义的局部变量–&gt;<code>undefined</code> ,添加为执行上下文的属性</li><li><code>function</code>声明的函数==&gt;赋值(fun)，添加为执行上下文的方法</li><li><code>this</code> –&gt;赋值(调用函数的对象)</li></ul></li><li>开始执行函数体代码</li></ul></li><li>块级执行上下文，ES6认为，由<code>let</code>或<code>const</code>加一个大括号所组成的区域。</li></ul><h4 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h4><ul><li>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</li><li>在全局执行上下文<code>window</code>确定后，将其添加到栈中(压栈)</li><li>在函数执行上下文创建后，将其添加到栈中（压栈）</li><li>在当前函数执行完之后，将栈顶的对象移除(出栈)</li><li>当所有的代码执行完后，栈中只剩下<code>window</code></li></ul><pre class=" language-JS"><code class="language-JS">console.log('gb':+i);var i=1;foo(1);function foo(i){    if(i==4){        retrun;    }    console.log('fb'+i);    foo(i+1);    console.log('fe'+i);}console.log('ge'+i);//输出/*undefinedfb 1fb 2fb 3fe 3fe 2fe 1ge 1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量分类-ES5&quot;&gt;&lt;a href=&quot;#变量分类-ES5&quot; class=&quot;headerlink&quot; title=&quot;变量分类(ES5)&quot;&gt;&lt;/a&gt;变量分类(ES5)&lt;/h2&gt;&lt;h3 id=&quot;全局变量&quot;&gt;&lt;a href=&quot;#全局变量&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript高级" scheme="https://codehan045.github.io/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化-重绘和回流</title>
    <link href="https://codehan045.github.io/posts/ce2e7d6d.html"/>
    <id>https://codehan045.github.io/posts/ce2e7d6d.html</id>
    <published>2021-09-11T09:13:01.000Z</published>
    <updated>2021-09-11T09:59:58.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>指的是浏览器从网络上或本地加载网页到页面上显示内容的整个过程</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>主要部分是通过浏览器内核来完成，主要参与部分为浏览器渲染引擎和 JavaScript 解析器</li><li>因为每个浏览器的内核不一致，所以渲染流程大同小异</li></ul><h3 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h3><ol><li>根据 <code>HTML</code> 结构生成<code>DOM</code>树</li><li>根据 <code>CSS</code> 生成 <code>CSSOM</code></li><li>将 <code>DOM</code> 和 <code>CSSOM</code> 整合形成<code> RenderTree</code></li><li>根据<code>RenderTree</code>开始渲染和展示</li><li>遇到<code>&lt;script&gt;</code>时，会执行并阻塞渲染</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浏览器渲染流程&quot;&gt;&lt;a href=&quot;#浏览器渲染流程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染流程&quot;&gt;&lt;/a&gt;浏览器渲染流程&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>进制与位运算符</title>
    <link href="https://codehan045.github.io/posts/eb7734c6.html"/>
    <id>https://codehan045.github.io/posts/eb7734c6.html</id>
    <published>2021-09-11T08:20:39.000Z</published>
    <updated>2021-09-11T09:59:58.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机中的单位"><a href="#计算机中的单位" class="headerlink" title="计算机中的单位"></a>计算机中的单位</h2><h3 id="常⽤计算机单位-bit-位"><a href="#常⽤计算机单位-bit-位" class="headerlink" title="常⽤计算机单位 bit(位):"></a>常⽤计算机单位 bit(位):</h3><ul><li><p>1位能够存放⼀个0 或⼀个1 </p></li><li><p><code>byte(字节)</code>:1字节 = 8 bit </p></li><li><p><code>kb</code>:1kb = 1024byte </p></li><li><p><code>mb</code>: 1mb =1024kb </p></li><li><p><code>gb</code>:1GB = 1024MB </p></li><li><p><code>tb</code>:1TB =1024GB </p></li><li><p><code>pb</code>:1PB = 1024TB </p></li><li><p><code>eb</code>:1EB = 1024PB </p></li><li><p><code>zb</code>:1ZB = 1024EB</p></li></ul><h3 id="计算机的储存原理"><a href="#计算机的储存原理" class="headerlink" title="计算机的储存原理"></a>计算机的储存原理</h3><ul><li>在计算机中，任何⼀个⽂件在底层中都是以⼀⼤串的0或 1 的集合来保存的。</li><li>只有安装了对应⽂件的编码解码器，计算机才能够正确识别对应的⽂件。如没有播放 器，就⽆法执⾏视频或⾳频⽂件。编码解码器就可以将指定顺序的0和1的集合解析成视 频或⾳频。 </li><li>对于⽂件的处理，就是计算机对该⽂件的底层存储的0和1进⾏处理。</li><li>1位能够存放⼀个0或1，⼀个字节能够存储8位。所以1个字节能够表示 <code>256</code> 种0和1不同 的组合,1个字节能够表示256个不同的⽂字，如果⽤来表示⾮负数，表示<code>0~255</code>。两个字节 能够表示 2的16次⽅ 即<code>65536</code>个⽂字</li></ul><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>⽤于科学计数的语法或叫规则。平时⽣活中的数字计数⽅式就是⼗进制。其他的常⻅进 制有⼆进制、⼗六进制。</li></ul><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><ul><li><p>二进制（binary)  0,1, 满2进1，以<code>0b</code>或<code>0B</code>开头。</p><pre class=" language-js"><code class="language-js"><span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">+</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0001</span><span class="token number">0000</span> <span class="token number">0001</span> <span class="token operator">+</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0010</span><span class="token number">0000</span> <span class="token number">0011</span> <span class="token operator">+</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0100</span><span class="token number">0000</span> <span class="token number">0011</span> <span class="token operator">+</span> <span class="token number">0000</span> <span class="token number">0011</span> <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0110</span></code></pre></li></ul><h3 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h3><ul><li>十进制（decimal)  0-9, 满10进1  ⽣活中使⽤的计数规则。</li></ul><h3 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h3><ul><li>八进制（octal): 0-7,满8进1.以数字<code>0</code>开头表示。</li></ul><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><ul><li>指数字的计数规则。0-9以及A~F来表示，逢16进1 </li><li>⼀个⼗六进制⽤4个⼆进制来表示 </li><li>为了⼗六进制和⼗进制的区分，那么，可以⽤ <code>0x</code>或<code># </code>来表示⼗六进制的前缀,或 <code>H </code>来作 为⼗六进制的后缀。⽆论前缀或后缀效果都⼀样。计算机中⽤的是前缀，⽐如css⾥颜⾊ 中的#就是⼗六进制的前缀</li></ul><h3 id="进制之间相互的转换"><a href="#进制之间相互的转换" class="headerlink" title="进制之间相互的转换"></a>进制之间相互的转换</h3><h4 id="二进制转为⼗进制"><a href="#二进制转为⼗进制" class="headerlink" title="二进制转为⼗进制"></a>二进制转为⼗进制</h4><ul><li><p>思想： 等于⼆进制每位数的2次⽅之和 </p></li><li><p>流程：从⼆进制的最右边第⼀个数开始，将每⼀位的数字乘以2的位数-1次⽅对应的 和进⾏相加，相加的和就是对应的⼗进制</p><pre class=" language-js"><code class="language-js"><span class="token number">0000</span> <span class="token number">0110</span><span class="token number">0</span> <span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span><span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span><span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">7</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token number">0001</span> <span class="token number">0101</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token operator">=</span> <span class="token number">21</span></code></pre></li></ul><h4 id="十进制转为二进制"><a href="#十进制转为二进制" class="headerlink" title="十进制转为二进制"></a>十进制转为二进制</h4><ul><li><p>思想：除2取余，倒序排列 </p></li><li><p>流程：将⼗进制依次进⾏ 除2运算 ，直到最后余数为0为⽌，将每次除法的余数倒序 排列，就是⼆进制</p></li></ul><h4 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h4><ul><li><p>从⼆进制最右边开始，4个⼆进制表示⼀个⼗六进制</p><pre class=" language-js"><code class="language-js"><span class="token number">0001</span>  <span class="token number">1000</span> <span class="token number">0x18</span><span class="token number">1010</span>  <span class="token number">0100</span> <span class="token number">0xa4</span></code></pre></li></ul><h4 id="八进制转二进制"><a href="#八进制转二进制" class="headerlink" title="八进制转二进制"></a>八进制转二进制</h4><ul><li><p>一个八进制数，为3个二进制数</p><pre class=" language-js"><code class="language-js"><span class="token number">0357</span><span class="token number">000</span> <span class="token number">011</span> <span class="token number">101</span> <span class="token number">111</span></code></pre></li></ul><h2 id="原码、补码、反码"><a href="#原码、补码、反码" class="headerlink" title="原码、补码、反码"></a>原码、补码、反码</h2><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><ul><li><p>概念：原码是⼈们为了⽤⼆进制来表示正负数，将⼆进制的最⾼位来表示符号位的⼀种 ⼆进制表示⽅式(逻辑上的)，为0则表示正数，为1表示负数。</p><pre class=" language-js"><code class="language-js"><span class="token number">0000</span> <span class="token number">0001</span> 表示<span class="token operator">+</span><span class="token number">1</span> <span class="token number">1000</span> <span class="token number">0011</span> 表示<span class="token operator">-</span><span class="token number">3</span> <span class="token number">1000</span> <span class="token number">0001</span>表示<span class="token operator">-</span><span class="token number">1</span></code></pre></li></ul><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><ul><li><p>概念： ⼀个数字的⼆进制反码是其原码的基础之上进⾏操作 </p></li><li><p>语法：正数的反码跟原码⼀样，负数的反码是除了符号位以外，其他位取反。</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span>和<span class="token operator">-</span><span class="token number">1</span> 的反码<span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0000</span> <span class="token number">0001</span><span class="token punctuation">(</span>反、原<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1111</span> <span class="token number">1110</span><span class="token punctuation">(</span>反<span class="token punctuation">)</span></code></pre><blockquote><p>反码能够解决数值的正确问题，但是符号位不对，引⼊了最终的计算机使⽤⽅案—补 码</p></blockquote></li></ul><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><ul><li><p>概念：是⼀种数字的⼆进制表示⽅式，也是最终计算机采⽤的⽅案。即计算机中是⽤⼆ 进制的补码来进⾏处理的。 </p></li><li><p>语法：正数的补码跟原码⼀样。负数的补码是在其反码的基础之上加1</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span> 和<span class="token operator">-</span><span class="token number">1</span> ：<span class="token number">1</span>： <span class="token number">0000</span> <span class="token number">0001</span><span class="token punctuation">(</span>补，反，原<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1111</span> <span class="token number">1111</span><span class="token punctuation">(</span>补<span class="token punctuation">)</span></code></pre><blockquote><p>综上所述，最终只有补码的⽅式能够完美解决减法的问题， 所以计算机中⼆进制的处理⽅ 式就是⽤的补码的⽅式 。</p></blockquote></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>是针对⼆进制来进⾏运算的运算符</li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li><code>^ </code> <strong>异或运算</strong>  同为0，异为1，按位异或</li><li><code> &amp;</code> <strong>与运算</strong>  </li><li><code> ~</code> <strong>取反运算</strong>  1 为0  0为 1</li><li><code>|</code>  <strong>或运算</strong></li><li><code>&gt;&gt;&gt;</code> <strong>无符号右移</strong> 最高位无论是1 还是0 空缺都补 0</li><li><code>&lt;&lt;</code> <strong>逻辑左移</strong>   所有的⼆进制向左移动指定的位数。⽆论正负，移动之后，低位⼀律⽤0进⾏补充</li><li><code>&gt;&gt;</code><strong>逻辑右移</strong>  所有的⼆进制向右移动指定的位数。⾼位如果是正数，那么以0作为补充，负数以1作为 补充</li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210911171040.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机中的单位&quot;&gt;&lt;a href=&quot;#计算机中的单位&quot; class=&quot;headerlink&quot; title=&quot;计算机中的单位&quot;&gt;&lt;/a&gt;计算机中的单位&lt;/h2&gt;&lt;h3 id=&quot;常⽤计算机单位-bit-位&quot;&gt;&lt;a href=&quot;#常⽤计算机单位-bit-位&quot; class</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5应用</title>
    <link href="https://codehan045.github.io/posts/531698e5.html"/>
    <id>https://codehan045.github.io/posts/531698e5.html</id>
    <published>2021-09-10T06:10:16.000Z</published>
    <updated>2021-09-10T06:55:25.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML拖拽"><a href="#HTML拖拽" class="headerlink" title="HTML拖拽"></a>HTML拖拽</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>HTML5 自带了拖拽相关的api(JavaScript),能够实现页面标签进行拖拽操作。</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li><p>给被拖拽的标签添加属性 <code>draggable=true</code></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>标签名 draggable<span class="token operator">=</span><span class="token string">'true'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>标签名<span class="token operator">></span></code></pre></li><li><p>给放置标签设置<code>dragover</code> 事件，用于取消禁止放置</p><pre class=" language-js"><code class="language-js">放置标签变量名<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>当放置标签取消默认行为后，可以设置<code>drop</code>事件，当拖拽元素在放置标签上释放时，放置标签会触发该事件，在该事件中，完成标签的位置切换操作</p><pre class=" language-js"><code class="language-js">放置标签变量名<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//交换标签位置的代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>HTML5 提供了 事件数据传递(dataTransfer)机制.可以实现在一个事件中将一个数据传递到另一个事件中。拖拽中可以在拖拽事件(dragstart)中将拖拽标签的id或class保存下来。在放置标签触发drop事件时，拿到拖拽标签的id或class。</p><pre class=" language-js"><code class="language-js"><span class="token function">给拖拽标签设置拖拽事件</span><span class="token punctuation">(</span>dargstart<span class="token punctuation">)</span><span class="token punctuation">.</span>该事件会在拖拽开始时执行一次。我们将拖拽标签的<span class="token keyword">class</span>或id保存下来拖拽标签变量名<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dargstart'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="dataTransfer"><a href="#dataTransfer" class="headerlink" title="dataTransfer"></a>dataTransfer</h3><h5 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h5><pre class=" language-js"><code class="language-js">event对象<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：保存一个class数据为item1</span>event对象<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'item1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h5><pre class=" language-js"><code class="language-js">event对象<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例子：读取名字为class的数据</span>event对象<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 获取item1</code></pre><h3 id="拖拽示例"><a href="#拖拽示例" class="headerlink" title="拖拽示例"></a>拖拽示例</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item1"</span> draggable<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>blue<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item2"</span> draggable<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>green<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item3"</span> draggable<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>yellow<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> blue <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.item1'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> green <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.item2'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> yellow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.item3'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// var box = document.querySelector('#box')</span>    <span class="token comment" spellcheck="true">// 给放置标签取消禁止放置</span>    green<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span>cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>    blue<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span>cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>    yellow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span>cancel <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置放置事件</span>    green<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span>dropDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>    blue<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span>dropDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>    yellow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span>dropDiv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取拖拽标签数据</span>    blue<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragstart'</span><span class="token punctuation">,</span>setDat<span class="token punctuation">)</span><span class="token punctuation">;</span>    green<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragstart'</span><span class="token punctuation">,</span> setDat<span class="token punctuation">)</span><span class="token punctuation">;</span>    yellow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragstart'</span><span class="token punctuation">,</span>setDat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 放置函数</span>    <span class="token keyword">function</span> <span class="token function">dropDiv</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> item1 <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> wid<span class="token operator">=</span>$<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"px"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mouse<span class="token operator">=</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">;</span>        $next <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mouse<span class="token operator">></span>wid<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>$next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>$next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 取消默认</span><span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setDat</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="百度地图API使用"><a href="#百度地图API使用" class="headerlink" title="百度地图API使用"></a>百度地图API使用</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>百度地图提供了相应的JavaScript api 来开发地图的部分功能。可以在个人或企业应用中使用。</li></ul><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><ul><li>注册百度的开发平台账号 <a href="https://lbsyun.baidu.com/">https://lbsyun.baidu.com/</a></li><li>在控制台 创建一个应用。获取应用的密钥。<ul><li>创建应用时选择浏览器端</li></ul></li><li>在使用地图api 的页面中通过密钥获取百度地图的使用许可。</li></ul><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><ul><li>根据地址字符串进行解析在百度地图中展示<ul><li>百度例子：地址解析</li></ul></li><li>设置点击事件</li></ul><pre class=" language-js"><code class="language-js">map<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点击位置经纬度：'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>latlng<span class="token punctuation">.</span>lng <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>latlng<span class="token punctuation">.</span>lat<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>添加标注</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMapGL<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">104.0697601387497</span><span class="token punctuation">,</span><span class="token number">30.579089691374744</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">centerAndZoom</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> marker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMapGL<span class="token punctuation">.</span>Marker</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建标注</span>map<span class="token punctuation">.</span><span class="token function">addOverlay</span><span class="token punctuation">(</span>marker<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 将标注添加到地图中</span></code></pre><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>html5新增了用于将页面中的数据保存到本地。当页面重新打开仍可以使用保存到本地的数据。</li><li>新增了JavaScript api来实现数据的保存和读取</li><li>是用于替代以前的cookie老旧技术</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>本地存储根据存储时间分为两种：<code>localStorage</code>和<code>sessionStorage</code><ul><li><code>localStorage</code>保存期限为永久，<code>sessionStorage</code>为当前标签页面关闭之前，其他无区别</li></ul></li></ul><h4 id="localStoratge-amp-sessionStorage"><a href="#localStoratge-amp-sessionStorage" class="headerlink" title="localStoratge &amp; sessionStorage"></a>localStoratge &amp; sessionStorage</h4><ul><li><p>保存数据</p><pre class=" language-js"><code class="language-js">localStoratge<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStoratge<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>读取数据</p><pre class=" language-js"><code class="language-js">localStoratge<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStoratge<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除某个数据</p><pre class=" language-js"><code class="language-js">localStoratge<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStoratge<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'属性名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>清空所有数据</p><pre class=" language-js"><code class="language-js">localStoratge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sessionStoratge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="本地存储保存和读取对象"><a href="#本地存储保存和读取对象" class="headerlink" title="本地存储保存和读取对象"></a>本地存储保存和读取对象</h3><ul><li><p>将对象转为字符串 <code>JSON.stringify(对象)</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 字符串变量名  <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>对象变量名<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将字符串转为对象<code>JSON.parse(字符串)</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 对象变量名<span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>字符串<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML拖拽&quot;&gt;&lt;a href=&quot;#HTML拖拽&quot; class=&quot;headerlink&quot; title=&quot;HTML拖拽&quot;&gt;&lt;/a&gt;HTML拖拽&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML5" scheme="https://codehan045.github.io/tags/HTML5/"/>
    
  </entry>
  
</feed>
