<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>doNow</title>
  
  <subtitle>smilePosition</subtitle>
  <link href="https://codehan045.github.io/atom.xml" rel="self"/>
  
  <link href="https://codehan045.github.io/"/>
  <updated>2021-08-08T08:16:58.011Z</updated>
  <id>https://codehan045.github.io/</id>
  
  <author>
    <name>时光路人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript运算符及语句</title>
    <link href="https://codehan045.github.io/posts/bc94c580.html"/>
    <id>https://codehan045.github.io/posts/bc94c580.html</id>
    <published>2021-08-07T07:11:47.000Z</published>
    <updated>2021-08-08T08:16:58.011Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="JavaScript运算符及语句"><a href="#JavaScript运算符及语句" class="headerlink" title="JavaScript运算符及语句"></a>JavaScript运算符及语句</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p>一套对数据进行运算的运算符，可以对一个或多个值进行运算，并获得运算结果</p></blockquote><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><ul><li><p>使用<code>typeof</code>操作符可以用来检查一个变量的数据类型，将值的类型以字符串的形式返回</p></li><li><p>使用方式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//typeof  数据 </span><span class="token keyword">typeof</span> <span class="token number">123</span></code></pre></li><li><p>返回结果</p><ul><li>typeof 数值  <code>number</code></li><li>typeof 字符串<code> String</code></li><li>typeof 布尔型 <code>boolean</code></li><li>typeof undefined <code>undefined</code></li><li>typeof null <code>object</code></li></ul></li></ul><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><blockquote><p>顾名思义就是进行算数操作的运算符</p></blockquote><ul><li><p> 当对非Number 类型的值，会先转换为Number，然后再进行运算</p></li><li><p>任何值和NaN做运算 都为NaN</p></li><li><p> 对于String 类型,进行拼接</p></li><li><p> 任何值和字符串相加，都会先转换成字符串，然后再进行拼接</p></li><li><p>c= c+””;转换为字符串</p></li><li><p>可以通过一个值-0 *1 /1来将其转换为Number</p></li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>++(前置)</td><td>自增</td></tr><tr><td>-</td><td>减法</td><td>++(后置)</td><td>自增</td></tr><tr><td>*</td><td>乘法</td><td>–(前置)</td><td>自减</td></tr><tr><td>/</td><td>除法</td><td>–(后置)</td><td>自减</td></tr><tr><td>%</td><td>取模</td><td>+ 正</td><td>符号不变</td></tr><tr><td></td><td></td><td>-  负</td><td>符号反转</td></tr></tbody></table><h4 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h4><ul><li>自增 ++ 自减 –</li><li>自增和自减分为前置运算和后置运算。<ul><li>所谓的前置元素就是将元素符放到变量的前边，而后置将元素符放到变量的后边。</li><li> 例子：</li><li>前置自增：++a </li><li>后置自减：a– </li></ul></li><li>运算符在前置时，表达式值等于变量原值。</li><li>运算符在后置是，表达式值等于变量变更以后的值。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>一般情况下使用逻辑运算符会返回一个布尔值。</p></li><li><p>逻辑运算符主要有三个：非、与、或。</p></li><li><p>在进行逻辑操作时如果操作数不是布尔类型则会将其转换 布尔类型在进行计算</p></li><li><p>非使用符号 ! 表示，与使用 &amp;&amp; 表示，或使用 || 表示。</p></li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>短路规则</th></tr></thead><tbody><tr><td>!</td><td>逻辑非（NOT）</td><td>无</td></tr><tr><td>&amp;&amp;</td><td>逻辑与（AND)</td><td>若左值为假，则不运算右值</td></tr><tr><td>||</td><td>逻辑或（OR)</td><td>若左值为真，则不运算右值</td></tr></tbody></table><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><ul><li> 非运算符可以应用于任意值，无论值是什么类型，这个运算符都会返回一个布尔值</li><li> 非运算符会对原值取反，比如原值是true使用非运算符会 返回false，原值为false使用非运算符会返回true</li><li>可以为一个任意数据类型取两次反，来将其转换为布尔值，<ul><li> 原理和Boolean()函数一样</li></ul></li></ul><h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4><ul><li>与运算符可以应用于任何数据类型，且不一定返回布尔值</li><li>对于非布尔值运算，会先将非布尔值转换为布尔值</li><li>对布尔值做运算时，如果两个值都为true则返回true， 否则返回false</li></ul><blockquote><p>非布尔值时：如果两个都为true，则返回第二个值，如 果两个值中有false则返回靠前的false的值</p></blockquote><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><ul><li>或运算符可以应用于任何数据类型，且不一定返回布尔值。</li><li>对于非布尔值运算，会先将非布尔值转换为布尔值</li><li>对布尔值进行运算时，如果两个值都为false则返回false， 否则返回true</li></ul><blockquote><p>非布尔值时：如果两个都为false ，则返回第二个值，否 则返回靠前true的值</p></blockquote><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>的赋值操作符由等于号 （<code>=</code>） 表示,作用就是把右侧的值赋给左侧的变量</p></li><li><p>复合赋值操作</p><ul><li>+=、 *= 、-= 、/=、%=</li><li>比如：a+=10和a=a+10是一样的</li></ul></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><p>小于（&lt;） 、大于（&gt;） 、小于等于（&lt;=）和大于等于（&gt;=） 这几个关系运算符用于对两个值进行比较</p></li><li><p> 非数值的情况</p></li></ul><p>  ​       * - 对于非数值进行比较时，会将其转换为数字然后在比较</p><p>  ​       * - 如果符号两侧的值都是字符串时，不会将其转换为数字进行比较</p><p>  ​       *   而会分别比较字符串中字符的Unicode编码（按位比较）</p><ul><li><p>这几个运算符都返回一个布尔值，用来表示两个值之间的关系 是否成立</p></li><li><p>相等</p><ul><li>JS中使用<code>==</code>来判断两个值是否相等，如果相等则返回 true。</li><li>使用<code>!=</code>来表示两个值是否不相等，如果不等则返回true。</li><li>当使用<code>==</code>或<code>!=</code>来比较两个值时，如果类型不同，则会自动进行类型转换，将其转换为相同的类型，然后再比较</li></ul><blockquote><p>null和undefined使用==判断时是相等的。</p><p>NaN不和任何值相等，包括它本身</p><ul><li>可以通过isNaN() 函数来判断一个值是否是NaN</li></ul></blockquote></li><li><p>全等</p><ul><li><code>===</code>表示全等，他和==基本一致，不过<code>==在判断两个值 时会进行自动的类型转换</code>，而<code>===</code>不会</li><li>例如：<code>”55”==55</code>会返回true，而<code>”55”===55</code>会返回 false</li><li><code>!==</code>表示不全等，同样比较时不会自动转型</li></ul></li><li><p>逗号</p><ul><li><p>使用逗号可以在一条语句中执行多次操作。 </p></li><li><p>比如：var num1=1, num2=2, num3=3;</p></li><li><p>使用逗号运算符分隔的语句会从左到右顺 序依次执行。</p></li></ul></li></ul><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><ul><li><p>三元运算符，写为 </p><pre class=" language-javascript"><code class="language-javascript">条件语句<span class="token operator">?</span>语句<span class="token number">1</span>：语句<span class="token number">2</span>条件判断为<span class="token boolean">true</span>则执行语句<span class="token number">1</span>，否则执行语句<span class="token number">2</span> ，并将结果返回</code></pre></li></ul><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><ul><li>若要优先进行运算，直接添加小括号</li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul><li>语句是一个程序的基本单位，JS的程序就是由一条一条 语句构成的，每一条语句使用<code>;</code>结尾</li><li>JS中的语句默认是由上至下顺序执行的，但是我们也可 以通过一些流程控制语句来控制语句的执行顺序</li></ul><h3 id="条件语句（流程控制语句）"><a href="#条件语句（流程控制语句）" class="headerlink" title="条件语句（流程控制语句）"></a>条件语句（流程控制语句）</h3><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"age=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"dont"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="if-else-if…else"><a href="#if-else-if…else" class="headerlink" title="if-else if…else"></a>if-else if…else</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你还未成年！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您已经是个青年了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你已经是个中年了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="switch—case语句"><a href="#switch—case语句" class="headerlink" title="switch—case语句"></a>switch—case语句</h4><ul><li><p>语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> 表达式<span class="token number">1</span><span class="token punctuation">:</span>语句<span class="token operator">...</span><span class="token keyword">case</span> 表达式<span class="token number">2</span><span class="token punctuation">:</span>语句<span class="token operator">...</span><span class="token keyword">default</span><span class="token punctuation">:</span>语句<span class="token operator">...</span><span class="token punctuation">}</span></code></pre><ul><li>需要注意的是case语句只是标识的程序运行的起点，并不是终 点，所以一旦符合case的条件程序会一直运行到结束。所以我 们一般会在case中添加break作为语句的结束。</li><li>变量与表达式关系是全等的匹配</li></ul></li></ul><h4 id="if和switch的比较"><a href="#if和switch的比较" class="headerlink" title="if和switch的比较"></a>if和switch的比较</h4><ul><li><p>一般情况下，它们两个语句可以相互替换</p></li><li><p>if和switch都是分支结构，用于判断不同的情况，做出不同的应答</p></li><li><p>if更适用于判断数值不明确，比如大于小于等情况</p></li><li><p>switch适用于固定数值的时候</p></li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li>循环中的语句只要满足一定的条件将会一 直执行</li></ul><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><ul><li><p>语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>语句<span class="token operator">...</span><span class="token punctuation">}</span></code></pre></li><li><p>和if一样while中的条件表达式将会被转换为布尔类型，只 要该值为真，则代码块将会一直重复执行。</p></li></ul><h4 id="do—while"><a href="#do—while" class="headerlink" title="do—while"></a>do—while</h4><ul><li><p>语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">{</span>语句<span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p> do…while循环会至少执行一次。</p></li></ul><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h5><ol><li>初始化条件</li><li>循环条件</li><li>循环体</li><li>迭代条件</li></ol><ul><li><p>语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式 <span class="token punctuation">;</span> 条件表达式 <span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>语句<span class="token operator">...</span>循环体<span class="token punctuation">}</span></code></pre></li></ul><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ul><li><code>break</code> :会使程序跳出循环</li><li><code>continue</code>:使用continue语句会使程序跳过当次循环，继续执行下一次循环，并不会结束整个循环</li></ul><blockquote><p>continue只能在循环中使用，不能出现在其他的结构中</p></blockquote><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><ul><li><p>使用 label 语句可以在代码中添加标签，以便将来使用</p></li><li><p>语法：</p><pre class=" language-javascript"><code class="language-javascript">start<span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p> 这个例子中定义的 start 标签可以在将来由 break 或 continue 语句 引用。加标签的语句一般都要与 for 语句等循环语句配合使用。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;JavaScript运算符及语句&quot;&gt;&lt;a href=&quot;#JavaScript运算符及语句&quot; class=&quot;headerlink&quot; title=&quot;JavaScript运算符及语句&quot;&gt;&lt;/a&gt;JavaScript运算符及语句&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基本语法</title>
    <link href="https://codehan045.github.io/posts/bbf13a25.html"/>
    <id>https://codehan045.github.io/posts/bbf13a25.html</id>
    <published>2021-08-07T01:50:07.000Z</published>
    <updated>2021-08-07T09:21:36.121Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h1><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li><p><code>alert(" ")</code> 控制浏览器弹出一个警告框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是我的第一个网页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>document.write("")</code> 可以向body中写入一个内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;a href='http://www.baidu.com'>百度一下&lt;/a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//如果要输出的是HTML标签的代码本身。那么JavaScript会将其解析为一个真正的标签并显示在页面上。</span></code></pre></li><li><p><code>console.log("")</code>向控制台输出一个内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul><li><p><code>prompt("")</code>获取用户输入的文字</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"提示性文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配合输出</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的手机号'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a><script>标签</h3><ul><li><p>js代码需要编写到<code>&lt;script&gt; js代码&lt;/script&gt;</code>标签中</p></li><li><p><code>&lt;script&gt;</code>标签可以写在<code>&lt;head&gt;</code>标签中，也可以写在<code>&lt;body</code>标签中</p></li><li><p><code>&lt;script&gt;</code>属性</p><ul><li><code>type</code> 默认值<code>text/javascript</code>可以省略不写</li><li><code>src</code>当需要引入一个外部的js文件时，使用该属性指向文件的地址</li></ul><blockquote><p>注：<code>&lt;script&gt;</code>若作为外部引入js文件使用，则在标签内书写的js代码无效，默认被注释，不被解析,只能单一作用，若引入js文件后，再编写js代码，则需重新添加·<code>&lt;script&gt;</code>标签</p></blockquote></li></ul><h3 id="内联属性"><a href="#内联属性" class="headerlink" title="内联属性"></a>内联属性</h3><ul><li><p>可以将js代码编写到标签onclick 属性中，当我们点击按钮时，js代码才会执行</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>你点我干嘛！<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></li><li><p>可以将js代码写在超链接的href属性中，点击超链接时，执行js代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(<span class="token punctuation">'</span>让你点你就点！<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你也点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 无任何效果，可作占位符--></span></code></pre></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>注释中的内容不会被解析器解析执行，但是会在 源码中显示，我们一般会使用注释对程序中的内 容进行解释。</p></blockquote><ul><li><p>单行注释</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//单行注释</span></code></pre></li><li><p>多行注释</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * 多行注释 * js注释*/</span></code></pre></li></ul><h2 id="javascript书写规范"><a href="#javascript书写规范" class="headerlink" title="javascript书写规范"></a>javascript书写规范</h2><ol><li><p>js严格区分大小写，也就是abc和Abc会被解析器 认为是两个不同的东西。</p></li><li><p>js中每一条语句以分号 ;结尾</p><ul><li>如果不写分号，浏览器会自动添加，但是会消耗资源，有时会加错 ，**必须写 **</li></ul></li><li><p>js中会忽略多个空格和换行，所以可以利用空格和换行来格式化</p></li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><blockquote><p>所谓标识符，就是可以自己起名字的变量，函数、属性等或是函数的参数</p></blockquote><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li><p>标识符中可以有字母，数字，_ ,$</p></li><li><p>不能以数字开头,第一个字符必须是一个<code>字母</code>、<code>下划线（ _ ）</code>或一个<code>美元符号（ $ ）</code></p></li><li><p>标识符不能是<code>关键字</code>和<code>保留字</code></p></li><li><p>一般使用<code>驼峰命名法</code></p><ul><li>首字母小写，每个单词的开头字母大写，其余子母小写</li><li>示例：<code> helloWorld</code></li></ul></li><li><p>Js底层保存标识符时，实际上是采用的是Unicode编码</p></li></ol><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><blockquote><p>关键字：具有特殊意义和功能的的单词</p><p>保留字：将来有可能作为关键字</p></blockquote><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210807105551.png"></p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210807105710.png"></p><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><blockquote><p>字面量：一些不可改变的值</p><p>变量：可以保存字面量，它的值可以任意改变，作用是给某一个值或对象标注名称，能够重复的使用数据</p><ul><li>变量定义一次，可以多次使用</li><li>变量都需要<code>先定义，再使用</code></li></ul></blockquote><ul><li><p>变量的声明</p><ul><li><p>使用var关键字来声明一个变量,可以用来保存任何类型的值，声明范围是函数作用域</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> he；</code></pre></li></ul></li><li><p>变量的赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre></li><li><p>声明和赋值同时进行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre></li><li><p>变量的使用</p><ul><li><p>需重新定义变量。直接修改变量的数据即可</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">//修改</span>demo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span></code></pre></li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型（JavaScript中有5种）"><a href="#基本数据类型（JavaScript中有5种）" class="headerlink" title="基本数据类型（JavaScript中有5种）"></a>基本数据类型（JavaScript中有5种）</h3><h4 id="字符串型-String"><a href="#字符串型-String" class="headerlink" title="字符串型 String"></a>字符串型 String</h4><blockquote><p>用于表示一个字符序列，即字符串</p></blockquote><ul><li><p>字符串需要使用<code>&quot;</code>或 <code>&#39;</code>括起来</p></li><li><p>引号不能嵌套，双引号不能放双引号，单引号不能放单引号</p></li><li><p>转义字符：</p><table><thead><tr><th>转义字符</th><th>含义</th><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td><td><code>\</code></td><td>斜杠</td></tr><tr><td><code>\t</code></td><td>制表符</td><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\b</code></td><td>空格</td><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\r</code></td><td>回车</td><td></td><td></td></tr></tbody></table></li><li><p>将其他数值转换为字符串有三种方式：<code>toString()</code>、<code>String()</code>、 <code>拼串</code>。</p></li></ul><h4 id="数值型-Number"><a href="#数值型-Number" class="headerlink" title="数值型 Number"></a>数值型 Number</h4><blockquote><p>js中所有的数值都是Number</p><p> 包括整数和浮点数（小数）</p></blockquote><ul><li><p>js中可以表示的数字的最大值</p><ul><li><code>Number.MAX_VALUE</code>    1.7976931348623157e+308</li><li>使用的Number超过 最大值，则会返回一个<code>Infinity</code> 正无穷 <code>Infinity</code> 数值类型</li></ul></li><li><p>大于0的最小值 <code>Number.MIN_VALUE</code></p></li><li><p><code>NaN</code> 是一个特殊的数字not a number 非数字</p></li><li><p>在js中整数的运算基本可以保证精确</p></li><li><p>使用js进行浮点运算，可能得到不精确的结果</p></li><li><p>数字保留指定位数的小数点</p><ul><li><p><code>toFixed</code>:能够指定某个数字保留几位小数,会四舍五入。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名<span class="token operator">=</span> 数字<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>小数点的位数<span class="token punctuation">)</span><span class="token punctuation">;</span>例子：保留一位小数<span class="token keyword">var</span> num <span class="token operator">=</span><span class="token number">1.674</span><span class="token punctuation">;</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1.7</span></code></pre></li></ul></li></ul><h4 id="布尔型-Boolean"><a href="#布尔型-Boolean" class="headerlink" title="布尔型 Boolean"></a>布尔型 Boolean</h4><ul><li>布尔值只有两个  做逻辑判断<ul><li><code>true</code></li><li><code>false</code> </li></ul></li></ul><h4 id="Null-型null-空值"><a href="#Null-型null-空值" class="headerlink" title="Null 型null  空值"></a>Null 型null  空值</h4><ul><li><p>Null类型只有一个，就是null</p></li><li><p> null这个值专门用来表示一个为空的对象</p></li><li><p>使用typeof 检查一个null值时，会返回object</p></li></ul><h4 id="Undefined型-undefined-未定义"><a href="#Undefined型-undefined-未定义" class="headerlink" title="Undefined型 undefined 未定义"></a>Undefined型 undefined 未定义</h4><ul><li><p>Undefined 类型只有一个值，即特殊的 <code>undefined</code> 。</p></li><li><p>在使用 var 声明变量但未对其加以初始化时，这个变量的值就 是 undefined</p></li></ul><blockquote><ul><li><p>typeof对没有初始化和没有声明的变量都会返回 undefined</p></li><li><p>undefined值实际上是由null值衍生出来的，所以如果比较 undefined和null是否相等，会返回true；</p></li></ul></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>Object 对象<ul><li>数组</li><li>函数 function</li></ul></li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="将其他数据类型转换为String"><a href="#将其他数据类型转换为String" class="headerlink" title="将其他数据类型转换为String"></a>将其他数据类型转换为<code>String</code></h3><ul><li>方式一<ul><li><p>调用被转换数据类型的toString()方法</p></li><li><p>对于Number调用toString()时可以在方法中传递一个整数作为参数</p><ul><li><p>此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为二进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为1111 1111</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//string</span></code></pre></li></ul></li><li><p>该方法不会影响原变量，会将转换的结果返回</p></li><li><p>注：null 和 undefined 这两个值没有toString()方法</p></li></ul></li><li>方式二<ul><li>调用String()函数，将被转换的数据作为参数传递给函数</li><li>使用String()函数做强制转换时：<ul><li>对于<code>Number</code>和<code>Boolean</code>实际上调用的是<code>toString()</code>方法</li><li>对于<code>null</code>和<code>undefined</code>是直接转换</li></ul></li></ul></li><li>方式三<ul><li>字符串的拼接，任何值与字符串相加，都会先转换为字符串，然后再进行拼接</li><li>一种隐式的类型转换，由浏览器自动完成，实际上它也是调用String()函数</li></ul></li></ul><h3 id="将其他数据类型转换为Number"><a href="#将其他数据类型转换为Number" class="headerlink" title="将其他数据类型转换为Number"></a>将其他数据类型转换为<code>Number</code></h3><ul><li><p>方式一</p><ul><li><p>使用<code>Number()</code>函数</p></li><li><p>不同数据类型转换结果</p><ul><li><p>字符串—–&gt;数字</p><ol><li><code>纯数字</code>，直接转换</li><li><code>非数字</code>的内容，则转换为<code>NaN</code></li><li>字符串是<code>空串</code>，或是<code>空格的字符</code>，转换为<code>0</code></li></ol></li><li><p>布尔值—–&gt;数字</p><ul><li><code>true</code> 转换为  <code>1</code></li><li><code>false</code>转换为  <code> 0</code></li></ul></li><li><p>null—–&gt;数字   为  0</p></li><li><p>undefined—-&gt;数字   NaN</p></li></ul></li></ul></li><li><p>方式二：专门用于字符串的转换</p><ul><li>若对<code>非String </code>使用<code> parseInt()</code> 或 <code>parseFloat()</code> ,他会先将其转换为String然后再操作</li><li><code>parseInt() </code>把一个字符串转换为一个整数</li><li>可以将一个字符串中的有效的整数内容提取出来，然后转换为Number</li><li><code>parseFloat() </code>获得有效的小数</li></ul></li><li><p>方式三</p><ul><li>通过运算符，<code>将一个值减0 ,*1, /1</code>来将其转换为<code>Number</code></li><li>原理和Number()函数一样</li></ul></li></ul></script></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;JavaScript基本语法&quot;&gt;&lt;a href=&quot;#JavaScript基本语法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基本语法&quot;&gt;&lt;/a&gt;JavaScript基本语法&lt;/h1&gt;&lt;h2 id=&quot;输入和输出&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript简介</title>
    <link href="https://codehan045.github.io/posts/da2d2f3e.html"/>
    <id>https://codehan045.github.io/posts/da2d2f3e.html</id>
    <published>2021-08-06T03:46:27.000Z</published>
    <updated>2021-08-08T07:43:09.927Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="javascript简介"><a href="#javascript简介" class="headerlink" title="javascript简介"></a>javascript简介</h1><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ul><li>语言的发展： <ul><li>纸带机：机器语言</li><li>汇编语言：符号语言</li><li>现代语言：高级语言</li></ul></li></ul><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><ul><li>诞生于1995年，主要用于处理网页中的前端验证</li><li>前端验证：指检查用户输入的内容是否符合一定的规则<ul><li>例如：用户名的长度，密码长度，邮箱的格式等</li></ul></li><li>网景公司发明，起初命名为LiveScript,后由sun公司介入，更名为Javascript</li><li>1996年微软公司在其最新的IE3浏览器中引入了自己对 JavaScript的实现JScript。</li><li>JS的标准名命名为<strong>ECMAScript</strong></li></ul><h3 id="javascript是什么"><a href="#javascript是什么" class="headerlink" title="javascript是什么"></a>javascript是什么</h3><ul><li>JavaScript是世界上最流行的语言之一，是一种运行在客户端的脚本语言（script是脚本的意思）</li><li>不需要编译，运行过程中由js解释器(js引擎)逐行来进行解释并执行</li></ul><h2 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h2><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210806110711.png" alt="image-20210806110426200"></p><h2 id="JS的特点"><a href="#JS的特点" class="headerlink" title="JS的特点"></a>JS的特点</h2><h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><ul><li>JavaScript是一门解释型语言，不需要编译为机器码在执行,而是直接执行</li><li>使用了JIT技术，运行速度得以改善</li><li>优缺点：<ul><li>优势：不需编译，开发起来尤为轻松</li><li>劣势：运行较慢</li></ul></li></ul><h3 id="类似于C和Java的语法结构"><a href="#类似于C和Java的语法结构" class="headerlink" title="类似于C和Java的语法结构"></a>类似于C和Java的语法结构</h3><ul><li>JavaScript的语法结构与C和Java很像，向for、if、while等语 句和Java的基本上是一模一样的。</li><li>不过JavaScript和与Java的关系也仅仅是看起来像而已</li></ul><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><ul><li>动态语言：在语言中的一切内容都是不确定的。</li><li>JavaScript 是一种基于事件驱动的脚本语言，它不需要经过 Web 服务器就可以对用户的输入直接做出响应。</li></ul><h3 id="基于原型的面向对象，弱类型的语言"><a href="#基于原型的面向对象，弱类型的语言" class="headerlink" title="基于原型的面向对象，弱类型的语言"></a>基于原型的面向对象，弱类型的语言</h3><p>• JavaScript是一门面向对象的语言。</p><h3 id="跨平台性"><a href="#跨平台性" class="headerlink" title="跨平台性"></a>跨平台性</h3><ul><li>JavaScript 依赖于浏览器本身，与操作环境无关。任何浏览器，只要具有JavaScript脚本引擎，就可以执行JavaScript。目前，几乎所有用户使用的浏览器都内置了JavaScript脚本引擎。</li></ul><h2 id="Js的优点"><a href="#Js的优点" class="headerlink" title="Js的优点"></a>Js的优点</h2><ul><li><p>交互性：可以与用户进行动态交互</p></li><li><p>安全性：只能在浏览器内部运行，不能访问本地硬盘或者其他资源</p></li><li><p>跨平台：无论任何平台，只要有浏览器，就能运行</p></li></ul><h2 id="JavaScript的组成部分"><a href="#JavaScript的组成部分" class="headerlink" title="JavaScript的组成部分"></a>JavaScript的组成部分</h2><p>标准化后的 JavaScript 包含了 3 个组成部分，如图 1 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210806114220.gif" alt="JavaScript组成部分"><br>图 1：JavaScript 组成部分</p><h4 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1) ECMAScript"></a>1) ECMAScript</h4><ul><li>脚本语言的核心内容，定义了脚本语言的基本语法和基本对象。现在每种浏览器都有对ECMAScript标准的实现。</li></ul><h4 id="2-DOM（Document-Object-Model）"><a href="#2-DOM（Document-Object-Model）" class="headerlink" title="2) DOM（Document Object Model）"></a>2) DOM（Document Object Model）</h4><ul><li>文档对象模型，它是HTML和XML文档的应用程序编程接口。浏览器中的DOM把整个网页规划成由节点层级构成的树状结构的文档。用DOM API可以轻松地删除、添加和替换文档树结构中的节点。</li></ul><h4 id="3-BOM（Browser-Object-Model）"><a href="#3-BOM（Browser-Object-Model）" class="headerlink" title="3) BOM（Browser Object Model）"></a>3) BOM（Browser Object Model）</h4><ul><li>浏览器对象模型，描述了对浏览器窗口进行访问和操作的方法和接口。</li></ul><h2 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h2><ul><li>表单的动态校验（密码强度检测）（js产生的最初目的）</li><li>网页特效</li><li>服务端开发（Node.js)</li><li>桌面程序</li><li>App</li><li>控制硬件-物联网</li><li>游戏开发（cocos2d-js)</li></ul><h2 id="浏览器执行js"><a href="#浏览器执行js" class="headerlink" title="浏览器执行js"></a>浏览器执行js</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>分为两部分<ul><li>渲染引擎：用来解析HTML、CSS俗称内核</li><li>js引擎：也称JS解释器，用来读取网页中的javascript代码，对其处理后运行</li></ul></li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><blockquote><p>浏览器本身并不会执行JS代码，而是通过内置的JS引擎来执行，JS引擎执行代码时逐行进行解释，每一句源码（转换为机器语言）,计算机去执行，Javascript语言归为脚本语言，会逐行解释执行</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;javascript简介&quot;&gt;&lt;a href=&quot;#javascript简介&quot; class=&quot;headerlink&quot; title=&quot;javascript简介&quot;&gt;&lt;/a&gt;javascript简介&lt;/h1&gt;&lt;h2 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://codehan045.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap前端开发框架</title>
    <link href="https://codehan045.github.io/posts/c9c4c598.html"/>
    <id>https://codehan045.github.io/posts/c9c4c598.html</id>
    <published>2021-07-27T04:12:16.000Z</published>
    <updated>2021-08-04T11:09:28.099Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="Bootstrap前端开发框架"><a href="#Bootstrap前端开发框架" class="headerlink" title="Bootstrap前端开发框架"></a>Bootstrap前端开发框架</h1><h2 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h2><ul><li><p>Bootstrap来自Twitter，是基于HTML、CSS和 JAVASCRIPT的，简洁灵活。使Web开发更加快捷。</p></li><li><p>中文官网：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a></p></li><li><p>框架：一套架构，有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件，使用者要按照框架所规定的某种规范进行开发。</p></li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>提高开发效率</li></ul><h2 id="Bootstrap使用"><a href="#Bootstrap使用" class="headerlink" title="Bootstrap使用"></a>Bootstrap使用</h2><ol><li><p>创建文件夹结构</p></li><li><p>创建html骨架结构</p></li><li><p>引入相关样式文件</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bootstrap/css/bootstrap.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bootstrap/js/JQuery2.1.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./bootstrap/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>书写内容</p></li><li><p>检查修改样式</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;Bootstrap前端开发框架&quot;&gt;&lt;a href=&quot;#Bootstrap前端开发框架&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap前端开发框架&quot;&gt;&lt;/a&gt;Bootstrap前端开发框架&lt;/h1&gt;&lt;h2 id=&quot;Boot</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less基本使用</title>
    <link href="https://codehan045.github.io/posts/614a8be5.html"/>
    <id>https://codehan045.github.io/posts/614a8be5.html</id>
    <published>2021-07-27T04:05:54.000Z</published>
    <updated>2021-07-27T04:55:50.321Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="Less基础"><a href="#Less基础" class="headerlink" title="Less基础"></a>Less基础</h1><h4 id="维护CSS的弊端"><a href="#维护CSS的弊端" class="headerlink" title="维护CSS的弊端"></a>维护CSS的弊端</h4><ul><li>css是一门非编程式语言，没有变量、函数、SCOPE(作用域) 等概念</li><li>css需要书写大量看似没有逻辑的代码，冗余度较高</li><li>不方便维护及扩展，不利于复用</li><li>css没有很好的计算能力</li></ul><h4 id="less-介绍"><a href="#less-介绍" class="headerlink" title="less 介绍"></a>less 介绍</h4><ul><li>Less(Leaner Style Sheets) 是一门CSS扩展语言，成为CSS的预处理器</li><li>在CSS语法基础上，引入了变量，运算以及函数等功能，简化了CSS的编写，降低了CSS的维护成本，写的更少，做的更多</li><li>Less中文网址：<a href="http://lesscss.cn/">http://lesscss.cn</a></li><li>常见的CSS预处理器：Sass、Less、Stylus</li></ul><h4 id="Less使用"><a href="#Less使用" class="headerlink" title="Less使用"></a>Less使用</h4><blockquote><p>创建后缀名为less的文件，在这个文件里面书写less语句</p></blockquote><ul><li><p>less变量</p><ul><li><p>语法:</p><pre class=" language-less"><code class="language-less">@变量名<span class="token punctuation">:</span>值<span class="token punctuation">;</span></code></pre></li><li><p>变量命名规范</p><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul></li></ul></li></ul><h4 id="Less的编译"><a href="#Less的编译" class="headerlink" title="Less的编译"></a>Less的编译</h4><ul><li>使用Vscode Less插件—&gt;Easy LESS,安装完之后,重新加载下vscode</li><li>只要保存以下less文件,会自动生成CSS文件</li></ul><h4 id="Less嵌套"><a href="#Less嵌套" class="headerlink" title="Less嵌套"></a>Less嵌套</h4><ul><li>子元素的样式直接写到父元素里面</li><li>伪类选择器,伪元素选择器,需要在前面添加 &amp;</li><li>内层选择器的前面没有 &amp; 符号,则它被解析为 父选择器的后代</li><li>若有 &amp; 符号,它就被解析为父元素自身或父元素的伪类</li></ul><h4 id="Less运算"><a href="#Less运算" class="headerlink" title="Less运算"></a>Less运算</h4><ul><li><p>Less提供了加 减  乘 除 算术运算</p><pre class=" language-css"><code class="language-css">less 里面写<span class="token atrule"><span class="token rule">@width</span> <span class="token punctuation">:</span> 10px + 5<span class="token punctuation">;</span></span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token atrule"><span class="token rule">@width</span> solid red<span class="token punctuation">;</span></span><span class="token punctuation">}</span><span class="token selector">生成的cssdiv </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">15</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span>less甚至还可以这样<span class="token property">width</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token atrule"><span class="token rule">@width</span> + 5<span class="token punctuation">)</span> * 2<span class="token punctuation">;</span></span></code></pre><blockquote><p>注:</p><ol><li><p>运算符的左右两侧必须有一个空格隔开</p><ol start="2"><li>两个数参与运算,如果只有一个数有单位,则最后的结果就以这个单位为准</li></ol></li><li><p>两个数参与运算,如果2个数都有单位,而且不一样的单位,最后的结果以第一个单位为准</p></li></ol></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;Less基础&quot;&gt;&lt;a href=&quot;#Less基础&quot; class=&quot;headerlink&quot; title=&quot;Less基础&quot;&gt;&lt;/a&gt;Less基础&lt;/h1&gt;&lt;h4 id=&quot;维护CSS的弊端&quot;&gt;&lt;a href=&quot;#维护CSS的弊端&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="less" scheme="https://codehan045.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>移动端布局</title>
    <link href="https://codehan045.github.io/posts/ea92cade.html"/>
    <id>https://codehan045.github.io/posts/ea92cade.html</id>
    <published>2021-07-25T08:08:38.000Z</published>
    <updated>2021-07-27T04:19:26.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h1><h2 id="移动端技术选型"><a href="#移动端技术选型" class="headerlink" title="移动端技术选型"></a>移动端技术选型</h2><h3 id="单独制作移动端页面（主流）"><a href="#单独制作移动端页面（主流）" class="headerlink" title="单独制作移动端页面（主流）"></a>单独制作移动端页面（主流）</h3><ul><li>流式布局（百分比布局）</li><li>flex弹性布局</li><li>less+rem+媒体查询</li><li>混合布局</li><li>好处<ul><li>移动端有良好的用户体验</li></ul></li><li>缺点<ul><li>pc端和移动端代码是单独，代码量极大</li></ul></li></ul><h3 id="响应式页面兼容移动端（其次）"><a href="#响应式页面兼容移动端（其次）" class="headerlink" title="响应式页面兼容移动端（其次）"></a>响应式页面兼容移动端（其次）</h3><ul><li>媒体查询</li><li>bootstarp</li></ul><blockquote><p>选择布局方式：页面布局相对比较简单，pc端和移动端布局差异性比较小，可以使用响应式布局，页面布局复杂，pc端和移动端布局没有联系，就使用移动端布局。</p></blockquote><h2 id="流式布局（百分比布局）"><a href="#流式布局（百分比布局）" class="headerlink" title="流式布局（百分比布局）"></a>流式布局（百分比布局）</h2><ul><li>流式布局，就是百分比布局，也称非固定像素布局</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li><li>更多用于移动端，移动端的屏幕大小都有差异，为了网页能够适配不同的屏幕，让正常显示</li><li>好处:<ul><li>对不同的屏幕有一定的适应性</li></ul></li><li>缺点：<ul><li>当屏幕宽度足够小，导致内容无法查看</li></ul></li></ul><h2 id="弹性布局flex-弹性盒模型"><a href="#弹性布局flex-弹性盒模型" class="headerlink" title="弹性布局flex(弹性盒模型)"></a>弹性布局flex(弹性盒模型)</h2><ul><li>详情可在web前端分类中的弹性盒模型中查看(弹性盒模型) 请点击–&gt;<a href="https://codehan0417.github.io/posts/807df34f.html">弹性盒模型flex</a></li></ul><h2 id="rem-媒体查询-less"><a href="#rem-媒体查询-less" class="headerlink" title="rem+媒体查询+less"></a>rem+媒体查询+less</h2><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>   百分比： 可将属性值设置为相对于其父元素属性的百分比</p><p>   设置百分比，可以使子元素跟随父元素改变而改变</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><ul><li><p>是相对于父元素的字体大小来计算的</p></li><li><p>1 em= 1font-size</p></li><li><p>em会根据字体大小的改变而改变</p></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><ul><li>rem是相对于根元素<code>html</code>元素的字体大小来计算</li><li>应用：可以通过修改html里面的文字大小来改变页面中元素的大小，可以整体控制</li></ul><h3 id="媒体查询（Media-Query"><a href="#媒体查询（Media-Query" class="headerlink" title="媒体查询（Media Query)"></a>媒体查询（Media Query)</h3><ul><li>媒体：在网页中媒体指的是各种设备，比如：电视、手机、电脑、打印机等等</li><li>查询：检测当前的屏幕属于哪种设备，以及属于哪种类型，根据这些信息我们采用对应的css代码，能够实现在不同 的屏幕上有不同的用户体验（页面效果）</li></ul><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>使用<code>@media</code>查询,可以针对不同的媒体类型定义不同的样式</li><li><code>@media</code>可以针对不同的屏幕尺寸设置不同的样式</li><li>重置浏览器页面大小的过程中，页面也会根据浏览器的宽度和高度 重新渲染页面</li><li>一般按照从小到大的顺序来 </li></ul><h4 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h4><h5 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h5><ul><li>当样式比较繁多时，可以针对不同的媒体使用不同的 stylesheets（样式表)</li><li>原理： 直接在link中判断设备的尺寸，然后引入不同的css文件</li></ul><h5 id="语法规范-1"><a href="#语法规范-1" class="headerlink" title="语法规范"></a>语法规范</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mediatype  and|not|only   (media feature)<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystylesheet.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h5 id="css编写"><a href="#css编写" class="headerlink" title="css编写"></a>css编写</h5><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> 媒体类型</span><span class="token punctuation">{</span>    <span class="token selector">选择器</span><span class="token punctuation">{</span>        css代码    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>用<code>@media</code>开头，注意@符号</li></ul><h4 id="mdiatype-媒体类型-查询类型"><a href="#mdiatype-媒体类型-查询类型" class="headerlink" title="mdiatype 媒体类型(查询类型)"></a><code>mdiatype</code> 媒体类型(查询类型)</h4><ul><li><code>all</code>：用于所有设备</li><li><code>print</code> 用于打印机和打印预览</li><li><code>screen</code> 用于电脑屏幕，平板电脑，智能手机等</li></ul><table><thead><tr><th align="center">值</th><th align="center">设备类型</th></tr></thead><tbody><tr><td align="center">All</td><td align="center">所有设备</td></tr><tr><td align="center">Print</td><td align="center">打印设备</td></tr><tr><td align="center">Screen</td><td align="center">电脑显示器，彩色屏幕</td></tr><tr><td align="center">Braille</td><td align="center">盲人用点字法触觉回馈设备</td></tr><tr><td align="center">Embossed</td><td align="center">盲文打印机</td></tr><tr><td align="center">Handhelp</td><td align="center">便携设备</td></tr><tr><td align="center">Projection</td><td align="center">投影设备</td></tr><tr><td align="center">Speech</td><td align="center">语音或者音频合成器</td></tr><tr><td align="center">Tv</td><td align="center">电视类型设备</td></tr><tr><td align="center">Try</td><td align="center">电传打印机或者终端</td></tr></tbody></table><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字 :"></a>关键字 :</h4><blockquote><p>将媒体类型或多个媒体特性连接到一起作为媒体查询的条件</p></blockquote><ul><li><p><code>and</code> ：可以将多个媒体特性连接到一起，相当于 ‘ 且 ‘ 的意思</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>,</code>：代表或者的意思，即满足逗号前后任意一个条件即可</p><ul><li>注意：逗号前后的媒体类型是独立的</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* , 代表或者的意思 */</span><span class="token comment" spellcheck="true">/* ,前后的设备类型是相互独立 */</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span>, print and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li><li><p><code>not</code> ：排除某个媒体特性，相当于  ‘非’ 的意思，可以省略</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* not 代表非，不是的意思 ，否定的是媒体的特性*/</span><span class="token atrule"><span class="token rule">@media</span> not screen  and  <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span>320px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li><li><p><code>only</code> ：指定某个特定的媒体类型</p><ul><li>代表唯一，这个条件放在媒体类型的前面，就是一种修饰的作用，强调</li><li>only在老版本的浏览器，可以用于选择特殊的一些版本，某些浏览器不支持媒体查询，用only排除</li></ul></li></ul><h4 id="media-feature-媒体特性，必须有小括号包含"><a href="#media-feature-媒体特性，必须有小括号包含" class="headerlink" title="media feature 媒体特性，必须有小括号包含"></a><code>media feature</code> 媒体特性，必须有小括号包含</h4><ul><li>概念：媒体特性是指媒体设备的特性，用来描述设备的特点，比如：设备的宽度、高度</li><li>我们可以利用媒体特点来区分pc端还是移动端</li></ul><table><thead><tr><th align="center"><strong>值</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">width</td><td align="center">网页显示区域完全等于设备的宽度</td></tr><tr><td align="center">height</td><td align="center">网页显示区域完全等于设备的高度</td></tr><tr><td align="center">max-width</td><td align="center">网页显示区域小于等于设备宽度</td></tr><tr><td align="center">max-height</td><td align="center">网页显示区域小于等于设备高度</td></tr><tr><td align="center">min-width</td><td align="center">网页显示区域大于等于设备的宽度</td></tr><tr><td align="center">min-height</td><td align="center">网页显示区域大于等于设备的高度</td></tr><tr><td align="center">orientation</td><td align="center">portrait (竖屏模式) | landscape (横屏模式)</td></tr></tbody></table><h3 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h3><ol><li>让一些不能自适应的元素,达到当设备尺寸发生变化时,等比例适配当前设备</li><li>使用媒体查询根据不同的设备按比例设置html的字体大小,然后页面元素使用rem做单位,当html字体大小变化,元素尺寸也会发生变化,从而达到等比缩放的适配</li></ol><h4 id="rem适配方案-元素大小的取值"><a href="#rem适配方案-元素大小的取值" class="headerlink" title="rem适配方案-元素大小的取值"></a>rem适配方案-元素大小的取值</h4><ol><li>公式:页面元素的rem值=页面元素值(px)/(屏幕宽度/划分的份数)</li><li>屏幕宽度/划分的份数,就是html font-size 的大小</li><li>或是:页面元素的rem值=页面元素值(px)/html font-size 字体大小</li></ol><h4 id="选取步骤"><a href="#选取步骤" class="headerlink" title="选取步骤"></a>选取步骤</h4><ol><li>首先,选取一套标准尺寸   一般以750为准</li><li>用屏幕尺寸除以我们划分的份数,得到了html里文字的大小,不同屏幕下得到的文字大小是不一样的</li><li>页面元素的rem值=页面元素在 750像素下的px值 除以  html 里面的文字大小</li></ol><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li><p>原理：利用媒体查询，实现当使用不同的设备时可以采用不同的css样式，即一套代码，多端使用，同时保证无论哪种设备进行访问时，都有良好的用户体验</p><table><thead><tr><th>设备划分</th><th>尺寸区间</th><th>响应式尺寸设置</th></tr></thead><tbody><tr><td>超小屏幕(手机)</td><td>&lt;768px</td><td>宽度为100%</td></tr><tr><td>小屏设备(平板)</td><td>&gt;=768px~ &lt;992px</td><td>宽度为750px</td></tr><tr><td>中等屏幕（桌面显示器）</td><td>&gt;=992px~&lt;1200px</td><td>宽度为970px</td></tr><tr><td>宽屏设备(大桌面显示器)</td><td>&gt;=1200px</td><td>宽度为1170px</td></tr></tbody></table><ul><li>好处<ul><li>支持不同的屏幕，有很好的适应性</li><li>良好的用户体验</li></ul></li><li>缺点：<ul><li>大量的css代码，开发难度比较大，维护性下降</li></ul></li></ul></li></ul><h3 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h3><ul><li>响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果</li><li>原理：在不同屏幕下，通过媒体查询来改变布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端布局&quot;&gt;&lt;a href=&quot;#移动端布局&quot; class=&quot;headerlink&quot; title=&quot;移动端布局&quot;&gt;&lt;/a&gt;移动端布局&lt;/h1&gt;&lt;h2 id=&quot;移动端技术选型&quot;&gt;&lt;a href=&quot;#移动端技术选型&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="移动端layout" scheme="https://codehan045.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AFlayout/"/>
    
  </entry>
  
  <entry>
    <title>sass概述</title>
    <link href="https://codehan045.github.io/posts/3d54f335.html"/>
    <id>https://codehan045.github.io/posts/3d54f335.html</id>
    <published>2021-07-22T11:34:19.000Z</published>
    <updated>2021-07-22T15:39:41.277Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h1><h2 id="原生css的不便"><a href="#原生css的不便" class="headerlink" title="原生css的不便"></a>原生css的不便</h2><ul><li>书写重复的选择器</li><li>修改css样式，不能达到一处改处处改</li><li>css书写重复</li><li>结构不明确</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>sass是一个css预处理器，可以为网站启用可定义、可管理和可重用的样式表。sass是一个动态样式表语言，扩展了css的功能。<ul><li>css预处理是一种脚本语言，可扩展css并将其编译为常规css语法，以便浏览器读取。</li><li>sass提供了嵌套、变量、数学运算、混合、循环等等，为了提高css代码的编写的效率</li></ul></li><li>目标：能够极大提高编写css代码的速率，提高开发速率</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="使用vscode-中的easy-sass插件来使用"><a href="#使用vscode-中的easy-sass插件来使用" class="headerlink" title="使用vscode 中的easy sass插件来使用"></a>使用vscode 中的<code>easy sass</code>插件来使用</h3><ul><li>利用vscode按照easy sass插件（支持将sass文件编译为css文件）</li><li>新建以<code>.scss</code>或者<code>.sass</code>为后缀名的文件，在里面书写sass代码<ul><li><code>.sass</code>是旧版本的sass文件格式</li><li><code>.scss</code>是新版本的sass文件格式</li></ul></li><li>easy sass插件可以将编写好的sass文件自动转为css文件，在页面中直接引入css文件即可</li></ul><h4 id="手动自动编译的css文件的文件保存路径"><a href="#手动自动编译的css文件的文件保存路径" class="headerlink" title="手动自动编译的css文件的文件保存路径"></a>手动自动编译的css文件的文件保存路径</h4><ul><li><p>设置——easy sass——target DIr更改路径</p></li><li><p>注意：路径是配置在vscode中，所以是从工作区出发</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210722171828.png" alt="image-20210722171821565"></p></li></ul><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><ul><li><p>sass支持选择器里面嵌套子选择器</p></li><li><p>作用：让css代码层级结构清晰明了，不会出现父子标签之间的权重问题。</p></li><li><p>语法：</p><pre class=" language-scss"><code class="language-scss"><span class="token selector">父选择器</span><span class="token punctuation">{</span>    <span class="token selector">css代码；    子选择器</span><span class="token punctuation">{</span>        css代码；    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">例子：header</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token selector">nav</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token selector">ul</span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token selector">>li</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// &amp;代表父选择器</span>                <span class="token selector"><span class="token parent important">&amp;</span>:hover</span><span class="token punctuation">{</span>                    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token selector"><span class="token parent important">&amp;</span>::before</span><span class="token punctuation">{</span>                    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token selector"><span class="token parent important">&amp;</span>::after</span><span class="token punctuation">{</span>                    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"after"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token selector">+div</span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">~div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">编译后的css代码：header </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li:hover </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li::before </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul > li::after </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"after"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul + div </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header nav ul ~ div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量可以看作一个容器，存放一些数据，可以在代码中重复使用</p></li><li><p>变量需要先定义，再使用</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css">定义变量$变量名<span class="token punctuation">:</span>  变量值；</code></pre><ul><li>变量值可以是css属性的属性值，比如：100px，red， 还可以是复合属性的属性值：1px solid red</li><li>变量的命名<ul><li>变量名可以包含数字、字母、_和-</li><li>不能以数字开头，不能包含特殊符号</li><li>多个单词之间尽量使用-连接</li></ul></li></ul></li><li><p>注意：</p><ul><li>一般在文件开始部分定义变量，那么文件任意位置都可以使用</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;SASS&quot;&gt;&lt;a href=&quot;#SASS&quot; class=&quot;headerlink&quot; title=&quot;SASS&quot;&gt;&lt;/a&gt;SASS&lt;/h1&gt;&lt;h2 id=&quot;原生css的不便&quot;&gt;&lt;a href=&quot;#原生css的不便&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="sass" scheme="https://codehan045.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>CSS3基础</title>
    <link href="https://codehan045.github.io/posts/ee3be2f.html"/>
    <id>https://codehan045.github.io/posts/ee3be2f.html</id>
    <published>2021-07-21T04:41:16.000Z</published>
    <updated>2021-07-22T15:39:41.271Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="CSS3基础"><a href="#CSS3基础" class="headerlink" title="CSS3基础"></a>CSS3基础</h1><h2 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h2><ul><li><p>像规则的渐变，可以使用1px的渐变背景平铺，像不规则的渐变背景，只能裁剪为一张图片。通过图片来实现渐变，维护性比较低，影响网页的加载速度。</p></li><li><p>CSS 3 提出了背景的渐变：线性渐变和径向渐变</p></li><li><p>渐变背景可以看作一个“图像”，使用属性background-image或简写 background。</p></li></ul><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><ul><li><p>概念:线性渐变就是沿着一条直线进行颜色的渐变。</p></li><li><p>注意：渐变至少有两个颜色</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token function">linear-gradient</span><span class="token punctuation">(</span>渐变方向 , 颜色<span class="token number">1</span>  位置，颜色<span class="token number">2</span>  位置，   颜色<span class="token number">3</span>   位置<span class="token punctuation">)</span>；</code></pre></li><li><p>渐变方向</p><ul><li><p>to  方位单词    </p><ul><li>to  left ——&gt;-90deg 或者270deg</li><li>to top——0deg </li><li>to  right——90deg或者 -270deg</li><li>to  bottom  —— 180deg或者-180deg</li><li>to  top  left——   -45deg或者315deg</li><li>to  top right ——  45deg或者 -315deg</li><li>to  bottom left ——   -135deg或者225deg</li><li>to bottom right ——  135deg或  -225deg</li></ul></li><li><p>角度：必须带deg单位，0deg的方向是垂直向上，顺时针是正方向，逆时针是负方向</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720105842.png" alt="image-20210720105842728"></p></li></ul></li><li><p>色标：是由一个颜色和一个位置构成，色标可以写多个</p><p>颜色：单词、#十六进制 、rgb、rgba</p><p>位置：百分比，像素</p><ul><li><p>只设置颜色，渐变默认是均匀渐变</p></li><li><p>如果首尾的颜色不在0%或者100%，那么默认是首尾颜色的纯色</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*0%~20%是red，20%~40%是红到绿的渐变，40%~80%是绿色到粉色的渐变，80%~100%是粉色 */</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red <span class="token number">20%</span>,green <span class="token number">40%</span>,pink <span class="token number">80%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>如果两个颜色的位置相同，那么中间渐变的范围为0 ，就会出现断层的效果</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red <span class="token number">20%</span>,green <span class="token number">20%</span>,pink <span class="token number">80%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h3><ul><li><p>将线性渐变重复铺设，使用<code>repeating-linear-gradient</code></p></li><li><p>注意：只有首尾不在0%或者100%时，重复线性渐变才有效</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>pink <span class="token number">0</span>px, pink <span class="token number">20</span>px,yellow <span class="token number">20</span>px ,yellow <span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><ul><li><p>概念：径向渐变就是椭圆渐变，渐变是沿着椭圆的半径径向渐变，圆其实是一种特殊椭圆</p></li><li><p>分为两部分：</p><ul><li>椭圆：用来控制径向渐变的位置、大小、形状等</li><li>色标：是由一个颜色和一个位置构成，用来控制渐变颜色变化</li></ul></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token function">radial-gradient</span><span class="token punctuation">(</span>大小  形状  at  x轴  y轴,   颜色<span class="token number">1</span>  位置，颜色<span class="token number">2</span>   位置，颜色<span class="token number">3</span>  位置 <span class="token number">...</span><span class="token punctuation">)</span>；</code></pre></li><li><p>大小</p><ul><li><code>farthest-corner</code>：默认值，半径是圆心到最远角</li><li><code>farthest-side</code>：半径是圆心到最远边</li><li><code>closest-corner</code>：半径是圆心到最近角</li><li><code>closest-side</code>：半径是圆心到最近的边</li></ul></li><li><p>形状：</p><ul><li><code>ellipse</code>：椭圆 默认值</li><li><code>circle</code>：正圆</li></ul></li><li><p>圆心：at x轴  y轴  可以控制径向渐变位置，默认圆心在盒子的中心点，center center</p><ul><li>单词：left  right  center top  bottom 两两搭配使用</li><li>像素</li><li>百分比：参考的盒子的宽和高  50% 50%相当于center center</li></ul></li></ul><h3 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h3><ul><li><p>将径向渐变重复铺设</p></li><li><p>注意：只有首尾不再0%或100%时，重复径向渐变才有效</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">repeating-radial-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#ccc</span> <span class="token number">0</span>px,<span class="token hexcode">#ccc</span> <span class="token number">5</span>px, <span class="token hexcode">#666</span> <span class="token number">5</span>px, <span class="token hexcode">#666</span> <span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="圆角原理"><a href="#圆角原理" class="headerlink" title="圆角原理"></a>圆角原理</h2><ul><li><p>盒子默认四个角都是直角，通过border-radius设置圆角的效果</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css">分别设置四个角的圆角border-top-left-radiusborder-top-right-radiusborder-bottom-left-radiusborder-bottom-right-radius复合属性border-radius一个值：四个角同时设置两个值：左上右下   右上左下三个值：左上   右上左下   右下四个值：左上   右上   右下  左下八个值：<span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px / <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>注意<span class="token punctuation">:</span> /前面代表每个角的水平半径，/后面代表每个角的垂直半径</code></pre></li><li><p>圆角的形成：取一个椭圆或者正圆的一段圆弧</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720152629.png" alt="image-20210720152629470"></p></li><li><p>如果垂直半径和水平半径相等，取的时正圆的圆弧，如果水平半径和垂直半径不等，取的是椭圆的圆弧。</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720152714.png" alt="image-20210720152714872"></p></li></ul><h3 id="内半径和外半径"><a href="#内半径和外半径" class="headerlink" title="内半径和外半径"></a>内半径和外半径</h3><ul><li>当边框的足够宽时，设置的border-radius大于边框的宽度，边框外层的圆角是外半径的形成，边框内部的圆角是内半径形成</li><li>内半径=外半径  - 边框的厚度</li><li>注意：当border-radius的大小小于边框时，内半径为负，不能渲染，默认为0，当border-radius（外半径）大于边框时，内半径为正，边框内部采用圆角的效果</li></ul><p>应用场景：</p><ol><li>绘制正圆：盒子的宽高相等，设置border-radius：50%</li><li>绘制胶囊状：设置border-radius为短边的一半</li></ol><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><ul><li><p>使用<code>box-shadow</code>给盒子添加阴影</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色；虚化程度和阴影大小可以不写<span class="token property">box-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴偏移量   颜色；将外部阴影转为内部阴影<span class="token property">box-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色  inset；可以设置多层的阴影，中间使用逗号隔开box-shadow：x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色，x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色，x轴偏移量  y轴偏移量   虚化程度  阴影大小  颜色；</code></pre></li><li><p><code>box-shadow:20px 10px 20px  12px black ;</code></p><ul><li>第一个值：水平偏移量，设置阴影的水平位置，正值向右移动，负值向左移动</li><li>第二个值：垂直偏移量，设置阴影的垂直位置，正值向下移动，负值向上移动</li><li>第三个值：阴影的模糊半径，虚化程度  可省略</li><li>第四个值：阴影的大小 可省略</li><li>第五个值：阴影的颜色</li></ul></li><li><p>外部阴影(默认值)/内部阴影(inset在属性值最后添加)</p></li><li><p>多层阴影，之间使用逗号隔开</p></li></ul><h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><ul><li><p><code>text-shadow</code>给文本添加阴影</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>x轴偏移量  y轴的偏移量  虚化程度  颜色；</code></pre></li></ul><h2 id="结构选择器"><a href="#结构选择器" class="headerlink" title="结构选择器"></a>结构选择器</h2><ul><li>根据html代码结构找到对应的标签，也是伪类选择器</li></ul><h3 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a>:first-child</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个元素里面的第一个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中的所有class名为box的标签里面所有的后代p标签，并且这个p标签必须是某个标签的第一个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个标签的倒数第一个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中的所有class名为box的标签里面所有的后代p标签，并且这个p标签必须是某个标签的最后一个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="nth-child-n"><a href="#nth-child-n" class="headerlink" title=":nth-child(n)"></a>:nth-child(n)</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个标签的第n个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，并且这个p标签是某个标签第n个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-child(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>找到偶数行的子标签：  <code>:nth-child(2n)</code>/  <code>:nth-child(even)</code></p></li><li><p>找到奇数行的子标签：<code>:nth-child(2n-1)</code>或<code>:nth-child(2n+1)</code>/  <code>:nth-child(odd)</code></p></li></ul><h3 id="nth-last-child-n"><a href="#nth-last-child-n" class="headerlink" title=":nth-last-child(n)"></a>:nth-last-child(n)</h3><ul><li><p>找到满足条件的标签，并且这个标签是某个标签的倒数第n个子标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，并且这个p标签是某个标签倒数第n个子元素*/</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-last-child(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="nth-of-type-n"><a href="#nth-of-type-n" class="headerlink" title=":nth-of-type(n)"></a>:nth-of-type(n)</h3><ul><li><p>找到满足条件的标签，将标签筛选出来，重新排序，找到其中的第n个标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，将p标签按照代码顺序重新排序，找到其中的第n个标签 */</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-of-type(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="nth-last-of-type-n"><a href="#nth-last-of-type-n" class="headerlink" title=":nth-last-of-type(n)"></a>:nth-last-of-type(n)</h3><ul><li><p>找到满足条件的标签，将标签筛选出来，重新排序，找到其中的倒数第n个标签</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*找到页面中所有class名为box的标签里面的所有后代p标签，将p标签按照代码顺序重新排序，找到其中的倒数第n个标签 */</span><span class="token selector"><span class="token class">.box</span> p<span class="token pseudo-class">:nth-last-of-type(n)</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="CSS3滤镜filter（了解）"><a href="#CSS3滤镜filter（了解）" class="headerlink" title="CSS3滤镜filter（了解）"></a>CSS3滤镜filter（了解）</h3><ul><li><p><code>filter</code> CSS属性将模糊或颜色偏移等图形效果应用于元素。</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"> <span class="token property">filter</span><span class="token punctuation">:</span> 函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*例如：*/</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> blur模糊处理 数值越大越模糊</code></pre></li></ul><h3 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h3><ul><li><p>此CSS函数让你在声明CSS属性值时执行一些计算。</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> 括号里面可以使用 + - * / 来进行计算。</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;CSS3基础&quot;&gt;&lt;a href=&quot;#CSS3基础&quot; class=&quot;headerlink&quot; title=&quot;CSS3基础&quot;&gt;&lt;/a&gt;CSS3基础&lt;/h1&gt;&lt;h2 id=&quot;渐变背景&quot;&gt;&lt;a href=&quot;#渐变背景&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS3" scheme="https://codehan045.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>H5标签</title>
    <link href="https://codehan045.github.io/posts/3e68ff45.html"/>
    <id>https://codehan045.github.io/posts/3e68ff45.html</id>
    <published>2021-07-20T14:33:16.000Z</published>
    <updated>2021-07-24T02:35:55.015Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h2 id="HTML5-新增的语义化标签"><a href="#HTML5-新增的语义化标签" class="headerlink" title="HTML5 新增的语义化标签"></a>HTML5 新增的语义化标签</h2><h3 id="语义化标签的好处"><a href="#语义化标签的好处" class="headerlink" title="语义化标签的好处"></a>语义化标签的好处</h3><ol><li>易于用户阅读，样式丢失的时候让页面结构更加清晰</li><li>有利于SEO，搜索引擎根据标签确定上下文和各个关键字的权重</li><li>方便其他设备的解析，如盲人阅读器</li><li>有利于开发和维护，语义化标签具有可读性，代码更好维护</li></ol><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><ul><li><p>在之前的布局中，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“header”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“nav”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“content”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>“footer”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>&lt;header&gt;</code>：头部标签</p></li><li><p><code>&lt;main&gt;</code>:网页的主体部分，内容区域，页面上有且仅有一个标签</p></li><li><p> <code>&lt;nav&gt;</code>：导航标签</p></li><li><p><code>&lt;article&gt;</code>：内容标签</p></li><li><p><code>&lt;section&gt;</code>：定义文档某个区域</p></li><li><p> <code>&lt;aside&gt;</code>：侧边栏标签</p></li><li><p> <code>&lt;footer&gt;</code>：尾部标签</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210722194703.png"></p><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><ul><li>H5媒体标签，早期通过flash技术来引入</li></ul><h4 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签 audio"></a>音频标签 audio</h4><ul><li><p>用于引入音频文件</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html">写法一:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file/music.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">muted</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span>写法二：<span class="token comment" spellcheck="true">&lt;!-- 可以连接多种不同的音频文件格式，可以避免浏览器对音频的兼容问题 --></span> &lt; audio controls="controls" >     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span><span class="token punctuation">></span></span> 标签。 &lt;/ audio></code></pre><ul><li><code>src</code>：连接音频的文件</li><li><code>controls</code>：这是一个控制器，可以控制音频的播放等等</li><li><code>muted</code>：静音播放</li><li><code>autoplay</code>：自动播放</li><li><code>loop</code>：循环播放</li></ul></li></ul><h4 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签 video"></a>视频标签 video</h4><ul><li><p>用于网页中视频文件的引入</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html">写法一：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file/play.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>写法二：<span class="token comment" spellcheck="true">&lt;!-- 引入多种不同的视频文件格式，避免浏览器兼容性问题 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span> 标签播放视频 &lt;/ video ></code></pre></li><li><p>属性：</p><ul><li><code>src</code>：连接视频的文件</li><li><code>controls</code>：这是一个控制器，可以控制视频的播放、快进等等</li><li><code>muted</code>：静音播放</li><li><code>autoplay</code>：自动播放（谷歌浏览器需要添加muted来解决自动播放的问题）</li><li><code>loop</code>：循环播放</li><li><code>poster</code>：加载等待的画面图片</li></ul><p>学习js的时候，我们可以自己开发视频播放器、弹幕、快进、播放暂停等等</p></li></ul><h4 id="多媒体标签总结"><a href="#多媒体标签总结" class="headerlink" title="多媒体标签总结"></a>多媒体标签总结</h4><ul><li>音频标签和视频标签使用方式基本一致</li><li>浏览器支持情况不同</li><li>谷歌浏览器把音频和视频自动播放禁止了</li><li> 我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li><li> 视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li></ul><h3 id="语义化标签的使用"><a href="#语义化标签的使用" class="headerlink" title="语义化标签的使用"></a>语义化标签的使用</h3><table><thead><tr><th>标签名</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;header&gt;</code></td><td>代表网页的头部</td></tr><tr><td><code>&lt;main&gt;</code></td><td>网页的主体部分，内容区域，页面上有且仅有一个标签</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>代表导航</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>代表网页的尾部</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>代表侧边栏</td></tr><tr><td><code>&lt;article&gt;</code></td><td>代表网页中一个独立区域，一般方内容</td></tr><tr><td><code>&lt;section&gt;</code></td><td>代表网页中一个模块，理解为平时的div</td></tr><tr><td><code>&lt;audio&gt;</code></td><td>音频</td></tr><tr><td><code>&lt;video&gt;</code></td><td>视频</td></tr><tr><td><code>&lt;source&gt;</code></td><td>资源标签，用于连接多媒体资源</td></tr><tr><td><code>&lt;thead&gt;</code></td><td>表格的头部</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td>表格的内容</td></tr><tr><td><code>&lt;tfoot&gt;</code></td><td>表格的尾部</td></tr><tr><td><code>&lt;canvas&gt;</code></td><td>定义图形</td></tr></tbody></table><ul><li>section：表示网页中一个模块，作用类似div，如果内容可以分为几部分，可以使用article，在article里面使用section来表示没部分。</li><li>article：代表是一个独立的区域，区域可以分为多个section</li><li>aside：侧边栏、广告。推荐信息</li></ul><h4 id="标签如何去选择"><a href="#标签如何去选择" class="headerlink" title="标签如何去选择"></a>标签如何去选择</h4><ul><li>最外层标签尽量使用语义化标签</li><li>标题尽量使用标题标签，主要目的是为了seo优化</li><li>对于网页的内容区域，如果重复出现一些模块可以使用section</li><li>具体内容该用什么标签还是用什么标签</li></ul><h2 id="H5新增表单标签"><a href="#H5新增表单标签" class="headerlink" title="H5新增表单标签"></a>H5新增表单标签</h2><ul><li><p>form、input（text）、input（password）、input(radio)、input（checkbox）、select、textarea、按钮（input、button）</p></li><li><p>新增了很多表单标签，新增了功能性的标签。</p></li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>type="email"</code></td><td>提供邮箱格式的验证，以后通过js控制</td></tr><tr><td><code>type="number"</code></td><td>只能输入数字</td></tr><tr><td><code>ype="url"</code></td><td>只能输入http或者https开头的完整的网址</td></tr><tr><td><code>type="color"</code></td><td>提供选取颜色的色块</td></tr><tr><td><code>type="range"</code></td><td>选取范围</td></tr><tr><td><code>type="file" </code></td><td>文件上传，默认文件只能上传一个，设置<code>multiple</code>属性可以上传多个文件</td></tr><tr><td><code>type="date"</code></td><td>选择年/月/日</td></tr><tr><td><code> type="month"</code></td><td>选择某年某月</td></tr><tr><td><code>type="week"</code></td><td>选择某年第几周</td></tr><tr><td><code> type="time"</code></td><td>选择时间</td></tr><tr><td><code>type=search</code></td><td>搜索框</td></tr><tr><td><code>type=tel</code></td><td>手机号</td></tr></tbody></table><h3 id="选项列表-datalist"><a href="#选项列表-datalist" class="headerlink" title="选项列表 datalist"></a>选项列表 datalist</h3><ul><li><p>datalist需要和输入框进行绑定</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datalist的id名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小猪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小猪佩奇<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小猪乔治<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小米手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大米手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span></code></pre><ul><li>通过input框的list属性和datalist的id名进行绑定</li></ul></li></ul><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><ul><li>required：必填项，必须填写才能提交，其内容不能为空</li><li>autofocus：自动获取焦点</li><li>readonly：只读，不能修改内容,可以复制，可以提交给服务器</li><li>disabled：禁用，不能修改内容，可以复制，不能提交给服务器</li><li>autocomplete：值为off/on 当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出字段中填写的选项 ，默认打开 ，值为off关闭</li></ul><p>可以通过以下设置方式修改placeholder里面的字体颜色： <code> input::placeholder { color: pink; }</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h2 id=&quot;HTML5-新增的语义化标签&quot;&gt;&lt;a href=&quot;#HTML5-新增的语义化标签&quot; class=&quot;headerlink&quot; title=&quot;HTML5 新增的语义化标签&quot;&gt;&lt;/a&gt;HTML5 新增的语义化标签&lt;/h2&gt;&lt;h3 id=&quot;语义化标签的好处</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML5" scheme="https://codehan045.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>CSS兼容</title>
    <link href="https://codehan045.github.io/posts/8db9e096.html"/>
    <id>https://codehan045.github.io/posts/8db9e096.html</id>
    <published>2021-07-20T02:21:58.000Z</published>
    <updated>2021-07-20T14:09:50.561Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="CSS兼容"><a href="#CSS兼容" class="headerlink" title="CSS兼容"></a>CSS兼容</h1><h2 id="兼容性问题来源"><a href="#兼容性问题来源" class="headerlink" title="兼容性问题来源"></a>兼容性问题来源</h2><p>内核是浏览器中最底层、最核心的代码，决定了网页在浏览器如何解析的，网页时如何被加载的。</p><p>不同的浏览器的有不同的内核，每种浏览器对相同的代码有不同的解析方式，最终结果不一样，这种情况就是兼容性问题。</p><p>同一网页在不同浏览器下运行出现的结果不一样，就叫兼容。</p><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><ul><li><p>不同的浏览器内核是不一样。</p></li><li><p>目前主流浏览器：chrome、firfox、opera、IE、safira等</p></li><li><p>国产浏览器：猎豹、360、QQ、搜狗、UC等等，</p></li><li><p>目前国内没有自己的内核，360浏览器推出双核：IE  trident和safira  的webkit 一起集成。</p></li></ul><h3 id="内核的作用"><a href="#内核的作用" class="headerlink" title="内核的作用"></a>内核的作用</h3><ul><li><p>解析网页</p><ul><li>HTML内容解析</li><li>CSS解析</li><li>js解析</li></ul></li><li><p>内核有个重要的概念：渲染引擎</p></li><li><p>渲染引擎包含几部分：</p><ol><li>HTML解析器：会将html代码解析成一颗DOM树，上面每个节点就是对应的标签</li><li>CSS解析器：将css样式计算出来，内存cpu一起工作</li><li>JavaScript解析器：允许运行js脚本的环境</li><li>布局：主要网页中模块定位、浮动、排列等等。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720101108.png" alt="image-20210720093315726"></p><h3 id="网页解析流程（网页是如何解析出来的）"><a href="#网页解析流程（网页是如何解析出来的）" class="headerlink" title="网页解析流程（网页是如何解析出来的）"></a>网页解析流程（网页是如何解析出来的）</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210720101111.png" alt="image-20210720093948257"></p><ol><li><p>加载网页代码</p><ol><li>判断是否是网络资源，是就利用网络模块从网络上获取网页代码</li><li>如果是本地的文件，则直接加载本地 文件代码到内核中</li></ol></li><li><p>经过html解析器，对代码进行解析</p><p>浏览器从代码第一行开始解析，把不同类型的代码交给对应的解析器进行解析</p><ul><li>css代码——&gt; css解析器</li><li>JavaScript代码——&gt; JavaScript解析器</li><li>html代码——&gt;html解析器</li></ul></li><li><p>将各个解析器的结果综合进行梳理（内部表示）</p><p>将标签和对应的css结合起来，每个标签都有自己的渲染对象，里面包含了该标签最终的样式</p></li><li><p>布局和绘图</p><p>会把每个标签的样式、位置绘制在页面上，如果需要使用图片、视频音频等内容，再利用对应的模块来处理，处理完成之后直接显示在页面上。</p></li></ol><h2 id="兼容性问题的处理"><a href="#兼容性问题的处理" class="headerlink" title="兼容性问题的处理"></a>兼容性问题的处理</h2><h3 id="hack代码（针对IE浏览器）"><a href="#hack代码（针对IE浏览器）" class="headerlink" title="hack代码（针对IE浏览器）"></a>hack代码（针对IE浏览器）</h3><blockquote><p>专门针对特定浏览器设置css代码</p><p>针对不同的浏览器或者浏览器不同的版本写不同的代码，这个写css代码的过程称为css  hack。</p></blockquote><h4 id="CSS-hack分类"><a href="#CSS-hack分类" class="headerlink" title="CSS hack分类"></a>CSS hack分类</h4><h5 id="属性前缀法"><a href="#属性前缀法" class="headerlink" title="属性前缀法"></a>属性前缀法</h5><blockquote><p>属性前缀法是在css代码属性名前添加一些特定浏览器才能识别的hack前缀，以达到预期效果。</p></blockquote><ul><li>缺点：属性前缀只能单个属性设置，多个属性一个一个设置。</li></ul><table><thead><tr><th align="center">hack</th><th align="center">写法</th><th align="center">实例</th><th align="center">IE6 (S)</th><th align="center">IE6 (Q)</th><th align="center">IE7 (S)</th><th align="center">IE7 (Q)</th><th align="center">IE8 (S)</th><th align="center">IE8 (Q)</th><th align="center">IE9 (S)</th><th align="center">IE9 (Q)</th><th align="center">IE10 (S)</th><th align="center">IE10 (Q)</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">*color</td><td align="center">青色</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">+</td><td align="center">+color</td><td align="center">绿色</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">-</td><td align="center">-color</td><td align="center">黄色</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center">_</td><td align="center">_color</td><td align="center">蓝色</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center">#</td><td align="center">#color</td><td align="center">紫色</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">\0</td><td align="center">color:red\0</td><td align="center">红色</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">\9\0</td><td align="center">color:red\9\0</td><td align="center">粉色</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">!important</td><td align="center">color:blue !important; color:green;</td><td align="center">棕色</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table><h5 id="选择器前缀法"><a href="#选择器前缀法" class="headerlink" title="选择器前缀法"></a>选择器前缀法</h5><blockquote><p>通过在css代码的选择器前添加一些特定浏览器能识别的代码。</p></blockquote><table><thead><tr><th align="center">语法</th><th align="center">IE6</th><th align="center">IE7</th><th align="center">IE8</th><th align="center">IE9</th><th align="center">IE10</th></tr></thead><tbody><tr><td align="center">* html *</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">* +html*+</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">@media screen\9{…}</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">@media \0screen{…}</td><td align="center">×</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">@media \0screen\ , screen\9{…}</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">@media screen\0{…}</td><td align="center">×</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">@media screen and (min-width:0\0){…}</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">@media screen and (-ms-hirh-contrast : active) , (-ms-high-contrast:none){…}</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr></tbody></table><h5 id="条件注释法"><a href="#条件注释法" class="headerlink" title="条件注释法"></a>条件注释法</h5><blockquote><p>通过注释的语法来完成样式指定版本导入。</p></blockquote><ul><li>gte 大于等于  gt大于  lte小于等于  lt小于   ！否</li></ul><pre><code>只在IE下生效&lt;!--[if IE]&gt;这段文字只在IE浏览器显示&lt;![endif]--&gt;只在IE6下生效&lt;!--[if IE 6]&gt;这段文字只在IE6浏览器显示&lt;![endif]--&gt;只在IE6以上版本生效&lt;!--[if gte IE 6]&gt;这段文字只在IE6以上(包括)版本IE浏览器显示&lt;![endif]--&gt;只在IE8上不生效&lt;!--[if ! IE 8]&gt;这段文字在非IE8浏览器显示&lt;![endif]--&gt;非IE浏览器生效&lt;!--[if !IE]&gt;这段文字只在非IE浏览器显示&lt;![endif]--&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;CSS兼容&quot;&gt;&lt;a href=&quot;#CSS兼容&quot; class=&quot;headerlink&quot; title=&quot;CSS兼容&quot;&gt;&lt;/a&gt;CSS兼容&lt;/h1&gt;&lt;h2 id=&quot;兼容性问题来源&quot;&gt;&lt;a href=&quot;#兼容性问题来源&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS兼容" scheme="https://codehan045.github.io/tags/CSS%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>FC详解与应用</title>
    <link href="https://codehan045.github.io/posts/7d6823a6.html"/>
    <id>https://codehan045.github.io/posts/7d6823a6.html</id>
    <published>2021-07-19T03:06:39.000Z</published>
    <updated>2021-07-19T10:08:28.624Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="FC"><a href="#FC" class="headerlink" title="FC"></a>FC</h1><p>在解释什么是BFC之前，我们需要先知道Box、Formatting Context的概念。</p><h3 id="Box：css布局的基本单位"><a href="#Box：css布局的基本单位" class="headerlink" title="Box：css布局的基本单位"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p><ul><li><p>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</p></li><li><p>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</p></li></ul><h3 id="Formatting-Context"><a href="#Formatting-Context" class="headerlink" title="Formatting Context"></a>Formatting Context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>BFC（Block formatting context) 直译为”块级格式化（环境/上下文）。它是一个独立的渲染区域，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。只有Block-level box 参与，它规定了内部的Block-level Box如何布局。</p></blockquote><h3 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h3><p><strong>W3C原文</strong><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210201114826.png"></p><p><strong>翻译为中文</strong></p><ul><li>内部的box会垂直方向上，一个接着一个显示。（标准文档流）</li><li>box垂直方向的距离由margin决定，属于同一个BFC 的两个相邻的盒子的margin会发生重叠。<ul><li>如果两个盒子属于不同的BFC区域，盒子的margin不会发生重叠，外边距重叠问题的解决</li></ul></li><li>每个元素的左外边缘（margin-left）,与包含块的左边相接触（对于从左往右排列的格式化，否则相反）；即使存在浮动也是如此，除非这个元素自己形成了一个新的BFC区域。</li><li>BFC区域不会与float box重叠<ul><li>可以让浮动元素和非浮动元素（BFC）可以同行显示，不会发生重叠</li></ul></li><li>BFC区域就是页面上一个独立的容器，容器里面的子元素不会影响外面的元素，反之亦然；</li><li>计算BFC区域的高度时，浮动元素也参与计算<ul><li>可以解决子元素浮动，父元素高度塌陷问题</li></ul></li></ul><h3 id="如何创建BFC（成为BFC容器）"><a href="#如何创建BFC（成为BFC容器）" class="headerlink" title="如何创建BFC（成为BFC容器）"></a>如何创建BFC（成为BFC容器）</h3><ol><li>float的值不为none（可选值：left，right）</li><li>position的值不是static、relative(可选值：absolute、fixed、sticky)</li><li>display的值为inline-block、table-cell、flex、table-caption、inline-flex</li><li>overflow的值不是visible（可选值：hidden、scroll、auto)</li></ol><h3 id="BFC的应用"><a href="#BFC的应用" class="headerlink" title="BFC的应用"></a>BFC的应用</h3><ul><li><p>场景一：每个元素的左外边缘（margin-left）,与包含块的左边相接触（对于从左往右排列的格式化，否则相反）；即使存在浮动也是如此，除非这个元素自己形成了一个新的BFC区域。</p></li><li><p>场景二：BFC区 域不会与float box重叠，可以用于实现三列布局</p><ul><li>三列布局：左右两边固定，中间自适应</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.center</span></span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      </code></pre></li><li><p>场景三：计算BFC区域的高度时，浮动元素也参与计算</p><ul><li>可以解决子元素浮动，父元素高度塌陷的问题</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 计算BFC区域的高度时，浮动元素也参与计算 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* BFC容器 */</span>        <span class="token comment" spellcheck="true">/* overflow: hidden; */</span>        <span class="token comment" spellcheck="true">/* float: left; */</span>        <span class="token comment" spellcheck="true">/* position: absolute; */</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.item</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid green<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>场景四：box垂直方向的距离由margin决定，属于同一个BFC 的两个相邻的盒子的margin会发生重叠。</p><ul><li>BFC区域可以用来解决margin重叠性问题，将其中一个盒子放进一个新的BFC容器里面</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>以上例子都体现了：</strong></p><blockquote><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p></blockquote><ul><li>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</li></ul><h2 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Inline Formating Context(行内格式化上下文)，简称IFC。</p><p>指的是一行的区域的渲染规则，确定了一行中行级元素是如何进行排列，以及对齐方式</p></blockquote><h3 id="IFC区域的特点"><a href="#IFC区域的特点" class="headerlink" title="IFC区域的特点"></a>IFC区域的特点</h3><ul><li><p>在IFC中，盒子水平放置，一个接着一个，从包含块的顶部开始</p></li><li><p>盒子间margin、padding在水平方向有效</p></li><li><p>这些盒子可以通过不同的方式进行对齐：可能通过底部和顶部进行对齐，通过基线进行对齐</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210719112922.png"></p><ul><li>绿色：顶线</li><li>蓝色：中线</li><li>红色：基线</li><li>紫色：底线</li></ul></li><li><p>行盒：IFC负责的矩形区域就叫行盒，指一行的渲染区域，每一行都有多个元素共同组成行盒（line box）</p><ul><li>行盒的宽度：有内容和包含块决定</li><li>行盒的高度：由内部元素共同决定</li></ul></li></ul><h3 id="主要影响IFC布局（行盒高度）的css属性"><a href="#主要影响IFC布局（行盒高度）的css属性" class="headerlink" title="主要影响IFC布局（行盒高度）的css属性"></a>主要影响IFC布局（行盒高度）的css属性</h3><ul><li><code>font-size</code>：不同的字体大小，会影响行盒的高度</li><li><code>font-family</code>：不同的字体类型，会影响行盒的高度</li><li><code>height | line-height</code>：不同的值都会影响行盒的高度</li><li><code>vertical-align</code>：设置元素的对齐的方式，不同的方式也会影响行盒高度</li></ul><h4 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h4><ul><li>不同的font-size会影响行盒的高度，取较大的那个值</li></ul><h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><ul><li>不同的font-family会影响行盒的高度，原因在于，设计时默认了不同的字体有不同的高度</li></ul><h4 id="height-line-height"><a href="#height-line-height" class="headerlink" title="height | line-height"></a>height | line-height</h4><ul><li><p><code>line-height</code>：指的是行高，行高指的是文本最高点到最低点区域。</p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210719114155.png"></p></li><li><p><code>height | line-height</code>都会影响行盒的高度，值越大，行盒的高度越高</p></li></ul><h4 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h4><ul><li><p>设置行级元素的垂直对齐方式</p><ul><li><code>baseline</code>:默认值，基线对齐</li><li><code>middle</code>：中线对齐</li><li><code>top</code>：顶线对齐</li><li><code>bottom</code>：底线对齐</li></ul></li></ul><h5 id="文本之间"><a href="#文本之间" class="headerlink" title="文本之间"></a>文本之间</h5><blockquote><p>文字与文字之间的对齐方式，设置这个属性设置参考线，文本默认是 基线和其他元素对齐</p></blockquote><h5 id="文本和图片之间"><a href="#文本和图片之间" class="headerlink" title="文本和图片之间"></a>文本和图片之间</h5><blockquote><p>文本和图片之间的对齐方式，文本默认是以基线和图片默认的底部进行对齐</p></blockquote><ul><li>文字设置<code>vertical-align</code>：图片按照文本的对齐方式（参考线）来对齐</li><li>图片设置<code>vertical-algin</code>：文本按照图片的对齐方式（参考线）来对齐</li></ul><h5 id="表格中文字垂直方向对齐方式"><a href="#表格中文字垂直方向对齐方式" class="headerlink" title="表格中文字垂直方向对齐方式"></a>表格中文字垂直方向对齐方式</h5><blockquote><p>table中文本在垂直方向显示位置，设置单元格中文本在垂直方向的显示位置</p></blockquote><ul><li><code>top</code>：单元格中文本顶对齐</li><li><code>bottom</code>：单元格中文本底对齐</li><li><code>middle</code>：默认，单元格中文本垂直方向上居中对齐</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;FC&quot;&gt;&lt;a href=&quot;#FC&quot; class=&quot;headerlink&quot; title=&quot;FC&quot;&gt;&lt;/a&gt;FC&lt;/h1&gt;&lt;p&gt;在解释什么是BFC之前，我们需要先知道Box、Formatting Context的概念。&lt;/p&gt;
&lt;h3 id=&quot;Box</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="layout" scheme="https://codehan045.github.io/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>移动端基础</title>
    <link href="https://codehan045.github.io/posts/5d1648de.html"/>
    <id>https://codehan045.github.io/posts/5d1648de.html</id>
    <published>2021-07-18T08:42:21.000Z</published>
    <updated>2021-07-20T08:14:07.973Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><h2 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h2><h3 id="PC端常见浏览器"><a href="#PC端常见浏览器" class="headerlink" title="PC端常见浏览器"></a>PC端常见浏览器</h3><ul><li>360浏览器，谷歌浏览器，火狐浏览器，QQ浏览器，百度浏览器，搜狗浏览器，IE浏览器</li></ul><h3 id="移动端常见浏览器"><a href="#移动端常见浏览器" class="headerlink" title="移动端常见浏览器"></a>移动端常见浏览器</h3><ul><li>UC浏览器，QQ浏览器，欧鹏浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器等</li></ul><blockquote><p>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可</p></blockquote><h3 id="移动端调试方法"><a href="#移动端调试方法" class="headerlink" title="移动端调试方法"></a>移动端调试方法</h3><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地Web服务器,手机和服务器是一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h2 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h2><ul><li>概念：就是浏览器显示页面内容的屏幕区域，视口可以分为布局视口，视觉视口和理想视口</li></ul><h3 id="布局视口-Layout-viewport"><a href="#布局视口-Layout-viewport" class="headerlink" title="布局视口  Layout viewport"></a>布局视口  Layout viewport</h3><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期PC端页面在手机上显示的问题</li><li>IOS,Android 基本都将这个视口分辨率设置为980px，大多数网页都能在手机上显示，只不过元素看上去很小，一般默认可以通过手动缩放网页</li></ul><h3 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h3><ul><li>字面意思，是指用户看到的网站区域，注:网站的区域</li><li>可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍然保持原来的宽度</li></ul><h3 id="理想视口-ideal-viewport"><a href="#理想视口-ideal-viewport" class="headerlink" title="理想视口 ideal viewport"></a>理想视口 ideal viewport</h3><ul><li>网站在移动端有最理想的浏览和阅读宽度而设定</li><li>需要手动添写meta视口标签通知浏览器操作</li><li>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单来说就是设备有多宽，布局的视口就有多宽 </li></ul><h3 id="meta视口标签"><a href="#meta视口标签" class="headerlink" title="meta视口标签"></a>meta视口标签</h3><ul><li><p>标准的viewport设置</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0,maximum-scale<span class="token punctuation">=</span>1.0,minimum-scale<span class="token punctuation">=</span>1.0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>宽度设置的是viewport宽度，可以设置device-width特殊值</td></tr><tr><td>initial-scale</td><td>初始缩放比，大于0 的数字</td></tr><tr><td>maximum-scale</td><td>最大缩放比，大于0的数字</td></tr><tr><td>minimum-scale</td><td>最小缩放比，大于0的数字</td></tr><tr><td>user-scalable</td><td>用户是否可以缩放，yes或no(1或0)</td></tr></tbody></table><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><h3 id="物理像素-amp-物理像素比"><a href="#物理像素-amp-物理像素比" class="headerlink" title="物理像素&amp;物理像素比"></a>物理像素&amp;物理像素比</h3><ul><li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的，在厂商出厂时就设置好了的，比如：iphone6/7/8是 750*1334</li><li>我们开发时1px不一定等于一个物理像素的</li><li>pc端页面，1px等于1个物理像素，但是移动端不尽相同</li><li>一个px能显示的物理像素点的个数，称为物理像素比或屏幕像素比</li></ul><h3 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h3><ul><li>对于一张50px*50px的图片，在手机Retina屏中打开，按照物理像素比会放大倍数，会照成图片模糊</li><li>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li><li>通常使用二倍图，还可能存在3倍图和4倍图的情况，看实际需求</li><li>背景图片注意缩放问题background-size</li></ul><h2 id="移动端开发选择"><a href="#移动端开发选择" class="headerlink" title="移动端开发选择"></a>移动端开发选择</h2><h3 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h3><ol><li>单独制作移动端页面（主流）<ul><li>通常情况下，网址域名前面加m(mobole)可以打开移动端</li><li>通过判断设备，若是移动设备打开，则跳到移动端页面</li></ul></li><li>响应式页面兼容移动端（其次）<ul><li>缺点：制作麻烦，需要很大的精力去调兼容性的问题</li></ul></li></ol><h2 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h2><h3 id="移动端浏览器"><a href="#移动端浏览器" class="headerlink" title="移动端浏览器"></a>移动端浏览器</h3><ul><li>移动端浏览器基本以webkit内核为主，因此我们主要考虑webkit兼容性问题</li><li>可以使用H5标签和css3样式</li><li>浏览器的私有前缀只需要考虑添加webkit即可</li></ul><h3 id="CSS初始化-normalize-css"><a href="#CSS初始化-normalize-css" class="headerlink" title="CSS初始化 normalize.css"></a>CSS初始化 normalize.css</h3><ul><li> normalize.css:保护了有价值的默认值</li><li> normalize.css：修复了浏览器的bug</li><li> normalize.css:是模块化的</li><li> normalize.css：拥有详细的文档</li></ul><blockquote><p>官网地址：<a href="http://necolas.github.io/normalize.css">normalize.css</a></p></blockquote><h3 id="CSS3-盒子模型box-sizing"><a href="#CSS3-盒子模型box-sizing" class="headerlink" title="CSS3 盒子模型box-sizing"></a>CSS3 盒子模型box-sizing</h3><ul><li><p>标准盒子模型</p><ul><li>设置内边距，边框会撑大盒子</li><li>我们所设置的宽度和高度是内容区的宽和高</li></ul></li><li><p>怪异盒子模型</p><ul><li>我们所设置的宽和高是盒子的实际占用空间的大小</li></ul></li><li><p>可以通过box-sizing进行转换</p><ul><li>可选值<ul><li><code>border-box</code> 转换为怪异盒子</li><li><code>content-box</code> 转换为标准盒子</li></ul></li></ul></li></ul><h3 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*    CSS3 盒子模型 */</span><span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span><span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 点击高亮 我们需要清除，设置为 transparent 完成透明*/</span><span class="token property">-webkit-tap-heighlight-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 在移动端浏览器默认的外观在ios上加上这个属性才能给按钮和输入框自定义样式*/</span><span class="token property">-webkit-appearance</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 禁用长按页面时的弹出菜单*/</span><span class="token selector">img,a </span><span class="token punctuation">{</span>    <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;移动端基础&quot;&gt;&lt;a href=&quot;#移动端基础&quot; class=&quot;headerlink&quot; title=&quot;移动端基础&quot;&gt;&lt;/a&gt;移动端基础&lt;/h1&gt;&lt;h2 id=&quot;浏览器现状&quot;&gt;&lt;a href=&quot;#浏览器现状&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="移动端" scheme="https://codehan045.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>弹性盒模型flex</title>
    <link href="https://codehan045.github.io/posts/807df34f.html"/>
    <id>https://codehan045.github.io/posts/807df34f.html</id>
    <published>2021-07-15T03:19:15.000Z</published>
    <updated>2021-07-21T09:29:53.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弹性盒，伸缩盒模型-：flex"><a href="#弹性盒，伸缩盒模型-：flex" class="headerlink" title="弹性盒，伸缩盒模型 ：flex"></a>弹性盒，伸缩盒模型 ：flex</h1><h2 id="传统布局"><a href="#传统布局" class="headerlink" title="传统布局"></a>传统布局</h2><ul><li><p>基于盒模型，依赖display+ float +position进行页面布局</p></li><li><p>这种布局兼容性好，但是布局比较繁琐。</p></li></ul><h4 id="不便："><a href="#不便：" class="headerlink" title="不便："></a>不便：</h4><ul><li>div同行显示设置float或是设置display：inline-block</li><li>清除浮动,高度塌陷</li><li>各种居中对齐</li><li>margin重叠</li></ul><blockquote><p>css3 提供了一套自适应布局模式——弹性布局，它替代或辅助传统布局。</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>弹性盒模型是一种当页面需要适应不同 的屏幕大小以及设备类型时确保元素拥有恰当行为的一种布局方式。</li><li>提供了一种更加有效的方式来控制一个容器里面的子元素进行排列、对齐、分配空白空间。对移动端友好。</li></ul><h2 id="弹性盒模型结构"><a href="#弹性盒模型结构" class="headerlink" title="弹性盒模型结构"></a>弹性盒模型结构</h2><p>弹性盒模型是由弹性容器和弹性项目构成。</p><ul><li>弹性容器：包含弹性项目的父元素<ul><li>特点：<ul><li>弹性容器里面的弹性项目同行显示，默认排列不下时，压缩显示</li><li>弹性容器只对自己的子元素有效</li><li>弹性容器对自己的兄弟元素没有影响</li><li>对于弹性容器来说，高度可以自适应，无需设置高度</li></ul></li></ul></li><li>弹性项目：弹性容器里面的每个子元素都是弹性项目。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210721104621.png" alt="image-20210721104621498"></p><ul><li>主轴：弹性项目一行显示的轴是主轴</li><li>侧轴：与主轴垂直方向上是侧轴</li></ul><h2 id="弹性盒"><a href="#弹性盒" class="headerlink" title="弹性盒"></a>弹性盒</h2><h3 id="弹性容器-父元素"><a href="#弹性容器-父元素" class="headerlink" title="弹性容器(父元素)"></a>弹性容器(父元素)</h3><ul><li><p>要使用弹性盒必须将一个元素设置为弹性容器</p></li><li><p>通过<code>display</code>来设置弹性容器</p><ul><li><code>display：flex;</code>设置块级弹性容器，会将盒子变为块级的弹性容器，对其他的兄弟标签来说，就是一个普通的块级标签，对其子元素来说，该盒子是他们弹性容器。</li><li><code>display：inline-flex;</code> 行内弹性容器，会将盒子变为行内块级的弹性容器，对其他的兄弟标签来说，就是一个普通的行内块级标签，对其子元素来说，该盒子是他们弹性容器。</li></ul></li></ul><h3 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h3><ul><li>弹性容器的子元素是弹性元素(弹性项)</li></ul><blockquote><p>一个元素可以同时是弹性容器和弹性元素</p></blockquote><h3 id="弹性容器的样式"><a href="#弹性容器的样式" class="headerlink" title="弹性容器的样式"></a>弹性容器的样式</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction "></a><code>flex-direction </code></h4><ul><li>  指定弹性容器中弹性元素的排列方式</li><li>可选值：<ul><li><code>row</code> 默认值：弹性元素在容器中水平排列（左——&gt;右）</li><li><code>row-reverse</code>  反向水平排列（右——&gt;左）</li><li><code>column</code> 弹性元素纵向排列（自上而下）</li><li><code>column-reverse</code> 反向纵向排列（自下而上）</li></ul></li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a><code>flex-wrap</code></h4><ul><li>设置弹性元素是否在弹性容器中换行<ul><li>可选值：<ul><li><code>nowrap</code>默认值元素不自动换行</li><li><code>wrap</code> 元素沿辅轴方向自动换行</li><li><code>wrap-reverse</code> 元素沿辅轴反方向换行</li></ul></li></ul></li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><code>flex-flow</code></h4><ul><li>wrap和direction简写属性，无顺序要求 </li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h4><ul><li><p>分配主轴上的空白空间（主轴上的元素如何排列）</p></li><li><p>可选值：</p><ul><li><code>flex-start</code> 元素沿主轴起边排列，空白分布在弹性项的后边</li><li><code>flex-end</code> 元素沿主轴终边排列，空白分布在弹性项的前边</li><li><code>center</code>所有元素在主轴水平居中</li><li><code>space-around</code> 空白分布到元素两侧,首尾是中间的一半</li><li><code>space-evenly</code> 任何两个<code>item</code>之间的间距(以及边缘的空间)是相等的（兼容性差）</li><li><code>space-between</code> 空白均匀分布到元素间</li></ul></li></ul><h4 id="align-items针对于-单行flex-item"><a href="#align-items针对于-单行flex-item" class="headerlink" title="align-items针对于 单行flex-item"></a><code>align-items</code>针对于 单行flex-item</h4><ul><li><p> 元素在辅轴上如何对齐</p></li><li><p>可选值：</p><ul><li><code>stretch</code> 默认值 将元素长度设置为相同值（同一行）注意：弹性项目没有高度，将弹性项目拉伸，占满弹性容器富裕空间</li><li><code>flex-start</code> 元素不会拉伸，沿辅轴起边对齐</li><li><code>flex-end </code>  元素不会拉伸，沿辅轴终边对齐</li><li><code>center</code>   元素不会拉伸，沿辅轴居中对齐</li><li><code>baseline </code> 沿基线对齐</li></ul></li></ul><h4 id="align-content针对于多行的flex-item"><a href="#align-content针对于多行的flex-item" class="headerlink" title="align-content针对于多行的flex-item"></a><code>align-content</code>针对于多行的flex-item</h4><ul><li><code>align-content</code> 辅轴空白空间的分布与<code>justify-content</code>用法相同</li></ul><h3 id="弹性元素样式"><a href="#弹性元素样式" class="headerlink" title="弹性元素样式"></a>弹性元素样式</h3><h4 id="对单个弹性元素进行设置"><a href="#对单个弹性元素进行设置" class="headerlink" title="对单个弹性元素进行设置"></a>对单个弹性元素进行设置</h4><ul><li><code>align-self</code>用来覆盖当前弹性元素上的<code>align-item</code>  用法与<code>align-item</code>相同</li></ul><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h4><ul><li><p>元素的基础长度，指的是元素在主轴上的基础长度</p></li><li><p>主轴是横向 指元素的宽度</p></li><li><p>主轴是纵向，指元素的高度</p></li><li><p>默认值：<code>auto </code>表示参考元素自身的高度和宽度</p><ul><li>若传递了一个具体数值，则以该值为准</li></ul></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">flex-basis</span><span class="token punctuation">:</span>宽度；</code></pre><blockquote><p>注意：宽度优先级：flex-basis &gt; width &gt;由内容撑开</p></blockquote></li></ul><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h4><ul><li><p>指定弹性元素的伸展系数，按比例分,设置弹性项目的弹性因子</p></li><li><p>原理：弹性容器会将多余的空间（富裕空间）按照设置的弹性因子分成等量的几份，分别让弹性项目进行消化，弹性因子大的弹性项目得到的多余的空间越多</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">flex-grow</span><span class="token punctuation">:</span>数字；</code></pre><ul><li>默认值为 0</li></ul></li><li><p>弹性空间的计算公式</p><blockquote><p>弹性项目的弹性空间 = 富裕空间 / 弹性因子总数 * 弹性因子<br>弹性项目的大小= 弹性空间+弹性项目原来的大小</p></blockquote></li></ul><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink "></a><code>flex-shrink </code></h4><ul><li><p>指定弹性元素的收缩系数,当前容器宽度不够时,弹性项目的收缩因子</p></li><li><p>原理：当弹性容器的宽度容不下当前该行的弹性项目时，就会依赖<code>felx-shrink</code>来压缩弹性项目，达到不换行的目的。flex-shirink会将压缩空间分为等量的，通过减少弹性项目的尺寸</p></li><li><p>缩减多少是根据缩减系数和元素大小来计算的</p></li><li><p>语法</p><pre class=" language-css"><code class="language-css"><span class="token property">flex-shrink</span><span class="token punctuation">:</span>数字；</code></pre><ul><li>默认值为1，设置为0时，相当于不压缩</li></ul></li><li><p>压缩公式</p><blockquote><p>弹性项目压缩空间 = （弹性项目的总宽度 - 弹性容器的宽度）/ 压缩因子的总数   *  压缩因子<br>弹性项目的大小 =  弹性项目压缩前的宽度  -  压缩空间  </p></blockquote></li></ul><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h4><ul><li><p>可设置弹性元素的所有三个样式</p></li><li><p>语法: flex 增长（伸展） 缩减（收缩） 基础长度</p><pre class=" language-css"><code class="language-css"><span class="token property">flex</span><span class="token punctuation">:</span>flex-grow   flex-shrink   flex-basis<span class="token punctuation">;</span></code></pre></li><li><p>initial–(flex:0 1 auto)  默认值</p></li><li><p>auto  –(flex:1 1 auto)</p></li><li><p>none  –(flex:0 0 auto) 无弹性</p></li></ul><h4 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h4><ul><li><p>决定弹性元素的排列顺序</p></li><li><p>数值越小越靠前 默认为 0,相同数学按照代码结构顺序显示</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">order</span><span class="token punctuation">:</span>数字；</code></pre></li><li><p>应用场景</p><ul><li>鼠标点击拖拽某个元素排在最后</li></ul></li></ul><h2 id="富裕空间"><a href="#富裕空间" class="headerlink" title="富裕空间"></a>富裕空间</h2><ul><li>概念：在弹性容器中，除弹性项目之外的剩余的空间就是富裕空间，主要分为主轴的富裕空间和侧轴的 富裕空间</li></ul><h2 id="弹性空间"><a href="#弹性空间" class="headerlink" title="弹性空间"></a>弹性空间</h2><ul><li>概念：弹性空间是指弹性项目消化的富裕空间，将富裕空间变成弹性项目的一部分</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;弹性盒，伸缩盒模型-：flex&quot;&gt;&lt;a href=&quot;#弹性盒，伸缩盒模型-：flex&quot; class=&quot;headerlink&quot; title=&quot;弹性盒，伸缩盒模型 ：flex&quot;&gt;&lt;/a&gt;弹性盒，伸缩盒模型 ：flex&lt;/h1&gt;&lt;h2 id=&quot;传统布局&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="layout" scheme="https://codehan045.github.io/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>CSS过渡、动画、关键帧</title>
    <link href="https://codehan045.github.io/posts/293f1d94.html"/>
    <id>https://codehan045.github.io/posts/293f1d94.html</id>
    <published>2021-07-14T06:10:24.000Z</published>
    <updated>2021-07-26T04:05:56.701Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h2 id="CSS3-过渡（transition"><a href="#CSS3-过渡（transition" class="headerlink" title="CSS3 过渡（transition)"></a>CSS3 过渡（transition)</h2><ul><li>概念 ：通过过渡可以指定某个属性发生变化时的切换方式</li></ul><blockquote><p>注：过渡时，必须是从一个有效值向另外一个有效值进行过渡,谁需要过渡给谁加</p></blockquote><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><p><code>transition-property</code>：指定要执行过渡的属性（多个属性之间用 , 隔开）, 若所有属性都需要过渡则使用all</p></li><li><p><code>transition-duration</code> 指定效果的持续时间  时间单位 s 和 ms  1s=1000ms</p></li><li><p><code>transition-timing-function</code>:过渡的时序函数 指定过渡的执行方式</p><ul><li>可选值：<ul><li><code>ease</code> 默认值 慢速开始，先加速再减速</li><li><code>linear</code> 匀速运动</li><li><code>ease-in</code> 加速运动</li><li><code>ease-out</code> 减速运动</li><li><code>cubic-bezier()</code> 来指定时序函数</li><li><code>steps()</code> 分步执行过渡效果<ul><li> <code>steps(2,end)</code> 结束时执行过渡（默认值）</li><li> <code>steps(2,start)</code> 开始时执行过渡</li></ul></li></ul></li></ul></li><li><p><code>transition-delay</code> ：过渡的效果延迟，等待一段时间后再执行过渡</p><blockquote><p>注：仅仅设置过渡的属性名没有用，需要配合过渡的执行时长一起使用</p><ul><li>多个属性名和多个执行时间一一对应</li><li>当属性名多余执行时长个数时，执行时长重复，一一对应</li></ul></blockquote></li></ul><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><pre class=" language-css"><code class="language-css"><span class="token function">cubic-bezier</span><span class="token punctuation">(</span>x<span class="token number">1</span>,y<span class="token number">1</span>,x<span class="token number">2</span>,y<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>这个坐标，决定了速度曲线的形状，不同的形状所对应的速度不一样，甚至可以为负</li><li>贝塞尔网址：<a href="https://cubic-bezier.com/#.35,.74,.84,.21">https://cubic-bezier.com/#.35,.74,.84,.21</a></li><li>直接点击：<a href="https://cubic-bezier.com/#.35,.74,.84,.21">贝塞尔曲线</a></li></ul><h3 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h3><ul><li><code>transition</code>:可以同时设置过渡的相关的所有属性，多个属性过渡用逗号隔开</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">transition</span> <span class="token punctuation">:</span> 要过渡的属性 花费时间 运动曲线 何时开始 <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 多个属性同时执行,中间使用逗号隔开 */</span><span class="token property">transtion</span><span class="token punctuation">:</span> 属性名  执行时长   延迟时长  速率，属性名  执行时长   延迟时长  速率；</code></pre><blockquote><p>只有一个要求，若要写延迟，则两个时间中第一个是持续时间，第二个是延迟时间    </p><p>注意：并不是所有属性都可以设置过渡，比如display</p></blockquote><h2 id="CSS3动画（animation"><a href="#CSS3动画（animation" class="headerlink" title="CSS3动画（animation)"></a>CSS3动画（animation)</h2><h3 id="完成自动播放的动画"><a href="#完成自动播放的动画" class="headerlink" title="完成自动播放的动画"></a>完成自动播放的动画</h3><ol><li>编写JavaScript脚本完成自动播放</li><li>可以使用flash技术来完成动画的设计</li><li>可以借助某些动画的标签，比如marquee</li><li>h5提供了canvas技术（绘图技术）完成动画的设计</li><li>css3提供了animation动画可以完成持续自动播放</li></ol><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><ol><li>定义动画关键帧<ul><li>指盒子将要发生变化的帧，就是设置需要播放的动画的步骤，一个完整的动画被拆分为多个步骤，将多个步骤组合起来形成的动画，每个步骤就是一个关键帧</li><li>例子：盒子向右移动100px，有两个关键帧，开始状态和结束状态</li><li>例子：盒子变成圆后，向右移动100px，有3个关键帧： 开始状态——变圆——右移100px</li><li>css3 动画：定义关键帧</li></ul></li><li><code>animation</code>使用动画关键帧</li></ol><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>与过渡类似，都是可以实现一些动态效果</p></li><li><p>设置动画效果，必须先设置一个关键帧，设置了动画执行的每一个步骤</p></li><li><p>语法</p><pre class=" language-css"><code class="language-css">方式一<span class="token atrule"><span class="token rule">@keyframes</span>  动画名</span><span class="token punctuation">{</span>  <span class="token selector">from</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*动画开始的位置 */</span>     <span class="token property">margin-left</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token selector">to</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*动画结束的位置  */</span>     <span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">700</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>方式二<span class="token comment" spellcheck="true">/*   百分比为时间占比    */</span><span class="token atrule"><span class="token rule">@keyframes</span>  动画名</span><span class="token punctuation">{</span>  <span class="token selector">0%</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*动画开始的位置 */</span>     <span class="token property">margin-left</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">margin-left</span> <span class="token punctuation">:</span> <span class="token number">400</span>px <span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token selector">100%</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*动画结束的位置  */</span>     <span class="token property">margin-left</span> <span class="token punctuation">:</span> <span class="token number">700</span>px <span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h3><ul><li><p><code>animation-name:ident;</code>  ident 为对当前元素生效的关键帧的名字</p></li><li><p><code>animation-duration:2s;</code>动画执行的时间</p></li><li><p><code>animation-delay：2s;</code> 动画的延时</p></li><li><p><code>animation-timing-function</code>：贝塞尔曲线</p><ul><li><code>ease</code> 默认值 慢速开始，先加速再减速</li><li><code>linear</code> 匀速运动</li><li><code>ease-in</code> 加速运动，低速开始</li><li><code>ease-out</code> 减速运动，低速结束</li><li><code>cubic-bezier(x1,y1,x2,y2)</code> 来指定时序函数,贝塞尔曲线</li><li><code>steps()</code> 分步执行过渡效果<ul><li> <code>steps(2,end)</code> 结束时执行过渡（默认值）</li><li> <code>steps(2,start)</code> 开始时执行过渡</li></ul></li></ul></li><li><p><code>animation-interation-count: </code>动画执行的次数</p><ul><li>可选值：<ul><li>次数,数字</li><li><code>infinite </code>无限执行</li></ul></li></ul></li><li><p><code>animation-direction</code>：指定动画运行方向</p><ul><li>可选值：<ul><li><code> normal</code>默认值 从from-to 运行，每次都如此</li><li><code>reverse</code> 从to- from 运行，每次都这样</li><li><code> alternate</code> 从from向to 运行（奇数次），重复时，反向执行(偶数次)</li><li><code> alternate-reverse</code> 从to-from 重复时反向执行</li></ul></li></ul></li><li><p><code>animation-play-state</code>： 设置动画执行的状态</p><ul><li>可选值：<ul><li><code> running</code> 默认值 动画执行</li><li><code>paused</code>  动画暂停</li></ul></li></ul></li><li><p><code>animation-fill-mode</code>：动画填充模式（设置第一帧和最后一帧是否作用在元素上）</p><ul><li>可选值：<ul><li><code>none </code>默认值 动画执行完元素回到原来的位置</li><li><code>forwards</code>动画执行完，元素会停到结束的位置</li><li><code>backwards</code> 动画延时等待时，元素会处于开始位置</li><li><code> both</code> 结合了forwards和backwards</li></ul></li></ul></li><li><p><code>animation</code>：简写属性；延时在执行时间之后</p><pre class=" language-css"><code class="language-css"> animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反向 是否返回起始点<span class="token punctuation">;</span>   </code></pre><blockquote><p>只有一个要求，若要写延迟，则两个时间中第一个是持续时间，第二个是延迟时间    </p></blockquote></li></ul><h2 id="关键帧2d-3d"><a href="#关键帧2d-3d" class="headerlink" title="关键帧2d-3d"></a>关键帧2d-3d</h2><h3 id="3d转换基础"><a href="#3d转换基础" class="headerlink" title="3d转换基础"></a>3d转换基础</h3><h4 id="三维坐标系"><a href="#三维坐标系" class="headerlink" title="三维坐标系"></a>三维坐标系</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/%E5%9D%90%E6%A0%87.png"></p><p><img src="https://cdn.jsdelivr.net/gh/codehan0417/imags/img/20210723102919.png" alt="image-20210723102919886"></p><h3 id="变形平移："><a href="#变形平移：" class="headerlink" title="变形平移："></a>变形平移：</h3><ul><li><p>变形：指通过css来改变元素的形状或位置</p></li><li><p>变形不会影响页面布局</p></li><li><p><code>transform</code>：用来设置元素的变形效果</p></li></ul><h4 id="平移："><a href="#平移：" class="headerlink" title="平移："></a>平移：</h4><ul><li><p> <code>translateX() </code>沿X轴平移</p></li><li><p><code>translateY()</code> 沿Y轴平移</p></li><li><p><code>translateZ()</code> 沿Z轴平移 调整元素在Z轴的位置，属于立体效果（近大远小）默认网页不支持透视，若需要看见，则必须设置网页视距（景深）</p><pre class=" language-css"><code class="language-css">  <span class="token selector">html</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*  设置当前网页的视距为800px 人眼距网页的距离  */</span>    <span class="token property">perspective</span><span class="token punctuation">:</span><span class="token number">800</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><blockquote><p>盒子以原来的位置作为参考点，进行平移</p></blockquote><h4 id="旋转：-坐标轴会改变"><a href="#旋转：-坐标轴会改变" class="headerlink" title="旋转： 坐标轴会改变"></a>旋转： 坐标轴会改变</h4><ul><li><p>通过旋转可以使元素沿x,y,z轴旋转指定角度</p></li><li><p><code>rotateX(deg)</code>  围绕 x 轴旋转 </p></li><li><p><code>rotateY(deg)</code>  围绕 y 轴旋转</p></li><li><p><code>rotateZ(deg) </code>  围绕 z 轴旋转</p></li><li><p><code>rotate3d(x,y,z,deg)</code> x,y,z是三维坐标系中的一个点，该旋转轴是（0,0,0)与(x,y,z) 连接线</p></li><li><p> <code>backface-visibility</code> 是否显示元素背面</p></li><li><p><code>hidden </code>隐藏</p></li><li><p><code>visible</code> 显示</p></li></ul><h4 id="缩放："><a href="#缩放：" class="headerlink" title="缩放："></a>缩放：</h4><ul><li><p>对元素进行放大缩小</p><ul><li><p><code>scale()</code> 双方向对元素进行缩放的函数</p></li><li><p><code>scaleX()</code> 水平方向缩放</p></li><li><p><code>scaleY()</code> 垂直方向缩放</p></li><li><p><code>scaleZ()</code> z轴方向缩放 厚度</p></li></ul><blockquote><p><code>transform-origin</code>：变形原点 默认值 center center center</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token property">transform-origin</span><span class="token punctuation">:</span>x,y,z<span class="token punctuation">;</span></code></pre><blockquote><p>设置3d变形效果,设置某元素的子元素以何种形式在父元素的空间里</p></blockquote><ul><li><code>transform-style</code>:preserve-3d;  <ul><li>默认值为 flat 不显示3d效果 ，在2d平面显示</li><li><code>preserve-3d</code> 所有元素在3d空间中呈现</li></ul></li></ul></li></ul><blockquote><p>值大于1放大，值为0  消失  值为0-1  缩小</p></blockquote><h3 id="灭点"><a href="#灭点" class="headerlink" title="灭点"></a>灭点</h3><ul><li><p>灭点：是指在动画里视线的消失点</p></li><li><p>perspective-origin可以设置灭点，设置3d盒子的观察位置</p></li><li><p>作用：以不同的角度查看3D盒子</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">perspective-origien</span><span class="token punctuation">:</span>x轴 y轴；</code></pre><ul><li>取值：<ul><li>单词：left right  center top bottom 两两搭配使用</li><li>像素</li><li>百分比</li></ul></li><li>默认值：center center，从舞台的正中心点观察盒子，看元素默认时对称</li></ul></li><li><p>注意：</p><ul><li>这个属性设置最大的盒子使用（设置景深的盒子）</li><li>一个3D舞台（设置了景深就创建了一个3D舞台）就有一个灭点。默认灭点是在舞台的中心点，观察者正对着舞台看元素</li></ul></li></ul><h3 id="倾斜（斜切）"><a href="#倾斜（斜切）" class="headerlink" title="倾斜（斜切）"></a>倾斜（斜切）</h3><ul><li><p>可以让元素沿着x轴或y轴进行倾斜转换，skew来控制</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css">沿着x轴和y轴进行倾斜<span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">skew</span><span class="token punctuation">(</span>角度<span class="token number">1</span>，角度<span class="token number">2</span><span class="token punctuation">)</span>；沿着x轴倾斜<span class="token property">transfrom</span><span class="token punctuation">:</span><span class="token function">skew</span><span class="token punctuation">(</span>角度<span class="token punctuation">)</span>；<span class="token property">transfrom</span><span class="token punctuation">:</span><span class="token function">skewX</span><span class="token punctuation">(</span>角度<span class="token punctuation">)</span>；沿着y轴倾斜<span class="token property">transfrom</span><span class="token punctuation">:</span><span class="token function">skewY</span><span class="token punctuation">(</span>角度<span class="token punctuation">)</span>；</code></pre><ul><li>skewX：沿着x轴进行倾斜，角度越大，越接近于x轴，当角度为90度时，元素会和x轴平行，消失不见</li><li>skewY：沿着Y轴进行倾斜，角度越大，越接近于Y轴，当角度为90度时，元素会和Y轴平行，消失不见</li></ul></li></ul><h3 id="转换基点"><a href="#转换基点" class="headerlink" title="转换基点"></a>转换基点</h3><ul><li><p>基点：进行2D转换的参考点，可以通过<code>transfrom-origin</code>改变转换的参考点的位置</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">transfrom-origin</span><span class="token punctuation">:</span>x   y；x代表在x轴上的位置，y代表在y轴上位置</code></pre><ul><li>单词：left  right  center  top  bottom  两两搭配使用</li><li>像素</li><li>百分比 </li><li>默认值为盒子的中心点，center center  或 50%    50%</li></ul></li><li><p>注意：</p><ul><li>针对旋转和缩放来说，因为转换和中心点有关，所以改变转换基点是会受影响</li><li>针对位移来说，位移是参考原来的位置进行移动，跟转换基点无关，所以不会受影响</li><li>设置转换基点时，在元素改变前的样式设置转换基点，因为默认元素的转换基点是中心点，如果在改变样式时进行设置，那么转换基点会从中心点变为指定的点，样式会发生错乱</li></ul></li></ul><h3 id="组合变换"><a href="#组合变换" class="headerlink" title="组合变换"></a>组合变换</h3><ul><li><p>在进行2D转换时，会将多个2D转换组合起来使用，中间使用空格隔开</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span> <span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ；<span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>x,y,z<span class="token punctuation">)</span></code></pre></li></ul><ol><li>空格隔开</li><li>属性值的顺序影响效果</li><li>位移要放在前面</li><li>旋转会改变坐标轴的方向</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h2 id=&quot;CSS3-过渡（transition&quot;&gt;&lt;a href=&quot;#CSS3-过渡（transition&quot; class=&quot;headerlink&quot; title=&quot;CSS3 过渡（transition)&quot;&gt;&lt;/a&gt;CSS3 过渡（transition)&lt;/h</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="css3" scheme="https://codehan045.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>layout-定位</title>
    <link href="https://codehan045.github.io/posts/86e78a75.html"/>
    <id>https://codehan045.github.io/posts/86e78a75.html</id>
    <published>2021-07-12T02:46:42.000Z</published>
    <updated>2021-07-17T01:15:46.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位（position）"><a href="#定位（position）" class="headerlink" title="定位（position）"></a>定位（position）</h1><h2 id="元素按照指定位置移动"><a href="#元素按照指定位置移动" class="headerlink" title="元素按照指定位置移动"></a>元素按照指定位置移动</h2><h3 id="margin负值"><a href="#margin负值" class="headerlink" title="margin负值"></a>margin负值</h3><ul><li>破坏文档流进行移动</li><li>应用：内容区域和前面模块重叠</li></ul><h4 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h4><ul><li>在页面布局过程中，元素从上到下，从左到右，块级元素独占一行，行级元素共享一行的排列规范</li></ul><h4 id="脱离文档流："><a href="#脱离文档流：" class="headerlink" title="脱离文档流："></a>脱离文档流：</h4><ul><li>在页面布局过程中，元素不再遵循标准文档流的规范，有自己的排列规范</li></ul><h4 id="破坏文档流"><a href="#破坏文档流" class="headerlink" title="破坏文档流"></a>破坏文档流</h4><ul><li>在页面布局过程中，元素在移动过程中不遵循标准文档流的规范，移动完成之后仍然在标准文档流中，只是在移动过程中破坏标准文档流的规则。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>定位是一种更加高级的布局手段</p></li><li><p>通过定位可将元素摆放到页面的任意位置</p></li><li><p>使用position属性来设置定位</p><ul><li><p>可选值：</p><ul><li><p><code>static</code>：默认值，元素是静止的没有开启定位 静态定位</p></li><li><p><code>relative</code>： 开启元素的相对定位</p></li><li><p><code>absolute</code>：开启元素的绝对定位</p></li><li><p><code>fixed</code>：开启元素的固定定位</p></li><li><p><code>sticky</code>: 开启元素的粘滞定位</p></li></ul></li></ul></li></ul><h2 id="相对定位："><a href="#相对定位：" class="headerlink" title="相对定位："></a>相对定位：</h2><ul><li><p>元素开启相对定位后，如果不设置偏移量，元素不会发生任何变化</p></li><li><p>偏移量（offset）：用来设置元素位置</p><ul><li><p><code>top</code> -定位元素和定位位置上边的距离</p></li><li><p><code>bottom</code> -定位元素和定位位置下边的距离</p></li><li><p><code>left</code> -定位元素和定位位置左边的距离</p></li><li><p><code>right</code> -定位元素和定位位置右边的距离</p></li></ul></li><li><p>.相对位置是参照文档流中的位置进行定位的，参考的原来的位置进行移动</p></li><li><p>相对定位会提升元素的层级</p></li><li><p>相对定位不会使元素脱离文档流</p></li><li><p>相对定位不会改变元素的性质，块元素还是块元素，行内元素还是行内元素</p></li><li><p>如果相对定位元素原来的位置发生改变，相对定位随着移动，参考的原来的位置进行移动</p></li></ul><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul><li><p>开启绝对定位后，若不设置偏移量，元素的位置不会发生变化</p></li><li><p>开启绝对定位后，元素会从文档流中脱离</p></li><li><p>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</p></li><li><p>绝对定位会使元素提升一个层级，后面的元素会盖住前面的元素（开启绝对定位的元素）</p></li><li><p>绝对定位元素是相对于包含块</p></li></ul><blockquote><p>绝对定位的包含块：离它最近的开启了定位的祖先元素</p><p>包含块（containing block）：离当前元素最近的祖先块元素</p></blockquote><p><strong>如果所有的祖先元素都没有开启定位，则相对于整个文档/视口进行定位</strong></p><h3 id="绝对定位元素的布局："><a href="#绝对定位元素的布局：" class="headerlink" title="绝对定位元素的布局："></a>绝对定位元素的布局：</h3><h4 id="水平布局："><a href="#水平布局：" class="headerlink" title="水平布局："></a>水平布局：</h4><ul><li><p>left+margin-left+border-left+padding-left+width+padding-right+border-right+margin-right+right=包含块的内容宽度</p></li><li><p>当开启了绝对定位后：</p><ul><li>水平方向的布局等式就需添加left 和 right 两个值</li><li>此时规则和之前一样只是多添加了两个值</li></ul></li></ul><blockquote><p>当发生过度约束，若九个值中无auto 则自动调整right的值，以使等式满足</p><p>如果有auto，则自动调整auto 的值以使等式满足</p></blockquote><ul><li>可设置auto的值： margin width left right </li></ul><h4 id="垂直方向布局"><a href="#垂直方向布局" class="headerlink" title="垂直方向布局"></a>垂直方向布局</h4><ul><li>垂直布局等式也必须要满足：<ul><li>top+margin-top+border-top+padding-top+height+padding-bottom+border-bottom+margin-bottom+bottom=包含块的内容高度</li></ul></li></ul><h4 id="盒子垂直水平居中布局技巧"><a href="#盒子垂直水平居中布局技巧" class="headerlink" title="盒子垂直水平居中布局技巧"></a>盒子垂直水平居中布局技巧</h4><ul><li> 由于left 和 right ，top 和 bottom 的默认值是auto，所以如果不知道这四个值，则等式不满足时，自动调整这四个值 </li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置定位父级 */</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 确定绝对定位元素的可移动的位置 */</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><ul><li><p>通过calc函数进行计算，大盒子必须为正方形（宽度和高度相同）</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 通过calc函数进行运算,在大盒子是正方形 */</span>            <span class="token comment" spellcheck="true">/* margin-top设置50%-小盒子高度的一半 */</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span> <span class="token number">50%</span> - <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* margin-left设置50%-小盒子宽度的一半 */</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">50%</span> - <span class="token number">50</span>px <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p>方式三   利用定位和margin</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>           <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p>方式四</p><pre class=" language-css"><code class="language-css">     <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">24</span>, <span class="token number">177</span>, <span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span> ,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>方式五</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000000</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* 水平空白分配 */</span>         <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>              <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><ul><li>将元素position 设置为 fixed</li><li>也是一种绝对定位，大部分特点与绝对定位一样</li><li>唯一不同的是：固定定位永远参考于浏览器的视口进行定位</li><li>固定定位元素不会随网页的滚动条滚动的</li><li>应用场景：小广告、头部导航固定、侧边栏导航固定等等</li></ul><h2 id="粘滞定位：兼容性差"><a href="#粘滞定位：兼容性差" class="headerlink" title="粘滞定位：兼容性差"></a>粘滞定位：兼容性差</h2><ul><li><p>将position设置为 sticky</p></li><li><p>和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时将其固定 </p></li></ul><h2 id="元素的层级（z-index"><a href="#元素的层级（z-index" class="headerlink" title="元素的层级（z-index)"></a>元素的层级（z-index)</h2><ul><li>对于开启相对定位，绝对定位，固定定位，粘滞定位的定位元素，可以通过z-index属性来指定元素的层级</li><li>z-index 需要一个整数作为参数，值越大元素的层级越高，元素的层级越高，越优先显示</li><li>z-index:默认值 auto,相当于 0 </li></ul><blockquote><p>如果元素层级一样，则优先显示靠下的元素</p><p>祖先元素的层级再高，也不会盖住后代元素</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定位（position）&quot;&gt;&lt;a href=&quot;#定位（position）&quot; class=&quot;headerlink&quot; title=&quot;定位（position）&quot;&gt;&lt;/a&gt;定位（position）&lt;/h1&gt;&lt;h2 id=&quot;元素按照指定位置移动&quot;&gt;&lt;a href=&quot;#元素按</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="layout" scheme="https://codehan045.github.io/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>CSS文本样式及字体</title>
    <link href="https://codehan045.github.io/posts/9894b5b2.html"/>
    <id>https://codehan045.github.io/posts/9894b5b2.html</id>
    <published>2021-07-10T12:36:18.000Z</published>
    <updated>2021-07-15T10:00:01.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><h3 id="text-align-文本的水平对齐"><a href="#text-align-文本的水平对齐" class="headerlink" title="text-align 文本的水平对齐"></a>text-align 文本的水平对齐</h3><ul><li><p>可选值： </p><ul><li><p><code>left</code>：左侧对齐</p></li><li><p><code>right</code>：右侧对齐</p></li><li><p><code>center</code>：居中对齐</p></li><li><p><code>justify</code>：两端对齐</p></li></ul></li></ul><h3 id="vertical-align-设置元素垂直对齐的方式"><a href="#vertical-align-设置元素垂直对齐的方式" class="headerlink" title="vertical-align 设置元素垂直对齐的方式"></a>vertical-align 设置元素垂直对齐的方式</h3><ul><li><p>可选值：</p><ul><li><p><code>baseline</code> 默认值 基线对齐</p></li><li><p><code> top</code>：顶部对齐</p></li><li><p><code> bottom</code>：底部对齐</p></li><li><p><code> middle</code>：居中对齐</p></li></ul></li><li><p>**注:**只针对于行内元素和行内块元素</p></li></ul><h3 id="text-decoration-设置文本修饰"><a href="#text-decoration-设置文本修饰" class="headerlink" title="text-decoration 设置文本修饰"></a>text-decoration 设置文本修饰</h3><ul><li><p>可选值： </p><ul><li><p><code>none</code>：默认值，什么都没有</p></li><li><p><code>underline</code> ：下划线</p></li><li><p><code>·overline</code>：上划线</p></li><li><p><code>line-through</code> 删除线</p></li></ul></li><li><p>可以为修饰设置样式</p><ul><li><code>text-decoration：underline red doteed;</code> <strong>注：ie不支持</strong></li></ul></li></ul><h3 id="white-space-设置网页如何处理空白"><a href="#white-space-设置网页如何处理空白" class="headerlink" title="white-space 设置网页如何处理空白"></a>white-space 设置网页如何处理空白</h3><ul><li><p>可选值： </p><ul><li><p><code>normal</code>  正常</p></li><li><p><code>nowrap</code>  不换行</p></li><li><p><code>pre</code>  保留空白/原格式</p></li></ul></li></ul><h3 id="text-shadow-用来设置文本阴影"><a href="#text-shadow-用来设置文本阴影" class="headerlink" title="text-shadow:用来设置文本阴影"></a>text-shadow:用来设置文本阴影</h3><ul><li><code>text-shadow: h-shadow v-shadow blur color;</code><ul><li><code>h-shadow</code>:必需，水平阴影的位置，允许负值</li><li><code>v-shadow</code>:必需，垂直阴影的位置，允许负值</li><li><code>blur</code> ：可选，模糊距离</li><li><code>color</code> ： 可选，阴影颜色</li></ul></li></ul><h3 id="text-indent-文本缩进"><a href="#text-indent-文本缩进" class="headerlink" title="text-indent:文本缩进"></a>text-indent:文本缩进</h3><ul><li><strong>注：</strong>允许使用负值。如果使用负值，那么首行会被缩进到左边。</li><li>可选值：<ul><li>定义固定的缩进值，默认为 0</li><li>百分比，基于父元素宽度的百分比</li></ul></li></ul><h3 id="letter-spacing-字符间距"><a href="#letter-spacing-字符间距" class="headerlink" title="letter-spacing: 字符间距"></a>letter-spacing: 字符间距</h3><ul><li>每一个汉字，和每一个字母都是一个字符</li></ul><h3 id="word-spacing-字间距（字以空格为分隔符）"><a href="#word-spacing-字间距（字以空格为分隔符）" class="headerlink" title="word-spacing: 字间距（字以空格为分隔符）"></a>word-spacing: 字间距（字以空格为分隔符）</h3><h3 id="text-transform-大小写转换"><a href="#text-transform-大小写转换" class="headerlink" title="text-transform: 大小写转换"></a>text-transform: 大小写转换</h3><h3 id="行高（line-height）：指定文字占有的实际高度"><a href="#行高（line-height）：指定文字占有的实际高度" class="headerlink" title="行高（line-height）：指定文字占有的实际高度"></a>行高（line-height）：指定文字占有的实际高度</h3><ul><li><p> 可以用line-height来设置行高</p></li><li><p>行高可以直接指定一个大小（px,em) 也可直接为行高设置一个整数</p></li><li><p>如果是一个整数的话，行高将会是字体的指定倍数</p></li><li><p>字体框</p><ul><li>定义：就是字体存在的格子，设置font-size实际上就是设置字体框的高度</li><li>行高会在字体框的上下平均分配</li></ul></li><li><p>应用     </p><ul><li>可以将行高设置为高度一样的值，使单行的文字在一个元素中垂直居中</li><li>行高经常还用来设置文字的行间距</li></ul></li><li><p>行间距=行 减 字体大小</p></li></ul><h2 id="设置文本省略号"><a href="#设置文本省略号" class="headerlink" title="设置文本省略号"></a>设置文本省略号</h2><pre class=" language-css"><code class="language-css"><span class="token selector">方式一 (可能存在兼容问题)<span class="token class">.box2</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*不换行*/</span> <span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 裁剪掉溢出的文本*/</span> <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 文本裁剪，显示。。。*/</span> <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">方式二<span class="token class">.content</span> <span class="token class">.container</span> <span class="token class">.item</span> h3</span><span class="token punctuation">{</span>   width：<span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 多余文本使用...代替 */</span>    <span class="token comment" spellcheck="true">/* 溢出隐藏 */</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置盒子类型 伸缩盒子 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置显示几行 */</span>    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置里面的元素的对齐方式 */</span>    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><h3 id="color：用来设置字体的颜色"><a href="#color：用来设置字体的颜色" class="headerlink" title="color：用来设置字体的颜色"></a>color：用来设置字体的颜色</h3><h3 id="font-size：字体大小"><a href="#font-size：字体大小" class="headerlink" title="font-size：字体大小"></a>font-size：字体大小</h3><ul><li><p>相关单位：</p><ul><li><p>rem相当于根元素的一个font-size</p></li><li><p>em相当于当前元素的一个font-size</p></li><li><p> 像素</p></li></ul></li></ul><h3 id="font-family：字体族-字体样式"><a href="#font-family：字体族-字体样式" class="headerlink" title="font-family：字体族(字体样式)"></a>font-family：字体族(字体样式)</h3><ul><li><p>可选值：</p><ul><li><p><code>serif</code> 衬线字体</p></li><li><p><code>sans-serif </code>非衬线字体</p></li><li><p><code> monospace</code> 等宽字体  </p></li><li><p>指定字体类别，浏览器会自动使用该类别下的字体  </p></li></ul></li><li><p><code>font-family:"courier New","courier",monospace;</code></p></li></ul><p>​    **注：字体生效时优先使用第一个，第一个无法使用则使用第二个，以此类推 **</p><ul><li>多种字体使用逗号隔开</li><li>字体名中有中文或多个英文单词时需要使用引号包裹，单双引号均可</li></ul><h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h3><ul><li>可以将服务器中的字体直接提供给用户使用</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 引入字体文件*/</span><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">' 字体名称 '</span> <span class="token punctuation">;</span><span class="token property">src</span><span class="token punctuation">:</span><span class="token url">url("服务器中的字体路径")</span> ,<span class="token url">url("服务器中的字体路径")</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">p </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*  使用字体文件*/</span>    <span class="token property">font-family</span><span class="token punctuation">:</span>  字体名称   <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>一种类型字体文件需要使用一个<code>@font-face</code></li><li>字体文件可以引入多种格式，为了保证不同浏览器的兼容性问题，中间使用逗号隔开</li><li>字体文件格式不能直接更改后缀名，借助第三方工具转换</li><li>字体文件需要放在项目文件中</li></ul><h3 id="字体风格"><a href="#字体风格" class="headerlink" title="字体风格"></a>字体风格</h3><h4 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a><code>font-style</code></h4><ul><li><p>可选值：</p><ul><li><code>normal</code> 默认值，正常的</li><li><code>italic</code> 斜体</li><li><code>oblique</code>：倾斜</li></ul></li></ul><h4 id="font-weight："><a href="#font-weight：" class="headerlink" title="font-weight："></a><code>font-weight</code>：</h4><ul><li>可选值： <ul><li>数值100-900   无单位</li><li><code>normal </code>不加粗 默认值</li><li><code> bold</code> 加粗</li><li><code>bolder</code>更加粗</li><li><code>lighter</code> 比正常字体更细</li></ul></li></ul><h3 id="字体的简写属性："><a href="#字体的简写属性：" class="headerlink" title="字体的简写属性："></a>字体的简写属性：</h3><ul><li><code>font</code> 可以设置字体相关的所有属性<ul><li>语法：字体大小/行高 字体族</li></ul></li></ul><h2 id="图标字体（iconfont）"><a href="#图标字体（iconfont）" class="headerlink" title="图标字体（iconfont）"></a>图标字体（iconfont）</h2><ul><li>在网页中经常需要使用一些图标，可通过图片来引入图标， 但图片大小本身比较大，并且非常不灵活</li></ul><ul><li>将图标直接设置为字体，通过font-face的形式进行引入</li></ul><h3 id="font-awesome图标字体"><a href="#font-awesome图标字体" class="headerlink" title="font awesome图标字体"></a>font awesome图标字体</h3><ul><li><p>使用方式一</p><ol><li><p>将all.css引入到目录中</p></li><li><p>在html中直接使用类名来使用图标字体</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fas fa-bell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>使用方式二</p><p>通过伪元素来设置图标字体</p><ol><li>找到设置的元素通过before 或after 选中</li><li>在content中设置字体的编码</li><li>设置字体样式</li></ol></li></ul><h3 id="IcoMoon图标字体"><a href="#IcoMoon图标字体" class="headerlink" title="IcoMoon图标字体"></a>IcoMoon图标字体</h3><ul><li><p>网址：<a href="https://icomoon.io/">https://icomoon.io/</a></p></li><li><p>使用步骤</p><ol><li><p>打开网址，点击图中所示位置</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/icon1.png"></p></li><li><p>进入图中页面，选择所需要的图标字体</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/icon2.png"></p></li><li><p>进入页面之后点击右下角Download下载压缩包</p></li><li><p>将压缩包解压，找到文件中的fonts文件夹，将此文件夹放在要使用的网页的根目录下</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/icon3.png"></p></li><li><p>找到解压文件中的style.css 复制其中的 @font-face 中的内容添加到所需的页面中，如图</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/fonts.png"></p></li><li><p>在页面中使用</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('fonts/icomoon.eot?z9byv6')</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('fonts/icomoon.eot?z9byv6#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,                <span class="token url">url('fonts/icomoon.ttf?z9byv6')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,                <span class="token url">url('fonts/icomoon.woff?z9byv6')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,                <span class="token url">url('fonts/icomoon.svg?z9byv6#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">font-display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">span </span><span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> saddlebrown<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> /    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>span标签中的内容，找到demo.html文件</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/fon.png"></p></li></ol></li></ul><h3 id="iconFont-阿里图标库"><a href="#iconFont-阿里图标库" class="headerlink" title="iconFont 阿里图标库"></a>iconFont 阿里图标库</h3><ul><li>网址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文本样式&quot;&gt;&lt;a href=&quot;#文本样式&quot; class=&quot;headerlink&quot; title=&quot;文本样式&quot;&gt;&lt;/a&gt;文本样式&lt;/h2&gt;&lt;h3 id=&quot;text-align-文本的水平对齐&quot;&gt;&lt;a href=&quot;#text-align-文本的水平对齐&quot; class=&quot;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="css文本字体" scheme="https://codehan045.github.io/tags/css%E6%96%87%E6%9C%AC%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>float浮动及高度塌陷问题</title>
    <link href="https://codehan045.github.io/posts/f4efe5d4.html"/>
    <id>https://codehan045.github.io/posts/f4efe5d4.html</id>
    <published>2021-07-09T08:27:21.000Z</published>
    <updated>2021-08-05T02:35:01.834Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><h1 id="float浮动"><a href="#float浮动" class="headerlink" title="float浮动"></a>float浮动</h1><h2 id="元素同行显示"><a href="#元素同行显示" class="headerlink" title="元素同行显示"></a>元素同行显示</h2><ol><li><p>display:inline-block：盒子和盒子之间有5px间距，存在兼容性问题</p></li><li><p>浮动</p></li></ol><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ul><li><p>定义：通过浮动可以使一个元素向其父元素的左侧或右侧移动</p></li><li><p>使用float属性来设置元素的浮动</p></li><li><p>可选值：</p><p>​        <code>none</code>：默认值，元素不浮动</p><p>​        <code>left</code>: 元素向左浮动</p><p>​        <code>right</code>: 元素向右浮动</p></li></ul><blockquote><p>注：元素设置浮动后，水平布局的等式便不需强制成立</p><p><strong>元素设置浮动后，会完全从文档流中脱离，不再占用文档流的位置</strong></p></blockquote><h3 id="浮动的特点："><a href="#浮动的特点：" class="headerlink" title="浮动的特点："></a>浮动的特点：</h3><ol><li>可以让盒子同行显示，排列不下时自动换行，不存在兼容问题</li><li>浮动元素会完全脱离文档流，不再占据文档流中的位置,空间</li><li>设置浮动以后，元素会向父元素的左侧或右侧移动</li><li>浮动元素默认不会从父元素中移出</li><li>浮动元素 向左或向右 移动时，不会超过它前面的其他浮动元素</li><li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li><li>浮动元素不会超过它上边的浮动的兄弟元素，最多就是和它一样高</li></ol><blockquote><p>总结：浮动目前来讲，它的主要作用 就是让页面中的元素可以水平排列通过浮动可以制作一些水平方向的布局</p></blockquote><ol start="8"><li>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围,所以我们可以利用浮动来设置文字环绕图片的效果</li></ol><ul><li>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离后，元素的一些特点也会发生改变</li></ul><blockquote><p>注意：多个元素浮动时，后面的元素找到前面浮动元素的边界，直到碰到边界就停止或者第一个浮动元素找到父元素的边界。</p></blockquote><h3 id="脱离文档流的特点："><a href="#脱离文档流的特点：" class="headerlink" title="脱离文档流的特点："></a>脱离文档流的特点：</h3><h4 id="块元素："><a href="#块元素：" class="headerlink" title="块元素："></a>块元素：</h4><ol><li><p>块元素不再独占一行</p></li><li><p>脱离文档流后，块元素的宽度和高度默认被内容撑开</p></li></ol><h4 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h4><ol><li><p>脱离文档流之后会变成块元素，特点和块元素一样，支持宽高</p></li><li><p>脱离文档流之后不需要再区分块元素和行内元素了</p></li></ol><h2 id="高度塌陷的问题："><a href="#高度塌陷的问题：" class="headerlink" title="高度塌陷的问题："></a>高度塌陷的问题：</h2><h3 id="问题来源："><a href="#问题来源：" class="headerlink" title="问题来源："></a>问题来源：</h3><ul><li><p>在浮动布局中，父元素的高度默认被子元素撑开的</p></li><li><p>当子元素浮动后，其会完全脱离文档流，子元素从文档流中脱离， 将会无法撑起父元素的高度，导致父元素的高度丢失；</p></li><li><p>父元素高度丢失后，其下的元素会自动上移，导致页面布局混乱 ，是浮动布局的常见问题</p></li></ul><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><blockquote><p>以下方式给父元素添加</p></blockquote><h4 id="BFC-Block-Formatting-Context）取消浮动的影响"><a href="#BFC-Block-Formatting-Context）取消浮动的影响" class="headerlink" title="BFC(Block Formatting Context）取消浮动的影响"></a>BFC(Block Formatting Context）取消浮动的影响</h4><ul><li><p>定义：块级格式化环境,BFC是一个CSS中的一个隐含的属性，可以为一个元素开启BFC</p></li><li><p>开启BFC的元素会变成一个独立的布局区域</p></li></ul><h5 id="元素开启BFC的特点"><a href="#元素开启BFC的特点" class="headerlink" title="元素开启BFC的特点"></a>元素开启BFC的特点</h5><ol><li><p>开启BFC的元素，不会被浮动元素所覆盖</p></li><li><p>开启BFC的元素，子元素和父元素外边距不会重叠</p></li><li><p>开启BFC的元素可以包含浮动的子元素</p></li></ol><h5 id="可以通过一些特殊方式开启元素的BFC"><a href="#可以通过一些特殊方式开启元素的BFC" class="headerlink" title="可以通过一些特殊方式开启元素的BFC"></a>可以通过一些特殊方式开启元素的BFC</h5><ol><li>设置元素的浮动  float:left;</li><li>将元素设置为行内块元素 display：inline-block;</li><li>将元素的overflow 设置为一个非 visible 的值 overflow：hidden/auto;</li><li>position 为 absolute 和 fixed</li><li>display 为 inline-block、teble-cell、table-caption、flex（弹性盒子）</li></ol><blockquote><p>以下是清除浮动的方式</p></blockquote><h4 id="clear属性清除浮动"><a href="#clear属性清除浮动" class="headerlink" title="clear属性清除浮动"></a>clear属性清除浮动</h4><ul><li><p>作用：清楚浮动元素对当前元素所产生的影响</p></li><li><p>可选值： </p><p><code>left</code>:清除左侧浮动元素对当前元素的影响</p><p><code>right</code>：清除右侧浮动元素对当前元素的影响</p><p><code>both</code>: 清除两侧中最大影响的那侧</p></li><li><p>原理：</p><ul><li> 设置清除浮动后，浏览器会自动为元素添加一个上外边距，以使其位置不受其他元素的影响</li></ul></li></ul><h4 id="使用br标签来清除浮动，将浮动元素和非浮动元素隔开"><a href="#使用br标签来清除浮动，将浮动元素和非浮动元素隔开" class="headerlink" title="使用br标签来清除浮动，将浮动元素和非浮动元素隔开"></a>使用br标签来清除浮动，将浮动元素和非浮动元素隔开</h4><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token attr-name">clear</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="额外标签法（隔离法）"><a href="#额外标签法（隔离法）" class="headerlink" title="额外标签法（隔离法）"></a>额外标签法（隔离法）</h4><ul><li><p>在浮动元素的末尾添加一个空标签 此标签必须为块级元素，</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul><p>​      优点：通俗易懂，书写方便</p><p>​      缺点：添加许多无意义的标签，结构化较差</p><h4 id="伪元素设置-最终解决高度塌陷的方式"><a href="#伪元素设置-最终解决高度塌陷的方式" class="headerlink" title="伪元素设置  最终解决高度塌陷的方式"></a>伪元素设置  最终解决高度塌陷的方式</h4><ul><li><p><code>clearfix </code>在父元素上添加伪元素选择器可以动态添加一个子元素，完成清除浮动的操作（推荐使用）</p></li><li><p>格式：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">' '</span><span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>       <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li></ul><p><strong>此样式可以同时解决高度塌陷和外边距重叠的问题</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-&lt;/p&gt;
&lt;h1 id=&quot;float浮动&quot;&gt;&lt;a href=&quot;#float浮动&quot; class=&quot;headerlink&quot; title=&quot;float浮动&quot;&gt;&lt;/a&gt;float浮动&lt;/h1&gt;&lt;h2 id=&quot;元素同行显示&quot;&gt;&lt;a href=&quot;#元素同行显示&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="float" scheme="https://codehan045.github.io/tags/float/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式之背景及雪碧图</title>
    <link href="https://codehan045.github.io/posts/f4159b08.html"/>
    <id>https://codehan045.github.io/posts/f4159b08.html</id>
    <published>2021-07-09T06:02:15.000Z</published>
    <updated>2021-07-09T08:08:37.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><h3 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a><code>background-color</code></h3><ul><li>设置背景颜色，颜色值可以是十六进制值也可以是rgb(255,243,234)</li></ul><h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a><code>background-image</code></h3><ul><li><p>作用：设置背景图片</p></li><li><p>可同时设置，背景颜色将会成为图片的背景色</p></li><li><p>若背景的图片小于元素，则背景图会自动在元素中平铺，将元素铺满</p></li><li><p>若背景的图片大于元素，则背景图片将会有一部分背景无法显示</p></li><li><p>一样大 ，则正常显示</p></li></ul><h3 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a><code>background-repeat</code></h3><ul><li><p>作用：用来设置背景图片的重复样式</p></li><li><p>默认值：<code>repeat</code>  背景沿X轴、y轴双方向平铺</p></li><li><p><code>repeat-x</code> 沿x轴平铺</p></li><li><p><code>repeat-y</code> 沿y轴平铺</p></li><li><p><code>no-repeat</code> 图片不平铺</p></li></ul><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a><code>background-position</code></h3><ul><li><p>作用：用来设置背景图片的位置</p></li><li><p>设置方式：</p><ol><li><p>通过<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>、<code>center</code> 几个方位词来设定</p><p><strong>用此方式设置时，必须同时指定两个值，如果只写一个，则另一个值默认为<code>center</code></strong></p></li><li><p>通过偏移量(像素值或百分比)指定背景图片的位置  </p><p><strong>百分比以当前元素的父元素为基准</strong></p></li></ol></li></ul><p>​            <code>background-position</code>：X 水平偏移量  Y垂直偏移量</p><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a><code>background-clip</code></h3><ul><li><p>作用：设置背景范围</p></li><li><p>可选值：<code>border-box</code> 默认值，背景会出现在边框下边</p></li></ul><p>​           <code>padding-box</code>背景不会出现在边框，只出现在内容区和内边距</p><p>​            <code>content-box </code>背景只会出现在内容区</p><h3 id="background-origin"><a href="#background-origin" class="headerlink" title=" background-origin"></a><code> background-origin</code></h3><ul><li>作用：背景图片的偏移量的计算原点</li><li><code>padding-box</code> 默认值，<code>background-position</code>从内边距处开始计算</li><li><code>content-box</code> 背景图片的偏移量从内容区处计算</li><li><code>border-box</code> 背景图片的偏移量从边框处开始计算</li></ul><h3 id="background-size"><a href="#background-size" class="headerlink" title=" background-size"></a><code> background-size</code></h3><ul><li>作用：设置背景图片的大小</li><li>第一个值，表示宽度，第二个值，表示高度。如果只写一个，则第二个默认为auto</li><li><code>cover</code> 图片比例不变，将元素铺满,溢出部分不显示（隐藏）</li><li><code>contain</code> 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</li></ul><h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a><code>background-attachment</code></h3><ul><li>作用：背景图片是否跟随元素移动</li><li>可选值：<ul><li> <code>scroll</code> 默认值 背景图会跟随元素移动</li><li><code>fixed</code> 背景会固定在页面中，不会随元素移动</li></ul></li></ul><h3 id="background"><a href="#background" class="headerlink" title="background"></a><code>background</code></h3><ul><li><p>背景相关的简写属性</p><p>   <strong>无顺序要求，也没有哪个属性是必须写的</strong></p></li></ul><p>​         <strong>注：background-size 必须写在background-position的后边并使用 / 隔开</strong></p><p>​         <strong>background-origin要写在background-clip 的前边</strong></p><h2 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h2><ul><li>图片属于网页中的外部资源，都需要浏览器单独发送请求加载，浏览器加载外部资源时是按需加载的，用则加载，不用则不加载</li><li>解决图片闪烁的问题：</li><li>可以将多个小图片统一保存到一个大图中然后通过调整background-position 来显示，这样图片会同时加载到网页中，就可以有效避免出现闪烁的问题，应用十分广泛，被称为CSS-sprite,这种图我们称为雪碧图</li><li>雪碧图的使用步骤：<ol><li>先确定要使用的图标</li><li>测量图标大小</li><li>根据测量结果创建一个元素</li><li>将雪碧图设置为元素的背景图片</li><li>设置一个偏移量以显示正确的图片</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景样式&quot;&gt;&lt;a href=&quot;#背景样式&quot; class=&quot;headerlink&quot; title=&quot;背景样式&quot;&gt;&lt;/a&gt;背景样式&lt;/h2&gt;&lt;h3 id=&quot;background-color&quot;&gt;&lt;a href=&quot;#background-color&quot; class=&quot;head</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="css" scheme="https://codehan045.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器</title>
    <link href="https://codehan045.github.io/posts/b6981f1b.html"/>
    <id>https://codehan045.github.io/posts/b6981f1b.html</id>
    <published>2021-07-09T01:14:06.000Z</published>
    <updated>2021-07-20T09:18:36.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h2 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h2><ul><li><p>语法</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*   注释内容  */</span></code></pre></li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="选择器概述"><a href="#选择器概述" class="headerlink" title="选择器概述"></a>选择器概述</h3><ul><li><p>含义：通过选择器可以选中页面中的指定元素</p><p>比如：</p><pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的作用是选中页面中所有的p元素</p></li><li><p>声明块：通过声明块来指定要为元素设置的样式，由一个个声明组成</p></li><li><p>声明式：是一个名值对结构，一个样式名对应一个样式值，名和值之间以 ：连接，以 ; 结尾</p></li><li><p>注：这里的分号: 和 ; 是英文模式下的</p></li></ul><h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><ul><li><p> 作用：根据标签名选中指定的元素</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token selector">标签名 </span><span class="token punctuation">{</span>    样式名 <span class="token punctuation">:</span> 样式值 <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">例：p </span><span class="token punctuation">{</span>    <span class="token property">width</span> <span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token punctuation">;</span>    <span class="token property">display</span> <span class="token punctuation">:</span> flex <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li><p>作用：根据元素的id属性值选中一个元素</p></li><li><p>命名规则：由数字、字母、下划线_ 和 - 构成，不能以数字开头，不能包含特殊字符</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#id</span>属性值 </span><span class="token punctuation">{</span>   样式名 <span class="token punctuation">:</span> 样式值 ；<span class="token punctuation">}</span><span class="token selector"><span class="token id">#box</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>html代码&lt;div id=<span class="token string">"box"</span>>hello &lt;/div></code></pre></li></ul><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul><li><p>作用：根据元素的class属性值选中一组元素</p></li><li><p>class是一个标签的属性，和id类似，不同的是class可以重复使用</p></li><li><p>在标签中可以为同一个元素指定多个class属性，class属性之间用空格隔开</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.class</span>属性值 </span><span class="token punctuation">{</span>   样式名 <span class="token punctuation">:</span> 样式值 ；<span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>html代码&lt;div class=<span class="token string">"box"</span>>hello &lt;/div></code></pre></li></ul><h3 id="适配选择器"><a href="#适配选择器" class="headerlink" title="适配选择器"></a>适配选择器</h3><ul><li><p>作用：选中页面中的所有元素</p></li><li><p>应用：去除页面中所有元素的浏览器默认的样式</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>   样式名 <span class="token punctuation">:</span> 样式值 <span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ul><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><ul><li><p>作用：选中同时符合多个条件的元素</p></li><li><p>注：交集选择器中如果有元素选择器，必须使用元素选择器开头</p></li><li><p>语法：选择器之间没有任何连接符</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1选择器2选择器3<span class="token class">.....n</span> </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h4 id="并集选择器（选择器分组）"><a href="#并集选择器（选择器分组）" class="headerlink" title="并集选择器（选择器分组）"></a>并集选择器（选择器分组）</h4><ul><li><p>作用：同时选择多个选择器对应的元素</p></li><li><p>语法：选择器之间使用逗号连接</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器1,选择器2,选择器3,<span class="token class">...</span>选择器n </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li>父元素：直接包含子元素的元素</li><li>子元素：直接被父元素包含的元素</li><li>祖先元素：直接或间接包含后代元素<ul><li>一个元素的父元素也是他的祖先元素</li></ul></li><li>后代元素：直接或间接被祖先元素包含的元素<ul><li>子元素也是后代元素</li></ul></li><li>兄弟元素：拥有相同父元素的元素</li></ul><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><ul><li><p>作用：选中指定父元素的指定子元素</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token selector">父元素>子元素 </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ul><li><p>作用：选中指定元素内的指定后代元素</p></li><li><p>语法：元素之间使用空格连接</p><pre class=" language-css"><code class="language-css"><span class="token selector">祖先  后代 </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li></ul><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><ul><li><p>作用：选择下一个兄弟元素</p></li><li><p>语法： </p><pre class=" language-css"><code class="language-css"><span class="token selector">前一个+后一个  </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre></li><li><p>作用：选择下边所有的相同标签的兄弟元素</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css">兄~弟</code></pre></li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>根据标签上属性名或属性值找到对应的标签</li></ul><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>[属性名]</code></td><td>用于选取带有指定属性的元素。</td></tr><tr><td><code>[属性名=属性值]</code></td><td>用于选取带有指定属性和值的元素。（精确匹配）</td></tr><tr><td><code>[属性名*=属性值]</code></td><td>匹配属性值中包含指定值的某个元素。（模糊匹配）</td></tr><tr><td><code>[属性名~=属性值]</code></td><td>用于选取属性值中包含指定词汇的元素。</td></tr><tr><td><code>[属性名|=属性值]</code></td><td>用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</td></tr><tr><td><code>[属性名^=属性值]</code></td><td>匹配属性值以指定值开头的每个元素。</td></tr><tr><td><code>[属性名$=属性值]</code></td><td>匹配属性值以指定值结尾的每个元素。</td></tr></tbody></table><h2 id="伪类及伪元素"><a href="#伪类及伪元素" class="headerlink" title="伪类及伪元素"></a>伪类及伪元素</h2><h3 id="伪类（不存在的类，特殊的类）"><a href="#伪类（不存在的类，特殊的类）" class="headerlink" title="伪类（不存在的类，特殊的类）"></a>伪类（不存在的类，特殊的类）</h3><h4 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h4><ul><li><p>含义:描述一个元素的特殊状态</p></li><li><p>用法（语法）</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器：first-child </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><ol><li><code>:first-child</code> 找到满足条件的标签，并且这个标签是某个标签的第一个子元素</li><li><code>:last-child</code>最后一个元素</li><li><code>:nth-child(n)</code> 选中第n个子元素</li><li><code>:nth-last-child(n)</code>选中倒数的第几个元素<ul><li> 特殊值：</li><li>n 第n个 n的范围0~正无穷</li><li>even/2n选中偶数位的元素</li><li>odd/2n+1 选中奇数位的元素</li></ul></li><li><code> :first-of-type</code>  同类型元素的第一个子元素</li><li><code>:last-of-type</code>  同类型元素的最后一个子元素 </li><li><code>:nth-of-type(n)</code>  同类型元素的第n个子元素</li><li><code>:nth-last-of-type(n)</code>同类型的倒数第n个元素</li><li><code>:not</code> 否定伪类，将符合条件的元素从选择器中去除</li><li><code>:focus</code>向拥有键盘输入焦点的标签添加样式</li></ol></li></ul><p>注 ：<strong>上述5，6 、7、8几个伪类的功能与1，2，3、4类似，不同点是5，6、7、8是在同类型元素中进行排序</strong></p><h4 id="a标签的伪类"><a href="#a标签的伪类" class="headerlink" title="a标签的伪类"></a>a标签的伪类</h4><ul><li><p><code>:link</code> 用来表示没访问过的链接(正常的链接) a标签独有</p></li><li><p><code>:visited</code> 表示访问过的链接 （由于隐私原因，visited这个伪类只能修改链接的颜色 a标签独有</p></li><li><p><code>:hover</code> 表示鼠标移入的状态</p></li><li><p><code>:active</code>用来表示鼠标点击</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 未被访问的超链接的样式 */</span><span class="token selector">a<span class="token pseudo-class">:link</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 被访问过的超链接的样式 */</span><span class="token selector">a<span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 鼠标移入超链接时，作用的样式 */</span><span class="token comment" spellcheck="true">/* hover必须当中link和visited之后 */</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 超链接被点击时的样式，鼠标按住不放时样式 */</span><span class="token comment" spellcheck="true">/* active必须放在hover之后 */</span><span class="token selector">a<span class="token pseudo-class">:active</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><blockquote><p>注意：设置超链接的样式时，注意样式的作用顺序，hover必须放在link和visited之后，active必须放在hover之后（顺序：L-V-H-A）</p></blockquote><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul><li>定义：表示页面中一些特殊的并不真实存在的元素（特殊的位置）</li><li>语法格式：伪元素使用<code>：：</code>开头</li></ul><h5 id="常见伪元素"><a href="#常见伪元素" class="headerlink" title="常见伪元素"></a>常见伪元素</h5><ol><li><code>::first-letter</code> 表示第一个字母</li><li><code>::first-line</code>  表示第一行</li><li><code>::selection</code> 表示选中的内容</li><li><code>::before</code>  元素的开始</li><li><code>::after</code> 元素的最后</li></ol><p><strong>注：</strong>4,5必须结合content属性来使用</p><p>格式</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> <span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="选择器的权重及样式继承"><a href="#选择器的权重及样式继承" class="headerlink" title="选择器的权重及样式继承"></a>选择器的权重及样式继承</h2><h4 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h4><ul><li><p>概念：我们为一个元素设置样式同时也会应用到它的后代元素上， 发生在祖先元素和后代元素之间。</p></li><li><p>注：并不是所有的样式都会被继承</p></li><li><p>继承分为两种：</p><ul><li><p>自动继承：子元素不需要重复这个样式，可以自动从父元素上继承样式</p></li><li><p>手动继承：子元素通过重复设置这个样式，指定从父元素上继承样式；</p><p>属性值设置为<code>inherit </code>：继承父元素的该属性的属性值</p></li></ul></li></ul><h4 id="哪些属性可以自动继承"><a href="#哪些属性可以自动继承" class="headerlink" title="哪些属性可以自动继承"></a>哪些属性可以自动继承</h4><ul><li><p>文本样式可以被自动继承</p><ul><li><code>color</code></li><li><code>text-align</code></li><li><code>line-height</code></li><li><code>text-decoration</code></li><li><code>letter-spacing</code></li><li><code>word-spacing</code></li><li><code>text-indent</code></li><li><code>text-transform</code></li></ul></li><li><p>font系统字体样式可以被自动继承</p><ul><li><code>font-family</code></li><li><code>font-size</code></li><li><code>font-weight</code></li><li><code>font-style</code></li></ul></li><li><p><code>list-style</code>属性可以让<code>li</code>标签自动从<code>ul</code>标签上自动继承</p></li><li><p>鼠标样式 <code>cursor</code> 可以被自动继承</p><pre class=" language-css"><code class="language-css"><span class="token property">cursor</span> <span class="token punctuation">:</span> pointer <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*抓手 */</span></code></pre></li></ul><h4 id="哪些属性不能被自动继承"><a href="#哪些属性不能被自动继承" class="headerlink" title="哪些属性不能被自动继承"></a>哪些属性不能被自动继承</h4><ul><li><code>width</code>、<code>height</code> 、<code>margin</code>、<code> padding</code>、<code>border</code></li><li>背景相关的布局，定位属性，盒子模型属性</li></ul><h4 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h4><ul><li><p>问题来源：样式冲突,通过不同的选择器选中相同的元素，并为相同的样式设置不同的值时</p></li><li><p>选择器的权重   优先级从上到下逐渐降低</p><pre class=" language-tex"><code class="language-tex">内联样式              1，0，0，0id选择器              0，1，0，0类和伪类选择器         0，0，1，0元素选择器            0，0，0，1通配符选择器          0，0，0，0继承的样式          没有优先级</code></pre></li><li><p> 优先级计算相同，此时优先使用靠下的样式 (就近原则)</p></li><li><p> 比较优先级时，需将所有的选择器的优先级相加，最后优先级越高，则越优先显示</p></li><li><p>分组选择器单独计算 按位比较</p></li><li><p>选择器的累加不会超过其最大的数量级（类选择器再高也不会超过id选择器）</p></li><li><p>可以在某一个样式后添加( ! important )则此样式会获得最高的优先级，甚至超过内联样式（一般不会使用）不会遵循权重大小的计算，用多了样式没有规律，计算权重比较麻烦，维护性下降。慎用</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  color：blue ! important <span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h5 id="选择器的计算方案："><a href="#选择器的计算方案：" class="headerlink" title="选择器的计算方案："></a>选择器的计算方案：</h5><h6 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h6></li><li><p>就是将所有的选择器的权重相加，对比大小</p><ul><li><p>内联样式默认值为1000</p></li><li><p>id选择器的权重为100</p></li><li><p>类（属性）选择器的权重为10</p></li><li><p>标签选择器的权重为1</p></li><li><p>继承的属性权重为0</p></li></ul><blockquote><p>将所有基础选择器的权重相加，进行大小对比，谁大权重更高，但是不满足满10进1 的规则</p></blockquote><h6 id="4个0"><a href="#4个0" class="headerlink" title="4个0"></a>4个0</h6><p>（0，0，0，0）</p><ul><li>第一个0：代表内联样式，有则为1，无则为0</li><li>第二个0：代表id选择器的个数</li><li>第三个0：代表类（属性）选择器的个数</li><li>第四个0：代表标签选择器的个数</li></ul><blockquote><p>从第一个0开始进行对比，值大的权重更高，如果相同，对比第二0，依次类推，如果最后一个0也相等，权重大小一样，后面的选择器会盖住前面选择器样式。</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS选择器&quot;&gt;&lt;a href=&quot;#CSS选择器&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器&quot;&gt;&lt;/a&gt;CSS选择器&lt;/h1&gt;&lt;h2 id=&quot;CSS注释&quot;&gt;&lt;a href=&quot;#CSS注释&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="css选择器" scheme="https://codehan045.github.io/tags/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS概述</title>
    <link href="https://codehan045.github.io/posts/bf654099.html"/>
    <id>https://codehan045.github.io/posts/bf654099.html</id>
    <published>2021-07-08T16:04:10.000Z</published>
    <updated>2021-07-24T01:14:18.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="网页三部分："><a href="#网页三部分：" class="headerlink" title="网页三部分："></a>网页三部分：</h2><ol><li>HTML：网页的骨架，只是结构设计 （结构）</li><li>CSS：才是样式来源，有了css样式网页才能进行像素级还原，美化网页 （表现）</li><li>JavaScript：动态脚本，控制页面上的动态效果，点击事件等等 （行为）</li></ol><h2 id="CSS的基本概念"><a href="#CSS的基本概念" class="headerlink" title="CSS的基本概念"></a>CSS的基本概念</h2><p>CSS  Cascading  Style  Sheets (层叠样式表），主要用于控制网页上的样式的实现，一般css样式不能单独使用，它作用在HTML标签上，控制标签上的显示效果。</p><p>层叠：css样式可以在很多地方设置，首先检查代码中是否有css样式代码，会把内联样式、内部样式、外部样式都层叠到一起，最终形成一套样式，如果没有css样式代码，会作用浏览器默认的样式。多个地方的样式都层叠到一起，最终渲染一套样式页面上。相同属性css样式样式最终作用一个，不同的css属性直接作用。</p><p>样式表：指的是css样式代码。</p><h2 id="网页的样式的来源"><a href="#网页的样式的来源" class="headerlink" title="网页的样式的来源"></a>网页的样式的来源</h2><ul><li>注意：所有HTML标签本身是没有样式</li></ul><h3 id="浏览器默认的样式"><a href="#浏览器默认的样式" class="headerlink" title="浏览器默认的样式"></a>浏览器默认的样式</h3><ul><li><p>p标签，h标签，a标签等等浏览器默认在显示的时候给它们添加样式。标签本身没有样式，来自浏览器默认的样式</p></li><li><p>通常情况下，浏览器都会为元素设置一些默认样式</p></li><li><p>通常编写网页时必须去除浏览器的默认样式（pc端的页面）</p><ul><li><p><code>list-style:none;</code>去除项目符号</p></li><li><p><code>text-decoration: none;</code> 去除下划线</p></li><li><p>重置样式表：专门用来对浏览器的样式进行重置</p></li><li><p><code>reset.css</code> 直接去除了浏览器的默认样式</p></li><li><p><code>normalize.css</code> 对默认样式进行了统一</p></li></ul></li></ul><h3 id="浏览器用户自定义的样式"><a href="#浏览器用户自定义的样式" class="headerlink" title="浏览器用户自定义的样式"></a>浏览器用户自定义的样式</h3><ul><li>浏览器提供给用户可以更改默认的样式，通过浏览器的设置可以更改字体、字号等等</li></ul><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><ul><li><p>通过标签上style属性，在属性上书写对应的css样式代码</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">css属性名<span class="token property">1</span><span class="token punctuation">:</span> css属性值<span class="token number">1</span><span class="token punctuation">;</span>  css属性名<span class="token property">2</span><span class="token punctuation">:</span> css属性值<span class="token number">2</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li><li><p>注意：每一个标签都有style属性</p></li><li><p>好处：</p><ul><li>哪儿需要在哪儿添加</li></ul></li><li><p>缺点：</p><ul><li>多个标签作用相同的样式时，需要重复书写代码 代码复用程度不高</li><li>只对一个标签生效，样式发生改变时，要一个一个修改，非常不方便</li></ul></li></ul><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><ul><li><p>通过在head标签中添加style标签，在style标签中通过选择器来书写css样式代码</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">选择器</span><span class="token punctuation">{</span>            css属性名<span class="token property">1</span><span class="token punctuation">:</span>css属性值<span class="token number">1</span>；            css属性名<span class="token property">2</span><span class="token punctuation">:</span>css属性值<span class="token number">2</span>；        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>好处：</p><ul><li>结构和样式分离</li><li>HTML结构清晰明了，有利于代码维护</li><li>可以批量设置标签的样式</li></ul></li><li><p>缺点：</p><ul><li>结构代码和样式代码没有完成分离，还在一个文件</li><li>只作用于本html文件，其他html文件不能引用</li></ul></li></ul><h3 id="外部样式（外联样式）"><a href="#外部样式（外联样式）" class="headerlink" title="外部样式（外联样式）"></a>外部样式（外联样式）</h3><ul><li><p>先创建一个后缀名<code>.css</code>的文件，在文件中通过选择器去书写css代码，再在head标签中通过link标签引入对应的css文件</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>链接需要引入的css文件的文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>好处：</p><ul><li>结构和样式完全分离</li><li>一处改处处改，可以批量操作标签的样式</li><li>以后我们可以压缩css文件，减少文件体积，优化网页</li><li>代码复用程度较高，可以对多个网页进行公共样式的修改</li></ul></li><li><p>注意：内联、内部、外部样式同时作用在一个标签上时，优先级（权重）：内联的权重最大，在相同选择器时，内部和外部采用就近原则（离标签越近优先作用）</p></li></ul><h2 id="拓展：link和-import的区别"><a href="#拓展：link和-import的区别" class="headerlink" title="**拓展：link和@import的区别"></a>**拓展：link和@import的区别</h2><ul><li><p>link和@import都可以引入css文件，只是服务对象不同，link为整个网页服务，@import为css服务</p></li><li><p>语法：</p><pre class=" language-html"><code class="language-html">b<span class="token comment" spellcheck="true">&lt;!-- 第一种，通过link标签引入css文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 第二种，通过@import引入css文件，是css的语法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(文件路径)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li><p>区别：</p><ol><li><p>link是一种标签，@import是css语法，是一种语法</p></li><li><p>link不仅仅可以引入的css文件，还可以引入其他文件，@import只能css文件</p></li><li><p>加载时间：link加载css文件，随着页面的加载而加载，@import等等页面加载完成之后再加载文件</p></li><li><p>兼容性：link的兼容性比@import好一些</p></li><li><p>通过JavaScript操作样式的时候，link引入的样式可以被操作，@import引入样式不能被js操作</p></li></ol></li></ul><h2 id="网页中的单位"><a href="#网页中的单位" class="headerlink" title="网页中的单位"></a>网页中的单位</h2><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>   百分比： 可将属性值设置为相对于其父元素属性的百分比</p><p>   设置百分比，可以使子元素跟随父元素改变而改变</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><ul><li><p>是相对于父元素的字体大小来计算的</p></li><li><p>1 em= 1font-size</p></li><li><p>em会根据字体大小的改变而改变</p></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><ul><li>rem是相对于根元素<code>html</code>元素的字体大小来计算</li><li>应用：可以通过修改html里面的文字大小来改变页面中元素的大小，可以整体控制</li></ul><h3 id="颜色："><a href="#颜色：" class="headerlink" title="颜色："></a>颜色：</h3><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><ul><li><p>在Css中可直接使用颜色名来设置颜色</p><p>  red green blue</p></li><li><p>每种颜色的取值在（0-255）之间</p></li><li><p>语法：rgb(红色，绿色，蓝色)</p></li></ul><h4 id="rgba"><a href="#rgba" class="headerlink" title="rgba"></a>rgba</h4><ul><li><p>rgba就是在rgb的基础上增加了一个a表示不透明度</p></li><li><p>1 不透明 0 完全透明 .5 半透明</p></li></ul><h4 id="十六进制的rgb值"><a href="#十六进制的rgb值" class="headerlink" title="十六进制的rgb值"></a>十六进制的rgb值</h4><ul><li><p>语法：#红色 绿色 蓝色</p></li><li><p> 颜色浓度通过 00-ff </p></li><li><p>若颜色两位两位重复可以进行简写</p><p>   #aabbcc -&gt; #abc</p></li></ul><h2 id="网页优化方案"><a href="#网页优化方案" class="headerlink" title="网页优化方案"></a>网页优化方案</h2><ol><li>合理使用图片可以优化网页</li><li>使用雪碧图，通过减少服务器的请求，优化网页</li><li>使用外部css文件，将其压缩，可以优化网页</li><li>1px 的渐变背景平铺可以优化网页</li><li>使用字体图标可以优化网页</li><li>使用link引入css文件也可以网页</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;h2 id=&quot;网页三部分：&quot;&gt;&lt;a href=&quot;#网页三部分：&quot; class=&quot;headerlink&quot; title=&quot;网页三部分：&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="web前端" scheme="https://codehan045.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="css" scheme="https://codehan045.github.io/tags/css/"/>
    
  </entry>
  
</feed>
