<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>89C51串口通信时钟</title>
      <link href="posts/e8901063.html"/>
      <url>posts/e8901063.html</url>
      
        <content type="html"><![CDATA[<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>了解单片机串口通信基本原理</li><li>掌握串口中断与定时中断编写以及工作模式原理</li><li>掌握串口收发寄存器的使用</li></ol><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><ol><li>通过电脑下发指令给单片机</li><li>若为 ‘0x01’ 指令，单片机将8位数码管全部显示为0</li><li>若为 ‘0x02’ 指令，8位数码管显示当前时间</li><li>每过一分钟，单片机向电脑报告当前时间</li><li>电脑可以下发指令设置时间</li></ol><h3 id="所用工具"><a href="#所用工具" class="headerlink" title="所用工具"></a>所用工具</h3><ol><li>Keil uVision4 编译软件</li><li>stc-isp 串口助手</li><li>Proteus 8 仿真软件  </li><li>Configure Virtual Serial Port Driver  虚拟串口工具</li></ol><h4 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg51.h></span>  </span><span class="token comment" spellcheck="true">//头文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment" spellcheck="true">// 引用字符串比较函数</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> segdata<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 段码表</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> bitdata<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//位选</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> tempdata<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据接收缓存区</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch<span class="token punctuation">,</span>biao<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接收数据标志位biao  ch数据接收字节</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> shi <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//时</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//分</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> miao <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//秒</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> hour<span class="token punctuation">,</span>min<span class="token punctuation">,</span>sen<span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//flag 点闪标志  flg 一分标志位 count计数 </span><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//延时</span><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//显示</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             P2<span class="token operator">=</span>bitdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           P1 <span class="token operator">=</span> tempdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//清除函数</span><span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//头部比较</span><span class="token keyword">int</span>  <span class="token function">compared_head</span><span class="token punctuation">(</span><span class="token keyword">char</span> cmd_head<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>cmd_head<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//帧尾比较</span><span class="token keyword">int</span> <span class="token function">Compare_end</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> num<span class="token punctuation">,</span><span class="token keyword">char</span> end<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> n<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>start<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">==</span>end<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//数据处理</span><span class="token keyword">int</span> <span class="token function">infodata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compared_head</span><span class="token punctuation">(</span><span class="token string">"set:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Compare_end</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"clock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>                                            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//串口初始化</span><span class="token keyword">void</span> <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       SCON <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span>       TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>         PCON<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>       TH1 <span class="token operator">=</span>TL1<span class="token operator">=</span><span class="token number">0xfd</span><span class="token punctuation">;</span>         TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         ET1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//发送一个字节</span><span class="token keyword">void</span> <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">)</span><span class="token punctuation">{</span>       SBUF <span class="token operator">=</span> byte<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>TI<span class="token punctuation">)</span><span class="token punctuation">;</span>       TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//发送一个字符串</span><span class="token keyword">void</span> <span class="token function">uart_send_str</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//串口中断函数</span><span class="token keyword">void</span> <span class="token function">uart_isr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token punctuation">)</span>      <span class="token punctuation">{</span>                    ch<span class="token operator">=</span>SBUF<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    biao<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token punctuation">}</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>TI<span class="token punctuation">)</span><span class="token punctuation">{</span>            TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//定时中断初始化</span><span class="token keyword">void</span> <span class="token function">timer0_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>       TH0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65535</span> <span class="token operator">-</span> <span class="token number">50000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">256</span><span class="token punctuation">;</span>       TL0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65535</span> <span class="token operator">-</span> <span class="token number">50000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>       ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//定时中断函数</span><span class="token keyword">void</span> <span class="token function">timer0_isr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span>                 TH0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65535</span> <span class="token operator">-</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span>       TL0<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65535</span> <span class="token operator">-</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>       a<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>                a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          miao<span class="token operator">++</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        flg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    flag<span class="token operator">=</span><span class="token operator">~</span>flag<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>miao<span class="token operator">==</span><span class="token number">60</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>                                                       miao <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                           fen<span class="token operator">++</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>fen <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                    fen  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                  shi<span class="token operator">++</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span><span class="token punctuation">(</span>shi <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">)</span>                                        <span class="token punctuation">{</span>                                                shi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                   <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                             <span class="token punctuation">}</span>     tempdata<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> segdata<span class="token punctuation">[</span>shi <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     tempdata<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> segdata<span class="token punctuation">[</span>shi <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          tempdata<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> segdata<span class="token punctuation">[</span>fen <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     tempdata<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> segdata<span class="token punctuation">[</span>fen <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                      tempdata<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> segdata<span class="token punctuation">[</span>miao <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     tempdata<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> segdata<span class="token punctuation">[</span>miao <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>              tempdata<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>        tempdata<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              tempdata<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>        tempdata<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">timer0_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>flg<span class="token punctuation">)</span><span class="token punctuation">{</span>                flg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">uart_send_str</span><span class="token punctuation">(</span><span class="token string">"now time is:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>shi<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>shi<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fen<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fen<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>miao<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>miao<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">uart_send_str</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">"0x01"</span><span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                             P2<span class="token operator">=</span>bitdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                             P1 <span class="token operator">=</span> segdata<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                     <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">"0x02"</span><span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>biao<span class="token punctuation">)</span><span class="token punctuation">{</span>            biao<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">infodata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            hour <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          min<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>  <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>  <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hour<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>hour<span class="token operator">&lt;=</span><span class="token number">24</span><span class="token operator">&amp;&amp;</span>min<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>min<span class="token operator">&lt;</span><span class="token number">60</span><span class="token operator">&amp;&amp;</span>sen<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>sen<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                shi<span class="token operator">=</span>hour<span class="token punctuation">;</span>                fen<span class="token operator">=</span>min<span class="token punctuation">;</span>                miao<span class="token operator">=</span>sen<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                         <span class="token function">uart_send_str</span><span class="token punctuation">(</span><span class="token string">"The Time is error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token function">uart_send_str</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//          uart_send_str(temp);    </span><span class="token comment" spellcheck="true">//            uart_send_str("\r\n");</span>            <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="实验效果图"><a href="#实验效果图" class="headerlink" title="实验效果图"></a>实验效果图</h3><h4 id="时钟显示"><a href="#时钟显示" class="headerlink" title="时钟显示"></a>时钟显示</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210609194415.png"></p><h4 id="电脑发送指令0x01"><a href="#电脑发送指令0x01" class="headerlink" title="电脑发送指令0x01"></a>电脑发送指令0x01</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210609224740.png"></p><h4 id="设置时钟"><a href="#设置时钟" class="headerlink" title="设置时钟"></a>设置时钟</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210609224949.png"></p><h4 id="返回时间"><a href="#返回时间" class="headerlink" title="返回时间"></a>返回时间</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210609225047.png"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字时钟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ITCLUB博客网站</title>
      <link href="posts/c1b463a3.html"/>
      <url>posts/c1b463a3.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h3><ul><li><p>操作系统∶Windows 7。</p></li><li><p>JDK环境∶ Java SE Development Kit （JDK） version 8。</p></li><li><p>Web服务器∶ Tomcat 8.0。</p></li><li><p>数据库∶ SQL Server数据库。</p></li></ul><h3 id="2-技术实现"><a href="#2-技术实现" class="headerlink" title="2. 技术实现"></a>2. 技术实现</h3><p>▶▶▏Ajax技术的应用         ▶▶▏Servlet的路由配置    </p><p>▶▶▏何上传文件                 ▶▶▏评论组件的实现</p><p>▶▶▏JavaBean的编写        ▶▶▏JSP高级语言</p><p>▶▶▏Eclipse的使用技巧     ▶▶▏SQL Server数据库的使用</p><h4 id="1-1-所需知识结构"><a href="#1-1-所需知识结构" class="headerlink" title="1.1 所需知识结构"></a>1.1 所需知识结构</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611112623.png"></p><h3 id="2-业务流程"><a href="#2-业务流程" class="headerlink" title="2.业务流程"></a>2.业务流程</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611112817.png"></p><h3 id="3-数据库设计"><a href="#3-数据库设计" class="headerlink" title="3.数据库设计"></a>3.数据库设计</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611113122.png"></p><h3 id="4-界面效果展示"><a href="#4-界面效果展示" class="headerlink" title="4.界面效果展示"></a>4.界面效果展示</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611113209.png"></p><p>​                                                                                        图4.1 网站首页</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611113323.png"></p><p>​                                                                                    图4.2 个人博客首页</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611113424.png"></p><p>​                                                                                        图4.3 博客登陆  </p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210611113518.png"></p><p>​                                                                                图博客4.4 文章列表页面</p>]]></content>
      
      
      <categories>
          
          <category> web网站项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="posts/a1ede006.html"/>
      <url>posts/a1ede006.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="1-什么是HTTP协议"><a href="#1-什么是HTTP协议" class="headerlink" title="1. 什么是HTTP协议"></a>1. 什么是HTTP协议</h3><ul><li>协议：是指双方，或多方，相互约定好，大家都需要遵守的规则，叫做协议</li><li>HTTP协议：指客户端和服务器之间通信时，发送数据，需要遵守的规则（HTTP协议中的数据又叫报文）</li></ul><h3 id="2-请求的HTTP协议格式"><a href="#2-请求的HTTP协议格式" class="headerlink" title="2. 请求的HTTP协议格式"></a>2. 请求的HTTP协议格式</h3><ul><li>请求  客户端给服务器发送数据</li><li>响应  服务器给客户端回传数据</li></ul><h4 id="2-1-GET请求"><a href="#2-1-GET请求" class="headerlink" title="2.1 GET请求"></a>2.1 GET请求</h4><ol><li><p>请求行</p><p>① 请求的方式                           GET</p><p>② 请求的资源路径[+?+请求参数]</p><p>③ 请求的协议的版本号           HTTP/1.1</p></li><li><p>请求头</p><p>key:value    组成    不同的键值对，表示不同的含义</p></li></ol><h4 id="2-2-POST-请求"><a href="#2-2-POST-请求" class="headerlink" title="2.2  POST  请求"></a>2.2  POST  请求</h4><ol><li><p>请求行</p><p>① 请求的方式                           POST</p><p>② 请求的资源路径[+?+请求参数]</p><p>③ 请求的协议的版本号           HTTP/1.1</p></li><li><p>请求头</p><p>① key:value         不同的请求头，有不同的含义</p><p> 空行</p></li><li><p>请求体        发送给服务器的数据</p></li></ol><h4 id="2-3-常用的请求头"><a href="#2-3-常用的请求头" class="headerlink" title="2.3 常用的请求头"></a>2.3 常用的请求头</h4><p>Accept: 表示客户端可以接收的数据类型</p><p>Accept-Language：表示客户端可以接收的语言类型   </p><ul><li>zh_CN   中文中国</li><li>en_US   英文美国</li></ul><p>Connection: 告诉服务器请求连接如何处理</p><ul><li>Keep-Alive    告诉服务器回传数据不要马上关闭，保持一小段时间的连接</li><li>Closed     马上关闭</li></ul><p>User-Agent：表示客户端浏览器的信息</p><p>Host: 表示请求时的服务器 ip 和端口号</p><h4 id="2-4-区分哪些是GET请求，哪些是POST请求"><a href="#2-4-区分哪些是GET请求，哪些是POST请求" class="headerlink" title="2.4 区分哪些是GET请求，哪些是POST请求"></a>2.4 区分哪些是GET请求，哪些是POST请求</h4><blockquote><p>GET请求</p></blockquote><ol><li>form标签    method=get</li><li>a标签</li><li>link标签引入css</li><li>Script标签引入js文件</li><li>img标签引入图片</li><li>iframe引入html页面</li><li>在浏览器地址栏中输入地址后敲回车</li></ol><blockquote><p>POST请求</p></blockquote><ol><li>form标签     method=post</li></ol><h3 id="3-响应的HTTP协议格式"><a href="#3-响应的HTTP协议格式" class="headerlink" title="3. 响应的HTTP协议格式"></a>3. 响应的HTTP协议格式</h3><ol><li>响应行<ul><li>响应的协议和版本号</li><li>响应状态码</li><li>响应状态描述符</li></ul></li><li>响应头<ul><li>key ：value      不同的响应头，有其不同的含义</li><li>空行</li></ul></li><li>响应体          就是回传给服务器的数据</li></ol><h4 id="3-1-常见的响应码说明"><a href="#3-1-常见的响应码说明" class="headerlink" title="3.1 常见的响应码说明"></a>3.1 常见的响应码说明</h4><ul><li>200    表示请求成功</li><li>302    表示请求重定向</li><li>404    表示请求服务器已经收到，但是你要的数据不存在(请求地址错误)</li><li>500    表示服务器已经收到请求，但是服务器内部错误(代码错误)</li></ul><h3 id="4-MIME-类型说明"><a href="#4-MIME-类型说明" class="headerlink" title="4. MIME 类型说明"></a>4. MIME 类型说明</h3><ul><li>MIME 是HTTP协议中的数据类型 （多功能Internet邮件扩充服务）</li><li>MIME 类型的格式是“大类型/小类型”,并与某一种文件的扩展名相对应</li></ul><blockquote><p>常见的MIME类型</p></blockquote><table><thead><tr><th align="left">文件</th><th>文件后缀</th><th>MIME类型</th></tr></thead><tbody><tr><td align="left">超文本标记语言文本</td><td>.html , .htm</td><td>text/html</td></tr><tr><td align="left">普通文本</td><td>.txt</td><td>text/plain</td></tr><tr><td align="left">RTF文本</td><td>.rtf</td><td>application/rtf</td></tr><tr><td align="left">GIF图形</td><td>.gif</td><td>image/gif</td></tr><tr><td align="left">JPEG</td><td>.jpeg .jpg</td><td>image/jpeg</td></tr><tr><td align="left">au声音文件</td><td>.au</td><td>audio/basic</td></tr><tr><td align="left">MIDI 音乐文件</td><td>.mid,.midi</td><td>audio/midi,audio/x-midi</td></tr><tr><td align="left">AVI文件</td><td>.avi</td><td>video/x-msvideo</td></tr></tbody></table><h4 id="4-1谷歌浏览器查看HTTP协议"><a href="#4-1谷歌浏览器查看HTTP协议" class="headerlink" title="4.1谷歌浏览器查看HTTP协议"></a>4.1谷歌浏览器查看HTTP协议</h4><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210604153111.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet结构体系</title>
      <link href="posts/fd679463.html"/>
      <url>posts/fd679463.html</url>
      
        <content type="html"><![CDATA[<h3 id="Servlet整个体系"><a href="#Servlet整个体系" class="headerlink" title="Servlet整个体系"></a>Servlet整个体系</h3><h3 id="1-Servlet结构分析"><a href="#1-Servlet结构分析" class="headerlink" title="1. Servlet结构分析"></a>1. Servlet结构分析</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/Servlet1.png" alt="Servlet结构图"></p><h3 id="2-ServletConfig-类"><a href="#2-ServletConfig-类" class="headerlink" title="2. ServletConfig 类"></a>2. ServletConfig 类</h3><ul><li>Servlet程序的配置信息类</li><li>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，我们负责使用。 </li><li>Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的 ServletConfig 对 象。 </li></ul><h4 id="2-1-ServletConfig-类的三大作用"><a href="#2-1-ServletConfig-类的三大作用" class="headerlink" title="2.1  ServletConfig 类的三大作用"></a>2.1  ServletConfig 类的三大作用</h4><ol><li>可以获取Servlet的别名 servlet-name 的值</li><li>获取初始化参数 init-param </li><li>获取 ServletContext 对象 </li></ol><p>xml配置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--servlet 标签给Tomcat配置Servlet程序--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--servlet-name 标签 servlet程序起一个别名（一般是类名）--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--servlet-class 是Servlet程序的全类名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.han.code.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--init-param是初始化参数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--参数名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--参数值--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--参数名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--参数值--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre><p>java类获取</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 init初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        1. 可以获取Servlet的别名 servlet-name 的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloServlet类的别名为："</span><span class="token operator">+</span>servletConfig<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        2. 获取初始化参数 init-param</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数Username的值为："</span><span class="token operator">+</span>servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化参数URL的值为："</span><span class="token operator">+</span>servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3. 获取 ServletContext 对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>在其他位置也可以使用ServletConfig </li></ul><p>注：重写init方法后</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重写之后一定要调用父类中的init(ServletConfig)操作</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写了init方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-ServletContext类"><a href="#3-ServletContext类" class="headerlink" title="3. ServletContext类"></a>3. ServletContext类</h3><h4 id="3-1-什么是ServletContext"><a href="#3-1-什么是ServletContext" class="headerlink" title="3.1 什么是ServletContext"></a>3.1 什么是ServletContext</h4><ol><li>ServletContext 是一个接口， 它表示 Servlet 上下文对象</li><li>一个web工程，只有一个ServletContext对象实例</li><li>ServletContext对象是一个域对象</li><li>ServletContext 是在web工程部署启动的时候创建，在web工程停止的时候销毁</li></ol><blockquote><p>什么是域对象？</p></blockquote><p> 域对象，是可以像Map一样存取数据的对象，叫域对象</p><p>这里的域指的是存取数据的操作范围，整个web工程</p><table><thead><tr><th></th><th>存数据</th><th align="center">取数据</th><th align="center">删除 数据</th></tr></thead><tbody><tr><td>Map</td><td>put()</td><td align="center">get()</td><td align="center">remove()</td></tr><tr><td>域对象</td><td>setAttribute()</td><td align="center">getAttribute()</td><td align="center">removeAttribute()</td></tr></tbody></table><h4 id="3-2-ServletContext类的四个作用"><a href="#3-2-ServletContext类的四个作用" class="headerlink" title="3.2  ServletContext类的四个作用"></a>3.2  ServletContext类的四个作用</h4><ol><li>获取web.xml 中配置的上下文参数context-param</li><li>获取当前的工程路径，格式：/工程路径</li><li>获取工程部署后在服务硬盘上的绝对路径</li><li>像Map一样存取数据</li></ol><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        1、获取 web.xml 中配置的上下文参数 context-param</span>        ServletContext context <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"context-param 参数username的值是："</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"context-param 参数password的值是："</span><span class="token operator">+</span>context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        2、获取当前的工程路径，格式: /工程路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前工程路径："</span><span class="token operator">+</span>context<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、获取工程部署后在服务器硬盘上的绝对路径</span>        <span class="token comment" spellcheck="true">/**         *   /斜杠被服务器解析地址为：http://ip:port/工程名/     映射到IDEA代码的web目录         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工程部署的路径是"</span><span class="token operator">+</span>context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        4、像 Map 一样存取数据</span>        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Context中获取域数据key1的值 是："</span><span class="token operator">+</span>context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet技术</title>
      <link href="posts/8c470175.html"/>
      <url>posts/8c470175.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是Servlet"><a href="#1-什么是Servlet" class="headerlink" title="1. 什么是Servlet"></a>1. 什么是Servlet</h3><ol><li>Servlet是javaEE规范之一，接口</li><li>Servlet 是JavaWeb三大组件之一。<ul><li>Servlet程序</li><li>Filter 过滤器</li><li>Listener 监听器</li></ul></li><li>Servlet 是运行在服务器上的一个java小程序<ul><li><strong>可以接收客户端发送来的请求，并响应数据给客户端</strong></li></ul></li></ol><h3 id="2-手动实现Servlet程序"><a href="#2-手动实现Servlet程序" class="headerlink" title="2. 手动实现Servlet程序"></a>2. 手动实现Servlet程序</h3><ol><li><p>编写一个类去实现Servlet接口</p></li><li><p>实现service 方法，处理请求，并响应数据</p></li><li><p>到web.xml 中配置Servlet程序的访问地址</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    servlet 标签给Tomcat配置Servlet程序--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        servlet-name 标签 servlet程序起一个别名（一般是类名）--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--       servlet-class 是Servlet程序的全类名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.han.code.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--     servlet-mapping标签给Servlet程序配置访问地址   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        Servlet-name标签的作用是告诉服务器，当前配置的地址给哪个Servlet程序使用--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--      &lt;url-pattern>  配置访问地址                    / 斜杠在服务器解析时，表示地址为http://ip:port/工程路径                    /hello  表示地址为http://ip:port/工程路径/hello        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>常见错误</strong><ol><li>url-pattern 中配置的路径没有以斜杠开始</li><li>servlet-name 配置的值不存在</li></ol></li></ul></li></ol><h3 id="3-Servlet的生命周期"><a href="#3-Servlet的生命周期" class="headerlink" title="3. Servlet的生命周期"></a>3. Servlet的生命周期</h3><ol><li>执行Servlet构造器方法</li><li>执行init初始化方法</li></ol><blockquote><p>第一，二步，是在第一次访问的时候创建Servlet程序会调用</p></blockquote><ol start="3"><li>执行service方法</li></ol><blockquote><p>第三步，每次访问都会调用</p></blockquote><ol start="4"><li>执行destroy销毁方法</li></ol><blockquote><p>第四步，在web工程停止时会调用</p></blockquote><h3 id="4-GET和POST请求的分发处理"><a href="#4-GET和POST请求的分发处理" class="headerlink" title="4. GET和POST请求的分发处理"></a>4. GET和POST请求的分发处理</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>han<span class="token punctuation">.</span>code<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @version 1.0 * @ClassName HelloServlet * @Description 手动实现Servlet程序 * @Author hlr * @Date 2021/5/24 16:25 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HelloServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1  构造器方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 init初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * service方法是专门用来处理请求和响应的     * @param servletRequest      * @param servletResponse     * @throws ServletException     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3  service ==Hello Servlet 被访问了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        类型转换（有getMethod()方法）</span>        HttpServletRequest httpServletRequest<span class="token operator">=</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取请求方式</span>        String method <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">toget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">topost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * get请求的操作     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * post请求     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">topost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4 destroy 销毁方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-通过继承HttpServlet实现Servlet程序"><a href="#5-通过继承HttpServlet实现Servlet程序" class="headerlink" title="5.通过继承HttpServlet实现Servlet程序"></a>5.通过继承HttpServlet实现Servlet程序</h3><ul><li><strong>一般在实际项目开发中，都是使用继承HttpServlet实现Servlet程序</strong></li></ul><ol><li>编写一个类去继承HttpServlet类</li><li>根据业务需要重写doGet或 doPost方法</li><li>到web.xml中配置Servlet程序的访问地址</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>han<span class="token punctuation">.</span>code<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @version 1.0 * @ClassName HttpServletex * @Description TODO * @Author hlr * @Date 2021/5/24 18:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpServletex</span>  <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * doGet() 在get请求的时候调用     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"httpServlet 的get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * doPost() 在post请求的时候调用     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"httpServlet 的post请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-使用IDEA直接创建Servlet程序"><a href="#6-使用IDEA直接创建Servlet程序" class="headerlink" title="6.使用IDEA直接创建Servlet程序"></a>6.使用IDEA直接创建Servlet程序</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210524183854.png"></p><p>配置Servlet信息</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210524202058.png"></p>]]></content>
      
      
      <categories>
          
          <category> servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web服务器之Tomcat</title>
      <link href="posts/5971465f.html"/>
      <url>posts/5971465f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-常用的Web服务器"><a href="#1-常用的Web服务器" class="headerlink" title="1. 常用的Web服务器"></a>1. 常用的Web服务器</h3><ul><li><p>Tomcat  ：由Apache组织提供的web服务器，提供对jsp、Servlet的支持，一种轻量级的javaWeb容器，应用最为广泛（免费）</p></li><li><p>jboss：遵从javaEE规范，纯EJB服务器（免费）</p></li><li><p>GlassFish:  Oracle公司开发，商业服务器，产品级质量（应用较少）</p></li><li><p>Resin ：CAUCHO公司产品 ，对servlet和JSP提供良好的支持。性能优良（收费，应用较多）</p></li><li><p>WebLogic：Oracle公司的产品，目前应用最广泛的Web服务器，支持JavaEE规范，适合大项目（收费，适合大公司）</p></li></ul><h3 id="2-Tomcat服务器的-使用"><a href="#2-Tomcat服务器的-使用" class="headerlink" title="2. Tomcat服务器的 使用"></a>2. Tomcat服务器的 使用</h3><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>找到需要的Tomcat版本的zip压缩包，解压到相应的安装目录</p><p>附：Tomcat7.0 ,8.0,8.5 请自行下载</p><p><a href="https://pan.baidu.com/s/1w3YJIWUkcDu6DSKzMfd7qQ">百度网盘Tomcat</a><br>提取码：y5z6 </p><h3 id="2-2-目录结构"><a href="#2-2-目录结构" class="headerlink" title="2.2 目录结构"></a>2.2 目录结构</h3><ul><li>bin                         专门用来存放 Tomcat 服务器的可执行程序</li><li>conf                       专门用来存放 Tocmat 服务器的配置文件</li><li>lib                           专门用来存放 Tomcat 服务器的 jar 包</li><li>logs                        专门用来存放 Tomcat 服务器运行时输出的日记信息</li><li>temp                      专门用来存放 Tomcdat 运行时产生的临时数据</li><li>webapps                专门用来存放部署的 Web 工程。</li><li>work                       是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为                                 Servlet 的源码，和 Sessio</li></ul><h3 id="2-3-Tomcat服务器的启动"><a href="#2-3-Tomcat服务器的启动" class="headerlink" title="2.3 Tomcat服务器的启动"></a>2.3 Tomcat服务器的启动</h3><h4 id="2-3-1-方式一"><a href="#2-3-1-方式一" class="headerlink" title="2.3.1 方式一"></a>2.3.1 方式一</h4><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器。</p><h4 id="2-3-2-方式二"><a href="#2-3-2-方式二" class="headerlink" title="2.3.2 方式二"></a>2.3.2 方式二</h4><ol><li><p>打开命令行 </p></li><li><p>cd 到 你的 Tomcat 的 bin 目录下 </p><ul><li><p>方式一 进入bin目录  在下图所在位置输入cmd 直接进入</p><p><img src="C:\Users\16852\AppData\Roaming\Typora\typora-user-images\1621696145110.png" alt="1621696145110"></p></li><li><p>方式二</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/2021-05-22_231447.png">    </p></li></ul></li><li><p>敲入启动命令： catalina run</p></li></ol><h4 id="2-3-3-测试Tomcat服务器启动成功"><a href="#2-3-3-测试Tomcat服务器启动成功" class="headerlink" title="2.3.3 测试Tomcat服务器启动成功"></a>2.3.3 测试Tomcat服务器启动成功</h4><ul><li><p>打开浏览器，在浏览器地址栏中输入以下地址测试：<br>1、<a href="http://localhost:8080/">http://localhost:8080</a><br>2、<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a><br>3、http://真实 ip:8080</p></li><li><p>出现以下界面，说明启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210522232611.png" alt="tomcat登陆成功"></p></li><li><p>常见的启动失败现象及原因，</p><p>现象：双击startup.bat文件，会出现一个小黑窗口一闪而过</p><p>原因：JAVA_HOME环境变量未配置好</p><ul><li><p>配置JAVA_HOME环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523094233.png"></p><p><strong>注</strong>: </p><ol><li><strong>JAVA_HOME</strong> 必须全大写</li><li><strong>JAVA_HOME</strong> 中间必须是下划线</li><li><strong>JAVA_HOME</strong>配置路径只需要配置到jdk安装目录</li></ol></li></ul></li></ul><h3 id="2-4-Tomcat-的停止"><a href="#2-4-Tomcat-的停止" class="headerlink" title="2.4 Tomcat 的停止"></a>2.4 Tomcat 的停止</h3><ol><li>关闭tomcat服务器窗口（黑框）</li><li>找到Tomcat的bin目录下的shutdown.bat双击，就可以停止Tomcat服务器</li></ol><h3 id="2-5修改Tomcat的端口号"><a href="#2-5修改Tomcat的端口号" class="headerlink" title="2.5修改Tomcat的端口号"></a>2.5修改Tomcat的端口号</h3><ul><li><strong>mysql</strong>  默认端口号是 3306</li><li><strong>Tomcat</strong>  默认端口号是 8080</li><li><strong>HTTP</strong>  协议默认的端口号是  80</li></ul><hr><blockquote><p>修改：找到Tomcat目录下的conf  目录，找到server.xml配置文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523101754.png"></p><ul><li>找到Connector标签，修改port属性为你需要的端口号，端口号范围：<strong>1 —  65535</strong></li><li>修改完端口号，一定要重启Tomcat服务器才能生效</li></ul><h3 id="3-IDEA整合Tomcat服务器"><a href="#3-IDEA整合Tomcat服务器" class="headerlink" title="3.IDEA整合Tomcat服务器"></a>3.IDEA整合Tomcat服务器</h3><blockquote><p>操作菜单如下： File–&gt;Settings–&gt;Build, Execution, Deployment –&gt;Application Servers</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523103335.png"></p><p>配置你的Tomcat安装目录</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523103737.png"></p><p>新建一个Module查看是不是配置成功</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523104130.png"></p><h3 id="4-IDEA中动态web工程的操作"><a href="#4-IDEA中动态web工程的操作" class="headerlink" title="4.IDEA中动态web工程的操作"></a>4.IDEA中动态web工程的操作</h3><ol><li>创建一个module</li><li>选择要创建的类型模块</li></ol><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523104758.png"></p><ol start="3"><li><p>输入模块名，点击【Finish】完成创建</p></li><li><p>创建成功web目录结构</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523105121.png"></p></li></ol><blockquote><p>web工程结构介绍</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523111147.png"></p><h4 id="5-eclipse-整合Tomcat"><a href="#5-eclipse-整合Tomcat" class="headerlink" title="5.eclipse 整合Tomcat"></a>5.eclipse 整合Tomcat</h4><ol><li><p>找到eclipse  window–&gt;Preferences–&gt;Server–&gt;Runtime Environm</p><p> <img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523113100.png"></p></li><li><p>添加你的tomcat安装路径</p></li><li><p>打开Server窗口，新建Server</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/20210523113607.png"></p><ol start="4"><li><p>右击所添加的Server,添加项目到此服务</p></li><li><p>在此Server上运行，右击项目中的页面文件，点击run as  ——&gt;Run on Server</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程详解</title>
      <link href="posts/ab56c92c.html"/>
      <url>posts/ab56c92c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、基本概念：程序、进程、线程"><a href="#1、基本概念：程序、进程、线程" class="headerlink" title="1、基本概念：程序、进程、线程"></a>1、基本概念：程序、进程、线程</h2><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><ul><li>完成特定任务、用某种语言编写的一组指令的集合。一段静态的代码，静态对象。</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>程序的一次执行过程，或是正在运行的一个程序，动态的过程：产生、存在、和消亡</li><li>程序是静态的，进程是动态的</li><li>进程是资源分配的单位</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li><p>线程是程序内部的一条执行路径</p></li><li><p>一个进程，同一时间并行多个线程，多线程</p></li><li><p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器</p></li><li><p>存在安全问题</p></li><li><p>一个java应用程序，至少有三个线程：main()主线程，</p></li></ul><h3 id="使用多线程的优点"><a href="#使用多线程的优点" class="headerlink" title="使用多线程的优点"></a>使用多线程的优点</h3><ol><li>提高应用程序的响应，增强用户体验</li><li>提高计算机系统CPU的利用率</li><li>改善程序结构，将复杂的进程分为多个线程，独立运行</li></ol><h3 id="何时需要多线程"><a href="#何时需要多线程" class="headerlink" title="何时需要多线程"></a>何时需要多线程</h3><ul><li>程序需要同时执行两个或多个任务</li><li>程序实现一些需要等待的任务时，如：用户输入，文件读写操作、网络操作</li><li>需要后台运行的程序</li></ul><h3 id="单核CPU和多核CPU"><a href="#单核CPU和多核CPU" class="headerlink" title="单核CPU和多核CPU"></a>单核CPU和多核CPU</h3><h4 id="单核CPU"><a href="#单核CPU" class="headerlink" title="单核CPU"></a>单核CPU</h4><ul><li>假的多线程，在一个时间单元内，只能执行一个线程的任务</li><li>实际上是单线程，运行中将其他进程挂起，执行，执行速度很快，所以在使用上感觉是多线程。</li></ul><h4 id="多核CPU"><a href="#多核CPU" class="headerlink" title="多核CPU"></a>多核CPU</h4><ul><li>真正意义上的多线程</li></ul><h4 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h4><ul><li>并行：多个CPU同时执行多个任务</li><li>并发：一个CPU “同时” 执行多个任务，如：秒杀</li></ul><h2 id="2、线程的创建和使用"><a href="#2、线程的创建和使用" class="headerlink" title="2、线程的创建和使用"></a>2、线程的创建和使用</h2><h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><ul><li><p>方式一</p><ul><li><p>继承于Thread类</p><p>步骤：</p><ol><li>创建一个继承于Thread的子类</li><li>重写Thread类的run()方法–》此线程执行的操作</li><li>创建Thread类的子类对象（可使用匿名对象）</li><li>通过此对象调用start()</li><li>若要再创建新的线程，需创建新的实例来调用start()方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//例：遍历100以内的所有偶数</span>    <span class="token comment" spellcheck="true">//1.创建一个继承于Thread类的子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.重写Thread类的run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">1000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.创建Thread类的子类的对象</span>       MyThread myThread<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//4.通过此对象调用start()①启动当前线程②调用当前线程的run()</span>       myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  如下操作任然是在main()线程执行的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">1000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                Thread.currentThread().getName()获取线程名</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>方式二</p><ul><li><p>实现Runnable接口</p><p>步骤：</p><ol><li><p>创建一个实现了Runnable接口的类</p></li><li><p>实现类中实现Runnable中的抽象方法：run()</p></li><li><p>创建实现类的对象</p></li><li><p>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</p></li><li><p>通过Thread类的对象调用start()</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 创建一个实现了Runnable接口的类</span> <span class="token keyword">class</span> <span class="token class-name">MIThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//     2. 实现类中实现Runnable中的抽象方法：run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadTes</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        3. 创建实现类的对象</span>      MIThread mi<span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">MIThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>      Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        5. 通过Thread类的对象调用start()，启动当前线程，调用当前线程的run方法，底层是Thread含有Runnable类型参数的构造器</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      再启动一个线程</span>        Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul></li><li><p>比较两种创建方式</p><ul><li><p>开发中优先选择，实现Runnable接口的方式</p></li><li><p>原因：</p><ol><li>实现的方式没有类的单继承的局限</li><li>实现方式更适合处理多线程有共享数据的情况</li></ol></li><li><p>联系： public class Thread implements Runnable</p><p>相同点：两种方式都需要重写run() 将线程 要执行的逻辑声明在run()中；</p></li></ul></li></ul><h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><ul><li>调度策略<ul><li>时间片</li><li>抢占式，高优先级的线程抢占CPU</li></ul></li><li>java的调度方法<ul><li>先来先服务，先进先出队列</li><li>高优先级，优先调度的抢占式策略</li></ul></li></ul><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><ul><li><p>优先级</p><ul><li>MAX_PRIORITY : 10</li><li>MIN_PRIORITY:  1</li></ul></li><li><p>NORM_PRIORITY : 5</p></li><li><p>获取和设置当前线程的优先级</p><ul><li>getPriority()</li><li>setPriority( int p)</li></ul></li><li><p>高优先级的线程要抢占低优先级线程的CPU执行权，只是从概率上讲，高优先级有很高概率会执行，但并不意味着高优先级的线程执行完，低优先级的才执行；</p></li></ul><h2 id="3、线程的生命周期"><a href="#3、线程的生命周期" class="headerlink" title="3、线程的生命周期"></a>3、线程的生命周期</h2><h3 id="线程生命周期的五种状态"><a href="#线程生命周期的五种状态" class="headerlink" title="线程生命周期的五种状态"></a>线程生命周期的五种状态</h3><ul><li><p>新建：Thread类或子类对象被声明创建时</p></li><li><p>就绪：新建的线程被start()后，获取了其他所有的资源，只是没分配到CPU资源</p></li><li><p>运行：获取CPU资源，执行</p></li><li><p>阻塞：某种特殊情况下，让出CPU并临时终止自己的执行</p></li><li><p>死亡：完成它的全部工作或线程提前被强制性的终止，异常导致结束；</p></li><li><p>状态图</p><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p></li></ul><h2 id="4、线程同步"><a href="#4、线程同步" class="headerlink" title="4、线程同步"></a>4、线程同步</h2><ul><li><p>多个线程操作共享数据时，出现的线程安全问题</p></li><li><p>解决方式：</p><ul><li><p>方式一：同步代码块—不能包含多了，也不能包含少了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span></code></pre><ul><li><p>说明：操作共享数据的代码==需要被同步的代码<br>共享数据：多个线程共同操作的变量</p></li><li><p>同步监视器：锁，任何一个类的对象都可充当为锁</p><p>要求：多个线程必须要共用同一把锁</p><ul><li><p>对于继承Thread类创建多线程方法</p><ol><li>同步监视器可以考虑使用定义静态类对象</li><li>可以考虑使用当前类对象synchronized (类名.class)</li></ol></li><li><p>对于实现Runnable接口创建多线程方法</p><ol><li>同步监视器可以考虑使用 this</li></ol></li></ul></li></ul></li><li><p>方式二：同步方法: 如果操作共享数据的代码完整的声明在一个方法中，将此方法声明为同步的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//同步监视器 this</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//同步监视器:当前类本身    </span><span class="token punctuation">}</span></code></pre><ol><li><p>同步方法仍然涉及到同步监视器，只是不需要显式的声明</p></li><li><p>非静态的同步方法，同步监视器是：this</p><p>静态的同步方法,同步监视器是：当前类本身</p></li></ol></li><li><p>方式三：Lock(锁) jdk5.0新增</p><ol><li><p>实例化ReentrantLock </p></li><li><p>调用lock()方法   </p></li><li><p>调用解锁方法unlock()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>han<span class="token punctuation">.</span>java<span class="token punctuation">.</span>ere<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 解决线程安全的方式三：lock--- jdk5.0新增 * @author hlrstart * @create 2021-04-04-9:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Windw win<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Windw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Windw</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    1.实例化ReentrantLock</span>     <span class="token keyword">private</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//              2.调用lock()方法</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 票号为"</span> <span class="token operator">+</span> sticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//          3.调用解锁方法</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul></li><li><p>同步的方式优缺点</p><ul><li>优点：解决了线程安全问题</li><li>局限性：操作同步代码时，是单线程的过程，效率低</li></ul></li><li><p>线程死锁问题</p><ul><li><p>不同的线程分别占用对方需要的资源不放弃，都在等待对方释放自己需要的资源。</p></li><li><p>出现死锁，不会出现异常，不会出现提示，所有线程都处于阻塞状态，无法继续。</p></li></ul></li></ul><h2 id="5、线程通信"><a href="#5、线程通信" class="headerlink" title="5、线程通信"></a>5、线程通信</h2><p>涉及到的三个方法</p><ul><li><p>wait()：一旦执行此方法，当前线程进入阻塞状态，并释放同步监视器</p></li><li><p>notify()：一旦执行此方法，就会唤醒被wait()的一个线程，若有多个线程被wait()，就唤醒优先级高的那一个</p></li><li><p>notifyAll() :一旦执行此方法，就会唤醒所有被wait()的线程</p><p><strong>说明</strong> </p><ol><li>wait()、notify()、notifyAll() 三个方法必须使用在同步代码块或同步方法中。</li><li>wait()、notify()、notifyAll() 三个方法的调用者必须是同步代码块或同步方法中的同步监视器，否则会出现异常。</li><li>wait()、notify()、notifyAll() 三个方法是定义在java.lang.Object类中。</li></ol></li></ul><h2 id="6、JDK5-0新增线程创建方式"><a href="#6、JDK5-0新增线程创建方式" class="headerlink" title="6、JDK5.0新增线程创建方式"></a>6、JDK5.0新增线程创建方式</h2><h4 id="新增方式一：实现Callable接口"><a href="#新增方式一：实现Callable接口" class="headerlink" title="新增方式一：实现Callable接口"></a>新增方式一：实现Callable接口</h4><ul><li><p>与使用Runnable相比，Callable功能更强大些</p><ul><li>call()方法可以有返回值</li><li>call()方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，获取返回结果</li></ul></li><li><p>实现步骤</p><ol><li>创建一个实现Callable的实现类</li><li>实现call方法，将此线程需要执行的操作声明在call()中</li><li>创建Callable接口实现类的对象</li><li>将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask 的对象</li><li>将FutureTask 的对象作为参数传递到Thread类的构造器中，创建Thread对象，调用start()</li><li>获取Callable中call方法的返回值</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>han<span class="token punctuation">.</span>createThread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建线程的方式三：实现Callable接口  ---jdk5.0 新增 * * @author hlrstart * @create 2021-04-04-11:24 */</span><span class="token comment" spellcheck="true">//1.创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//   2. 实现call方法，将此线程需要执行的操作声明在call()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNEw</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 3.创建Callable接口实现类的对象</span>        NumThread num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask 的对象     </span>        FutureTask f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//5.将FutureTask 的对象作为参数传递到Thread类的构造器中，创建Thread对象，调用start()</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//   6.         get()方法的返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span>          Object sum<span class="token operator">=</span>  f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="新增方式二：使用线程池（开发中使用）"><a href="#新增方式二：使用线程池（开发中使用）" class="headerlink" title="新增方式二：使用线程池（开发中使用）"></a>新增方式二：使用线程池（开发中使用）</h4><ul><li><p>思想：提前创建好多个线程，放入线程池，使用时直接获取，使用完放回池中。</p></li><li><p>好处：</p><ul><li>提高响应速度（减少创建新线程的时间）</li><li>降低资源消耗（重复利用）</li><li>便于线程管理</li></ul></li><li><p>实现步骤</p><ol><li><p>提供指定线程数量的线程</p></li><li><p>执行指定的线程的操作，需要提供实现Runnable接口或Callable接口实现类的对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.提供指定线程数量的线程</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.执行指定的线程的操作，需要提供实现Runnable接口或Callable接口实现类的对象</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//适用于Runnable</span><span class="token comment" spellcheck="true">//        service.submit(Callable callable); //适用于callable</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul><h2 id="7、涉及到的面试题"><a href="#7、涉及到的面试题" class="headerlink" title="7、涉及到的面试题"></a>7、涉及到的面试题</h2><ol><li><p>sleep()和wait()的异同？、</p><p>相同点：</p><ul><li>执行该方法，都可以使当前线程进入阻塞状态</li></ul><p>不同点：</p><ol><li>两个方法的定义位置不同：Thread类中定义sleep(),Object类中定义wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用，wait()必须使用在同步代码块或同步方法中</li><li>是否会释放同步监视器：若两个方法都使用在同步代码块或同步方法中，sleep()不会释放（例如睡眠中，厕所门依然没有打开），wait()会释放</li></ol></li><li><p>面试题：synchronized 与Lock的异同</p><p>相同：</p><ul><li>都可以解决线程安全问题</li></ul><p>不同点：</p><ul><li><p>synchronized机制在执行完同步代码之后，自动释放同步监视器</p></li><li><p>Lock需要手动启动同步（lock()),同时结束同步也需要手动的实现（unlock())</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java流程控制</title>
      <link href="posts/561f6059.html"/>
      <url>posts/561f6059.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-用户交互Scanner"><a href="#1-用户交互Scanner" class="headerlink" title="1.用户交互Scanner"></a>1.用户交互Scanner</h2><h3 id="Scannner-对象"><a href="#Scannner-对象" class="headerlink" title="Scannner 对象"></a>Scannner 对象</h3><ul><li><p>我们可以通过Scanner 类获取用户的输入</p></li><li><p>基本语法</p><pre class=" language-java"><code class="language-java">Scanner s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用：</p><ul><li><p>通过Scanner类的next( ) 与 nextLine( ) 方法获取输入的字符串</p></li><li><p>在读取之前，一般需要使用hasNext() 与 hasNextLine() 判断是否还有输入的数据</p><ul><li><p>next() </p><ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>对于输入有效字符之后的空白，作为结束符</li><li>next() 不能得到带有空格的字符串</li></ol></li><li><p>nextLine()</p><ol><li>以Enter为结束符，此方法返回的是输入回车之前的所有字符</li><li>可以获得空白</li></ol></li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建一个扫描对象，接收键盘数据</span>      Scanner s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使用nextLine()方式接收</span>          String str<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出的内容为："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//凡是属于IO流的类如果不关闭会一直占用资源，用完立即即关闭</span>      s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2. 顺序结构"></a>2. 顺序结构</h2><ul><li>java的基本结构就是顺序结构</li></ul><h2 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h2><ol><li>多个选择表达式，之间没有交集的关系，判断语句声明在上下都无关紧要。</li><li>包含关系，通常小范围声明在大范围的上面，否则范围小的无法被执行输出；</li><li>可嵌套</li><li>就近原则</li></ol><ul><li><p>if单选择结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式布尔型<span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token punctuation">}</span></code></pre></li><li><p>if 双选择结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    执行语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>if 多选择结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>​``````````</code></pre></li><li><p>switch多选择结构(匹配某一个字符/字符串)</p><ul><li><p>结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value<span class="token operator">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可选</span>    <span class="token keyword">case</span> value<span class="token operator">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可选</span>    ···    <span class="token keyword">default</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>可选    <span class="token comment" spellcheck="true">//语句</span><span class="token punctuation">}</span></code></pre></li><li><p>switch语句中的变量类型可以为</p><ul><li><p>byte、short、int 或 char、枚举类型（jdk5.0新增）、string（jdk7.0新增)</p></li><li><p>从java SE 7开始 支持字符串 String 类型了</p></li><li><p>case 标签必须为字符串常量或字面量</p></li></ul></li></ul></li></ul><h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h2><h4 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h4><ol><li>初始化条件</li><li>循环条件</li><li>循环体</li><li>迭代条件</li></ol><ul><li><p>while循环</p><ul><li><p>结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环内容</span><span class="token punctuation">}</span></code></pre></li><li><p>布尔表达式为true，循环会一直执行下去</p></li></ul></li><li><p>do ···while循环</p><ul><li><p>至少执行一次循环体</p></li><li><p>结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//代码语句</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>while 与 do ···while 的区别</p><ul><li>while先判断后执行，do···while是先执行后判断</li><li>do····while总是保证循环体至少执行一次</li></ul></li></ul></li><li><p>for 循环</p><ul><li><p>格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span>布尔表达式；更新<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句</span><span class="token punctuation">}</span></code></pre></li><li><p>嵌套for循环</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>j<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><ul><li><p>内层循环遍历一遍，只相当于外层循环执行循环体一次</p></li><li><p>外层循环控制行数，内层循环控制列数</p></li></ul></li></ul></li><li><p>Java5中引入主要用于数组的增强 for 循环</p><ul><li><p>格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句：表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码句子</span><span class="token punctuation">}</span></code></pre><ul><li><p>声明语句：声明新的局部变量，该变量类型必须和数组元素的类型匹配</p></li><li><p>表达式：即要访问的数组名，或是返回值为数组的方法</p></li><li><p>示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> number<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul><h2 id="5-break-amp-continue"><a href="#5-break-amp-continue" class="headerlink" title="5.break &amp; continue"></a>5.break &amp; continue</h2><ul><li>break 用于强行退出循环</li><li>continue 用于终止某次循环过程</li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="posts/fac754a7.html"/>
      <url>posts/fac754a7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识面向对象"><a href="#1-初识面向对象" class="headerlink" title="1.初识面向对象"></a>1.初识面向对象</h2><h3 id="面向过程-amp-面向对象"><a href="#面向过程-amp-面向对象" class="headerlink" title="面向过程&amp;面向对象"></a>面向过程&amp;面向对象</h3><ul><li><p>面向过程思想</p><ul><li>步骤清晰简单，第一步，第二步做什么。。</li><li>适合处理较为简单的问题</li><li>性能高</li><li>线性思维</li></ul></li><li><p>面向对象思想</p><ul><li>分类的思维模式，思考问题解决需要哪些分类，然后对这些分类进行单独思考</li><li>宏观上把握，整体上合理分析，微观细节，仍需要面向过程的思路处理</li><li>易维护，易复用，易拓展</li></ul></li></ul><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li><p>面向对象编程（Object-Oriented Programming，OOP)</p></li><li><p>面向对象编程的本质是：<strong>以类的方式组织代码，以对象的形式封装数据</strong></p></li><li><p>抽象</p></li><li><p>三大特性：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li><p>对象：具体的事物。类是抽象的，是对对象的抽象</p></li><li><p>类是对象的模板</p></li></ul><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li><strong>类是一种抽象的数据类型，是对某一类事物的整体描述</strong></li><li><strong>对象是抽象概念的具体实例</strong></li></ul><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul><li><p>类中包含</p><p>静态的属性：属性</p><p>动态的行为：方法</p></li></ul><h2 id="2-方法回顾加深"><a href="#2-方法回顾加深" class="headerlink" title="2. 方法回顾加深"></a>2. 方法回顾加深</h2><ul><li><p>方法的定义</p><ul><li>修饰符 ：public /private/protected/default</li><li>返回值类型</li><li>break  ：跳出switch,j结束循环，和return 相区别</li><li>方法名 ：见名知意，符合规则</li><li>参数列表 :参数类型，参数名  … 可变形参</li><li>异常抛出 </li></ul></li><li><p>方法的调用</p><ul><li>静态方法 ：通过类名直接调用，随类一起加载 只能调用静态方法。</li><li>非静态方法 ：类实例化对象调用 类实例化后才加载，静态非静态方法都可调用</li><li>形参和实参：参数类型要 一 一对应</li><li>值传递和引用传递：<ul><li>值传递：基本数据类型参数，传递的是实际存在的数值</li><li>引用传递：对象，传的地址</li></ul></li><li>this关键字</li></ul></li></ul><h2 id="3-对象的创建分析"><a href="#3-对象的创建分析" class="headerlink" title="3.对象的创建分析"></a>3.对象的创建分析</h2><h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><ul><li><p>使用new关键字创建对象，分配内存空间并给创建好的对象进行默认的初始化以及对类中构造器的调用。</p></li><li><p>类中的构造器(构造方法)，是进行创建对象时必须调用的，构造器有以下俩特点</p><ol><li><p>必须和类的名字相同</p></li><li><p>没有返回值类型，也不能写void</p></li><li><p>格式：权限修饰符+类名() { }</p></li><li><p>一个类中至少有一个构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ul><li>有参构造器<ol><li>可与其他形参列表不同的构造器构成重载</li><li>一旦定义了显示的构造器，系统就不再提供默认的空参构造器</li></ol></li></ul></li></ul><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><ul><li><p>对象的属性和方法</p><pre class=" language-java"><code class="language-java">Person people<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法</span>people<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用属性</span></code></pre></li></ul><h2 id="4-面向对象三大特性"><a href="#4-面向对象三大特性" class="headerlink" title="4.面向对象三大特性"></a>4.面向对象三大特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li><p>该隐藏的隐藏，该暴露的暴露</p></li><li><p>程序的设计要“高内聚，低耦合”(高内聚：类内部的数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法供外部使用)</p></li><li><p>封装（数据的隐藏）</p><ul><li><p>属性私有，get()/set() 方法对其操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>优点</p><ol><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护性增强</li></ol></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p>继承的本质是对某一批类的抽象；</p></li><li><p>extends “扩展”，子类是父类的扩展 使用此关键字来实现继承</p></li><li><p>java中只有单继承，没有多继承</p></li><li><p>继承是类和类之间 的关系</p></li><li><p>子类与父类的关系，从意义上来讲具有“ is a” 的关系。</p></li><li><p>object类: Java中所有的类，都默认直接或间接继承object</p></li><li><p>super :</p><ul><li>调用父类的属性和方法 super；调用父类的构造方法</li><li>隐式的调用了父类的无参构造器，只能出现在子类方法或构造方法中</li><li>super和this不能同时调用构造方法</li></ul></li><li><p>VS this</p><ul><li><p>代表的对象不同</p><ul><li>this 本身调用者这个对象</li><li>super  父类对象的引用</li></ul></li><li><p>前提</p><ul><li> this :没有继承也可以使用</li><li> super  只能在继承中使用</li></ul></li><li><p>构造方法：</p><ul><li>this()  :本类的构造器</li><li>super() :父类构造器</li></ul></li></ul></li><li><p>final </p><ul><li>final修饰变量：此变量为一个常量</li><li>final修饰的类不可被继承（断子绝孙）</li><li>final修饰的方法 :不能被重写</li><li>final修饰局部变量，一旦赋值，只能使用，不可改变。</li></ul><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><ul><li><p>前提条件：有继承关系，子类重写父类的方法</p></li><li><p>规则（子类的方法和父类方法必须一致，方法体不同）</p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但不能缩小</li><li>抛出的异常范围，可以被缩小但不能扩大</li></ol></li><li><p>非静态方法的重写</p></li><li><p>私有方法 static 修饰的方法 ，final 修饰的方法 不能被重写</p></li><li><p>私有的属性和方法不能被继承</p></li><li><p>为什么要重写：</p><p>​        1. 父类的功能，子类不一定需要，或不一定满足；</p><p>​        2. @override</p></li></ul></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li><p>一种事物的多种形态</p></li><li><p>继承是多态的前提，类型转换异常</p></li><li><p>何为多态性</p><p>父类的引用指向子类的对象（子类的对象赋给父类的引用）</p></li><li><p>子类重写父类的方法，执行子类的方法</p></li><li><p>编译看左，运行看右</p></li><li><p>方法的多态，属性没有多态</p></li></ul><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><ul><li>a instanceof A :判断对象a是否是类A的实例</li><li>使用：避免向下转型时出现class Cast Exception 的异常，在转型之前进行 instanceof 的判断<ul><li>向下转型： 父类转为子类（强制转换） </li><li>向上转型：子类转为父类<ul><li>方便方法的调用，减少重复的代码 </li></ul></li></ul></li></ul><h2 id="5-static（随类加载）"><a href="#5-static（随类加载）" class="headerlink" title="5. static（随类加载）"></a>5. static（随类加载）</h2><ul><li><p>static 修饰变量</p><ul><li>静态变量 ：在类内存中只有一个，能被类中所有实例所共享</li><li>非静态变量 ：成员变量和全局变量</li></ul></li><li><p>static 修饰方法：</p><ul><li>静态方法：只能调用静态方法和静态变量（生命周期不相同）工具类方法</li><li>非静态方法：可调用静态和非静态的方法</li></ul></li><li><p>可通过类名 .方法  类名 .属性 调用</p></li><li><p>修饰代码块：初始化变量 ，只执行一次</p></li><li><p>静态导入包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="6-抽象类和接口"><a href="#6-抽象类和接口" class="headerlink" title="6.抽象类和接口"></a>6.抽象类和接口</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>abstract 修饰</p><p>修饰方法：抽象方法</p><p>修饰类：抽象类</p></li><li><p>抽象类中可以没有抽象方法，但有抽象方法的类一定是抽象类</p></li><li><p>抽象类不能创建实例对象，用来让子类继承</p></li><li><p>抽象方法：只有方法的声明，没有方法体，子类来重写实现</p></li><li><p>子类继承抽象类，则该子类必须重写抽象类中的抽象方法，不然，该子类也要声明为抽象类</p></li><li><p>存在构造器</p></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>只有规范：一组规则，实现类来遵守</li><li>声明使用interface 关键字</li><li>可以实现多继承，易扩展</li><li>实现类实现接口使用关键字 implements </li><li>接口中的方法都是抽象的，不同的实现类需要对接口中的所有方法重写</li><li>接口中定义的属性都是常量  public static final</li><li>接口不能被实例化，接口中没有构造方法</li></ul><h2 id="7-内部类及opp实战"><a href="#7-内部类及opp实战" class="headerlink" title="7.内部类及opp实战"></a>7.内部类及opp实战</h2><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li><p>定义：就是在类内部定义一个类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"外部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"内部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>分类</p><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础语法</title>
      <link href="posts/fd6cf457.html"/>
      <url>posts/fd6cf457.html</url>
      
        <content type="html"><![CDATA[<h3 id="Java中的注释"><a href="#Java中的注释" class="headerlink" title="Java中的注释"></a>Java中的注释</h3><ol><li>单行注释    //</li><li>多行注释    /*      */</li><li>文档注释   /**       */</li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><img src="https://cdn.jsdelivr.net/gh/codehan045/imags/img/%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="关键字"></p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ol><li>所有标识符都应该以字母、$、下划线 ( _ ) 开始.</li><li>首字符之后可以是字母、$、下划线或数字的任何字符组合</li><li>不能使用关键字作为变量名或方法名</li><li>标识符大小写敏感</li></ol><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h2><h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h3><ul><li>所有变量都必须先定义后才能使用(安全性高)</li></ul><h3 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h3><h3 id="Java的数据类型"><a href="#Java的数据类型" class="headerlink" title="Java的数据类型"></a>Java的数据类型</h3><ul><li><p>基本类型</p><ol><li><p>数值类型</p><ul><li><p>整数类型</p><p>– byte(一个字节)：范围：-128~127</p><p>–short(两个字节)：范围：-2^15~(2^15-1)</p><p>–int(四个字节)：范围:-2^31~(2^31-1)</p><p>–long(八个字节)：范围：-2^63~(2^63-1)</p></li><li><p>浮点类型</p><p>–float(四个字节)</p><p>–double(八个字节)</p></li><li><p>字符类型</p><p>–char(两个字节) 本质还是数字</p></li></ul></li><li><p>boolean类型(占一位)   true / false</p></li></ol></li><li><p>引用类型</p><ol><li>类</li><li>接口</li><li>数组</li></ol></li></ul><h4 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h4><ul><li><p>位(bit):计算机中内部数据存储的最小单位，11011100是一个八位二进制数</p></li><li><p>字节(byte):计算机中数据处理的基本单。</p></li><li><p>1B(byte,字节)=8bit(位)。</p></li><li><p>字符：计算机中使用的单个字母、数字、字和符号。</p><p>转换：1B=8bit;</p></li></ul><p>​                1024B=1KB</p><p>​                1024KB=1M</p><p>​                1024M=1G</p><h2 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3.类型转换"></a>3.类型转换</h2><p>低————————————————————–高</p><p>byte,short,char —&gt;int—&gt;long—&gt;float—&gt;double</p><ul><li><p>运算中，不同类型的数据先转化为同一类型，再进行运算</p></li><li><p>强制类型转换</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>number<span class="token punctuation">;</span></code></pre><p><strong>注</strong> ：</p><ol><li>不能对布尔值进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>在把高容量转换到低容量时，用强制转换</li><li>转换时可能存在内存溢出，或者精度问题</li></ol></li><li><p>自动类型转换</p><p>低容量–&gt;高容量</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> nt<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> num<span class="token operator">=</span>nt<span class="token punctuation">;</span></code></pre></li></ul><h2 id="4-变量、常量"><a href="#4-变量、常量" class="headerlink" title="4.变量、常量"></a>4.变量、常量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>定义：可以变化的量</p></li><li><p>java是强类型语言，变量都必须声明其类型</p></li><li><p>要素：变量名，变量类型和作用域</p><blockquote><p>注意事项：</p><ul><li>每个变量都有类型，类型可以是基本数据类型，也可是引用数据类型。</li><li>变量名符合标识符的命名规范</li><li>声明变量最后以分号结尾</li></ul></blockquote></li></ul><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li><p>局部变量</p><ul><li>必须声明和初始化值</li></ul></li><li><p>实例变量</p><ul><li>从属于对象，若不进行初始化，默认为此类型的默认值<ul><li>boolean 布尔值 默认 false</li><li>除了基本数据类型，其余默认值都为null</li></ul></li></ul></li><li><p>类变量  static修饰的变量</p><ul><li>从属于类，随类出现和消失</li></ul></li></ul><h4 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h4><ul><li>所有变量、方法、类名：见名知意</li><li>类成员变量/局部变量/方法名：驼峰命名法  首字母小写：monthSalary</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写驼峰原则：MainTex</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>常量：初始化后不能再改变值</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">final</span> 常量名<span class="token operator">=</span>值<span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span></code></pre></li><li><p>常量名一般使用大写字符</p></li></ul><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><ul><li><p>算术运算符：+、-、*、/、%、++、–</p><ul><li><p>自增 ++</p><pre class=" language-java"><code class="language-java">a<span class="token operator">++</span> 与 <span class="token operator">++</span>a 等价于 a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>区别：a<span class="token operator">++</span> 先赋值后运算<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token operator">++</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">++</span>a<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span><span class="token operator">++</span>a 先运算后赋值注：这里的运算是当前值的自增或自减运算</code></pre></li><li><p>自减 - -   与自增原理相同则不再赘述</p></li><li><p>字符串连接符： + ，String 拼接</p></li></ul></li><li><p>赋值运算符：=，+=，-=，*=，/=</p></li><li><p>关系运算符：&gt;、&lt;、&gt;=、&lt;=,==,!= ,instanceof</p></li><li><p>逻辑运算符：&amp;，|，&amp;&amp;，||，^, ~, &gt;&gt;，&lt;&lt; , &gt;&gt;&gt;</p><p>短路运算：</p><ul><li>&amp;&amp; 逻辑与：两个变量都为真，结果才为true</li><li>||   逻辑或：两个变量有一个为真，则结果为真</li></ul><p>位运算(二进制运算)</p><ul><li><p>|   数值每一位做或运算</p></li><li><p>&amp;   数值每一位做与运算</p></li><li><p>^    异或运算  同为0   异为1</p></li><li><p>~    非运算   取反</p><pre class=" language-txt"><code class="language-txt">示例：   A=0011 1100;   B=0000 1011;----------------A&B= 0000 1000;A|B= 0011 1111;A^B= 0011 0111;~B = 1111 0100;</code></pre></li><li><p>&lt;&lt;  左移   *2</p></li><li><p>,&gt;&gt; 右移     /2</p></li></ul></li><li><p>条件运算符  ？：（三元运算符）</p><pre class=" language-java"><code class="language-java">X？y<span class="token operator">:</span>z<span class="token punctuation">;</span>如果x为真<span class="token punctuation">;</span>则结果为 y<span class="token punctuation">,</span>否则结果为 z<span class="token punctuation">;</span><span class="token keyword">int</span> source<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>String ty<span class="token operator">=</span>source<span class="token operator">&lt;</span><span class="token number">60</span><span class="token operator">?</span><span class="token string">"不及格"</span><span class="token operator">:</span><span class="token string">"及格"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>优先级  加（）</p></blockquote></li></ul><h2 id="6-包机制、JavaDoc"><a href="#6-包机制、JavaDoc" class="headerlink" title="6.包机制、JavaDoc"></a>6.包机制、JavaDoc</h2><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><ul><li><p>为了更好组织类，Java提供了包机制，用于区别类名的命名空间</p></li><li><p>一般使用公司域名倒置作为包名</p></li><li><p>若要使用其他包中的成员，需要使用 ”import“ 进行导包，完成引用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> 包名<span class="token punctuation">.</span>类名<span class="token punctuation">;</span><span class="token keyword">import</span> 包名<span class="token punctuation">.</span>*<span class="token punctuation">;</span>导入此包下所有的类；</code></pre></li></ul><h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><ul><li>javadoc命令是用来生成自己API文档的</li><li>参数信息<ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 知名需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul></li></ul><p>通过命令行产生javaDoc文档：javadoc  参数 文件名.java</p><p>​       - 参数：-encoding UTF-8   -charset UTF-8 Doc.java</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="posts/4a098468.html"/>
      <url>posts/4a098468.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>示例:</p><pre class=" language-html"><code class="language-html"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题##### 六级标题</code></pre><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h5 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h5><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><p>加粗</p><p><strong>helllo,world!</strong>  粗体两边加两个*</p></li><li><p>斜体</p><p><em>helllo,world!</em>     斜体两边加一个*</p></li><li><p>斜体加粗</p><p><em><strong>helllo,world!</strong></em>   两边加三个*</p></li><li><p>删除线</p><p><del>helllo,world!</del>   两边加两个~</p></li></ul><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;,引用可以嵌套，如加2个&gt;&gt;…n个</p><p>示例：</p><pre class=" language-html"><code class="language-html">>引用的内容>>引用的内容>>>>> 引用的内容</code></pre><blockquote><p>引用的内容</p><blockquote><p>引用的内容</p><blockquote><blockquote><blockquote><p>引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或三个以上的 - 或*都可以</p><p>示例：</p><pre class=" language-html"><code class="language-html">--------********</code></pre><p>效果如下：</p><p>显示效果都一样</p><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法示例：</p><pre class=" language-html"><code class="language-html">![图片名字](图片地址)![截图](C:\Users\hlr\Pictures\Saved Pictures\ChMlWl5hrNmIYramABUgQn9ogqQAANkvAHHF0EAFSBa744.jpg)</code></pre><p>效果如下</p><p>![截图](C:\Users\hlr\Pictures\Saved Pictures\ChMlWl5hrNmIYramABUgQn9ogqQAANkvAHHF0EAFSBa744.jpg)</p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><pre class=" language-html"><code class="language-html">[超链接名称](超链接地址)</code></pre><p>示例：</p><pre class=" language-html"><code class="language-html">[百度](http://baidu.com)[简书](http://jianshu.com)</code></pre><p>效果如下：</p><p><a href="www.baidu.com">百度</a></p><p><a href="http://jianshu.com/">简书</a></p><p><strong>注：</strong>Markdown本身语法不支持链接在新页面打开，有的平台可能不行，若想在新页面中打开可以用html语言的a标签代替</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>超链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>示例：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法：</p><pre class=" language-html"><code class="language-html">- 列表内容+ 列表内容* 列表内容注：- + * 和内容之间都有一个空格    列表可嵌套</code></pre><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>语法：</p><pre class=" language-html"><code class="language-html">1. 列表内容2. 列表内容3. 列表内容注： 数字.与内容之间有空格</code></pre><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>示例：</p><pre class=" language-html"><code class="language-html">名字|性别|生日--|--|--张三 | 男   | 2021 </code></pre><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>2021</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法</p><p>单行代码:代码用  ` 包起来</p><pre class=" language-html"><code class="language-html">`代码内容`</code></pre><p>效果如下：</p><p><code> 代码内容</code></p><p>代码块：代码用三个 ` 包起来</p><pre class=" language-java"><code class="language-java">​```<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>​```</code></pre><p>效果如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编辑语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc数据库连接方式迭代</title>
      <link href="posts/4abf35f0.html"/>
      <url>posts/4abf35f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="jdbc数据库连接方式（迭代）"><a href="#jdbc数据库连接方式（迭代）" class="headerlink" title="jdbc数据库连接方式（迭代）"></a>jdbc数据库连接方式（迭代）</h2><h4 id="方式五为最终版本"><a href="#方式五为最终版本" class="headerlink" title="方式五为最终版本"></a>方式五为最终版本</h4><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        1.获取Driver的实现类对象</span>        Driver driver <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//url:http://localhost:8080/gmail/key.jpg</span><span class="token comment" spellcheck="true">//        jdbc:mysql:协议</span><span class="token comment" spellcheck="true">//        localhost:ip地址</span><span class="token comment" spellcheck="true">//        3306  默认mysql端口号</span><span class="token comment" spellcheck="true">//        test:test数据库</span>        String                           url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        将用户名和密码封装在Properties</span>        Properties info<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con<span class="token operator">=</span>driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    方式二  对方式一的迭代</span><span class="token comment" spellcheck="true">//    在如下的程序中不出现第三方的API,使程序具有更好的可移植性</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    1.获取Driver实现类对象，使用反射</span>     Class <span class="token class-name">cla</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Driver driver<span class="token operator">=</span><span class="token punctuation">(</span>Driver<span class="token punctuation">)</span>cla<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//     2.提供连接的数据库</span>     String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     3.提供连接需要的用户名和密码</span>     Properties info<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     4.获取连接</span>     Connection con<span class="token operator">=</span>driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    方式三：使用DriverManager替换Driver</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//        1.获取Driver 实现类对象</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Driver driver<span class="token operator">=</span><span class="token punctuation">(</span>Driver<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        2.提供另外三个连接信息</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>        String user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        String password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        注册驱动</span>        DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取连接</span>        Connection con<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    方式四：可以只是加载驱动，不用显示的注册驱动了</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    1.提供三个连接的基本信息</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>        String user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        String password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    2.加载Driver</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        相较于方式三，可以省略如下操作</span><span class="token comment" spellcheck="true">//        Driver driver=(Driver)clazz.newInstance();</span><span class="token comment" spellcheck="true">//        注册驱动</span><span class="token comment" spellcheck="true">//        DriverManager.registerDriver(driver);</span><span class="token comment" spellcheck="true">//        为什么可以：</span>                <span class="token comment" spellcheck="true">/*在MySQL的Driver实现类中声明了静态代码块来实现注册驱动         *          */</span><span class="token comment" spellcheck="true">//    3.获取连接</span>        Connection con<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="方式五（最终版本）"><a href="#方式五（最终版本）" class="headerlink" title="方式五（最终版本）"></a>方式五（最终版本）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    方式五：将数据库连接需要的4个信息</span>    <span class="token comment" spellcheck="true">/*     * 好处：     * 1.实现了数据与代码的分离，实现了解耦     * 2.如果需要修改配置文件信息，可以避免程序重新打包     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        1.读取配置文件中的4个基本信息</span>    InputStream is<span class="token operator">=</span> JdbcCreat1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    String user<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String url<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String driverClass<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    2.加载驱动</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    3.获取连接</span>    Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>附带的配置文件</p><pre class=" language-java"><code class="language-java">user<span class="token operator">=</span>rootpassword<span class="token operator">=</span>rooturl<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>testdriverClass<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库连接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java概述</title>
      <link href="posts/5e4eda94.html"/>
      <url>posts/5e4eda94.html</url>
      
        <content type="html"><![CDATA[<h2 id="java帝国的诞生"><a href="#java帝国的诞生" class="headerlink" title="java帝国的诞生"></a>java帝国的诞生</h2><h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul><li>1972年C诞生<ul><li>贴近硬件，运行极快，效率高</li><li>操作系统，编译器，数据库，网络系统</li><li>指针和内存管理</li></ul></li><li>1982年C++诞生<ul><li>面向对象</li><li>兼容C</li><li>圆形领域、游戏等</li></ul></li></ul><h2 id="java特性和优势"><a href="#java特性和优势" class="headerlink" title="java特性和优势"></a>java特性和优势</h2><ul><li>简单性</li><li>面向对象</li><li>可移植性 跨平台性 虚拟机</li><li>Write Once ,Run Anywhere</li><li>高性能</li><li>分布式</li><li>动态性 反射机制</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h2 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h2><ul><li>JavaSE :标准版 (桌面程序，控制台开发。。。)</li><li>JavaME:嵌入式开发</li><li>JavaEE:E企业级开发（web端，服务器开发。。）</li></ul><h2 id="JDK，JRE-JVM"><a href="#JDK，JRE-JVM" class="headerlink" title="JDK，JRE , JVM"></a>JDK，JRE , JVM</h2><ul><li>JVM:Java虚拟机</li><li>JRE:Java的运行环境 jre=JVM+类库</li><li>JDK: Java开发工具 jdk=jre+开发工具（编译工具 Javac.exe 打包工具 jar.exe)</li><li>简单而言：使用JDK开发完成的Java程序，交给JRE去运行</li></ul><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="卸载jdK"><a href="#卸载jdK" class="headerlink" title="卸载jdK"></a>卸载jdK</h3><ol><li>删除Java的安装目录</li><li>删除JAVA_HOME</li><li>删除path下关于Java的目录</li><li>java-version 命令行输入</li></ol><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ol><li><p>百度搜索JDK8 找到下载地址</p></li><li><p>同意协议</p></li><li><p>下载电脑对应的版本</p></li><li><p>双击安装</p></li><li><p><strong>记住安装的路径</strong></p></li><li><p>配置环境变量</p><ol><li>我的电脑–&gt;右键–&gt;属性<ol><li>环境变量–&gt;JAVA_HOME</li><li>配置path变量</li></ol></li></ol></li><li><p>测试JDK是否安装成功</p></li><li><p>打开cmd</p><ol start="2"><li>输入java -version</li></ol></li></ol><h2 id="hello-World第一个Java程序"><a href="#hello-World第一个Java程序" class="headerlink" title="hello World第一个Java程序"></a>hello World第一个Java程序</h2><ol><li>新建一个文件夹，存放代码</li><li>新建一个Java文件<ul><li>文件后缀名为.java</li><li>Hello.java</li><li>[注意点]：系统可能没有显示后缀名，需要手动打开</li></ul></li><li>编写代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>编译javac java文件，生成 .class文件</li><li>运行class文件，java class文件</li></ol><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ol><li>每个单词的大小写不能出现问题，<strong>java是严格区分大小写的</strong></li><li>尽量用英文</li><li>文件名和类名必须保证一致，并且首字母大写</li><li>符号使用了中文</li><li>乱码，编码集错误，更改保存文件的编码集</li></ol><h3 id="java程序运行机制"><a href="#java程序运行机制" class="headerlink" title="java程序运行机制"></a>java程序运行机制</h3><p>编译型：全部编译为机器语言，统一执行</p><p>解释型：边解释边运行</p><p>源程序 java文件 ——&gt;java编译器–&gt;字节码.class文件 –&gt;类加载器–&gt;字节码校验器—&gt;解释器—&gt;操作系统平台</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子布局</title>
      <link href="posts/f929.html"/>
      <url>posts/f929.html</url>
      
        <content type="html"><![CDATA[<h3 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h3><ul><li><p>元素水平方向的布局：<br><em><strong>元素在其父元素中，水平方向的位置由以下几个属性共同决定</strong></em></p><ul><li><p>margin-left</p></li><li><p>border-left</p></li><li><p>padding-left</p></li><li><p>width</p></li><li><p>padding-right </p></li><li><p>border-right</p></li><li><p>margin-right</p><blockquote><p>上述几个属性对应值的和=其父元素内容区的宽度（必须满足）</p><p>如果相加结果使等式不成立，则称为过渡约束，则等式会自动调整</p></blockquote><ul><li><p>调整情况：<br>这七个值中有三个值可设置为auto  </p><ul><li><p>width  默认值为 auto</p></li><li><p>margin-left  默认值 0</p></li><li><p>margin-right 默认值 0</p><ol><li><p>如果七个值中没有auto的情况，则浏览器会自动调整margin-right的值使等式满足</p></li><li><p>如果某个值为auto，则会自动调整为auto的那个值以使等式成立</p></li><li><p>如果将一个宽度和一个外边距设置为auto，则宽度会调到最大，设置为auto的外边距自动为0</p></li><li><p>如果将三个值都设置为 auto ，则外边距都是0，宽度最大</p></li><li><p>如果将外边距都设置为auto ，宽度为固定值，则外边距设置为相同的值<br>利用这一特点来使一个元素在其父元素中水平居中</p><pre class=" language-CSS"><code class="language-CSS">width:100px;margin:0 auto;  /*水平居中*/</code></pre></li></ol></li></ul></li></ul></li></ul></li></ul><h3 id="盒子的垂直布局"><a href="#盒子的垂直布局" class="headerlink" title="盒子的垂直布局"></a>盒子的垂直布局</h3><ul><li>默认情况下：父元素的高度被内容撑开<ul><li><p>子元素是在父元素的内容区中排列的</p></li><li><p>如果子元素的大小超过了父元素，则子元素会从父元素中溢出<br><strong>使用overflow 属性设置父元素如何处理溢出的子元素</strong></p><ul><li>可选值<ul><li> visible 默认值 子元素会从父元素中溢出，在父元素外部的位置溢出</li><li> hidden 溢出的内容将会被裁剪，不会显示</li><li> scroll 生成两个滚动条，通过滚动条来查看完整的内容</li><li> auto  根据需要生成滚动条</li><li> overflow-x：单独处理水平方向</li><li> overflow-y：单独处理垂直方向</li></ul></li></ul></li></ul></li></ul><h4 id="外边距折叠问题"><a href="#外边距折叠问题" class="headerlink" title="外边距折叠问题"></a>外边距折叠问题</h4><ul><li><p>相邻的垂直方向外边距会发生重叠现象</p><ol><li><p>兄弟元素：</p><ul><li>兄弟元素之间相邻，垂直外边距会取两者之间的最大值（两者都为正值）</li></ul><p><strong>特殊情况：如果相邻的外边距一正一负，则取两者之和</strong></p><p>​                     都是负值，则取两者中绝对值较大的</p></li><li><p>父子元素：</p><ul><li>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）需进行处理</li><li>处理方式详见浮动中高度塌陷的解决方案</li></ul></li></ol><h4 id="行内元素的盒模型："><a href="#行内元素的盒模型：" class="headerlink" title="行内元素的盒模型："></a>行内元素的盒模型：</h4></li><li><p>行内元素不支持设置宽度和高度</p></li><li><p>行内元素可以设置 padding ，但是垂直方向 padding 不影响页面的布局</p></li><li><p>行内元素可以设置 margin ，但是垂直方向 margin 不影响页面的布局</p></li><li><p>行内元素可以设置 border ，但是垂直方向 border 不影响页面的布局</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 静态网页布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
